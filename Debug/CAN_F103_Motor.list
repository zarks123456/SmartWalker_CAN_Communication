
CAN_F103_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006100  08006100  00016100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800652c  0800652c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800652c  0800652c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800652c  0800652c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800653c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001e0  08006718  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006718  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f84  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c30  00000000  00000000  0002a189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a47  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009835  00000000  00000000  0004686f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084780  00000000  00000000  000500a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  000d4874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080060e8 	.word	0x080060e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080060e8 	.word	0x080060e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <_ZN13CANServoMotorC1Eh>:
#include "CANServoMotor.h"

CANServoMotor::CANServoMotor(uint8_t id) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	motorID = id;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	78fa      	ldrb	r2, [r7, #3]
 8000a98:	741a      	strb	r2, [r3, #16]
}
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <_ZN13CANServoMotorD1Ev>:

CANServoMotor::~CANServoMotor() {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	// Destructor implementation (if required)
}
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <_ZN13CANServoMotor5ResetEv>:

void CANServoMotor::Reset() {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	txHeader.DLC = 2;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
	txHeader.IDE = CAN_ID_STD;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
	txHeader.StdId = static_cast<uint32_t>(COBID::NMT);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]

	uint8_t reset[] = { 82, motorID };
 8000ada:	2300      	movs	r3, #0
 8000adc:	81bb      	strh	r3, [r7, #12]
 8000ade:	2352      	movs	r3, #82	; 0x52
 8000ae0:	733b      	strb	r3, [r7, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7c1b      	ldrb	r3, [r3, #16]
 8000ae6:	737b      	strb	r3, [r7, #13]
	HAL_CAN_AddTxMessage(this->hcan, &txHeader, reset, &txMailbox);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6958      	ldr	r0, [r3, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f103 0118 	add.w	r1, r3, #24
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3330      	adds	r3, #48	; 0x30
 8000af6:	f107 020c 	add.w	r2, r7, #12
 8000afa:	f000 ff49 	bl	8001990 <HAL_CAN_AddTxMessage>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_ZN13CANServoMotor4InitEP19__CAN_HandleTypeDef>:

void CANServoMotor::Init(CAN_HandleTypeDef *hcan) {
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
	this->hcan = hcan;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	615a      	str	r2, [r3, #20]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <_ZN13CANServoMotor12StartCommandEv>:

void CANServoMotor::StartCommand() {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	txHeader.DLC = 2;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
	txHeader.IDE = CAN_ID_STD;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
	txHeader.StdId = static_cast<uint32_t>(COBID::NMT);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]

	uint8_t operationalmode[] = { 01, motorID };
 8000b40:	2300      	movs	r3, #0
 8000b42:	81bb      	strh	r3, [r7, #12]
 8000b44:	2301      	movs	r3, #1
 8000b46:	733b      	strb	r3, [r7, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7c1b      	ldrb	r3, [r3, #16]
 8000b4c:	737b      	strb	r3, [r7, #13]
	HAL_CAN_AddTxMessage(hcan, &txHeader, operationalmode, &txMailbox);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6958      	ldr	r0, [r3, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f103 0118 	add.w	r1, r3, #24
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3330      	adds	r3, #48	; 0x30
 8000b5c:	f107 020c 	add.w	r2, r7, #12
 8000b60:	f000 ff16 	bl	8001990 <HAL_CAN_AddTxMessage>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef>:
	uint8_t speed[] = { 0x40, 0x6C, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00 };
	HAL_CAN_AddTxMessage(hcan, &txHeader, speed, &txMailbox);
}

CANServoMotor::Data CANServoMotor::ParseData(uint8_t *rxData,
		CAN_RxHeaderTypeDef &rxHeader) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]
	Data parseData;
	uint16_t registrarAddress = (static_cast<uint16_t>(rxData[2]) << 8)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021b      	lsls	r3, r3, #8
			| rxData[1];
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
	uint16_t registrarAddress = (static_cast<uint16_t>(rxData[2]) << 8)
 8000b90:	82fb      	strh	r3, [r7, #22]

	switch (registrarAddress){
 8000b92:	8afb      	ldrh	r3, [r7, #22]
 8000b94:	f246 026c 	movw	r2, #24684	; 0x606c
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d10f      	bne.n	8000bbc <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef+0x50>
	case 0x606C:
		parseData.Error=this->parseVelocity(rxData, parseData.leftValue, parseData.rightValue);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f103 010c 	add.w	r1, r3, #12
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f103 0208 	add.w	r2, r3, #8
 8000ba8:	460b      	mov	r3, r1
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f000 f80f 	bl	8000bd0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	711a      	strb	r2, [r3, #4]
		break;
 8000bba:	bf00      	nop
	}
	// Check if the data length is valid (less than or equal to 7, considering RxData[0] is the data length)

	parseData.Address=registrarAddress;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	8afa      	ldrh	r2, [r7, #22]
 8000bc0:	80da      	strh	r2, [r3, #6]
	return parseData;
 8000bc2:	bf00      	nop
}
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	0000      	movs	r0, r0
	...

08000bd0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_>:

bool CANServoMotor::parseVelocity(uint8_t *rxData, int &leftVelocity,
		int &rightVelocity) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
	if (rxData[0] == 0x43) {
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b43      	cmp	r3, #67	; 0x43
 8000be4:	d14e      	bne.n	8000c84 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xb4>
		switch (rxData[3]){
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3303      	adds	r3, #3
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d002      	beq.n	8000bf6 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x26>
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d020      	beq.n	8000c36 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x66>
 8000bf4:	e03f      	b.n	8000c76 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xa6>
			case 0x01:
				this->LeftVelocity= ((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3307      	adds	r3, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	061a      	lsls	r2, r3, #24
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3306      	adds	r3, #6
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	431a      	orrs	r2, r3
				| (rxData[5] << 8) | rxData[4])*0.1;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3305      	adds	r3, #5
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	4313      	orrs	r3, r2
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	3204      	adds	r2, #4
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fbf2 	bl	8000404 <__aeabi_i2d>
 8000c20:	a31f      	add	r3, pc, #124	; (adr r3, 8000ca0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xd0>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fc57 	bl	80004d8 <__aeabi_dmul>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
				this->LeftVelocity= ((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 8000c2e:	68f9      	ldr	r1, [r7, #12]
 8000c30:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8000c34:	e01f      	b.n	8000c76 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xa6>
			case 0x02:
				this->RightVelocity=((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3307      	adds	r3, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	061a      	lsls	r2, r3, #24
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3306      	adds	r3, #6
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	431a      	orrs	r2, r3
						| (rxData[5] << 8) | rxData[4])*0.1;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3305      	adds	r3, #5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	4313      	orrs	r3, r2
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	3204      	adds	r2, #4
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbd2 	bl	8000404 <__aeabi_i2d>
 8000c60:	a30f      	add	r3, pc, #60	; (adr r3, 8000ca0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xd0>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fc37 	bl	80004d8 <__aeabi_dmul>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
				this->RightVelocity=((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	e9c1 2302 	strd	r2, r3, [r1, #8]
				break;
 8000c74:	bf00      	nop
		}
		leftVelocity=0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
		rightVelocity=0;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e005      	b.n	8000c90 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xc0>
	} else {
		// Invalid data length, set default values
		leftVelocity = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
		rightVelocity = 0;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
	}
}
 8000c90:	bf00      	nop
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	9999999a 	.word	0x9999999a
 8000ca4:	3fb99999 	.word	0x3fb99999

08000ca8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6178      	str	r0, [r7, #20]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f000 ff39 	bl	8001b2e <HAL_CAN_GetRxMessage>

	canData=controller.ParseData(RxData, RxHeader);
 8000cbc:	4c2d      	ldr	r4, [pc, #180]	; (8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000cc2:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000cc4:	492c      	ldr	r1, [pc, #176]	; (8000d78 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000cc6:	f7ff ff51 	bl	8000b6c <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef>
 8000cca:	463b      	mov	r3, r7
 8000ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int j = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
	j = sprintf(message, "%x ", canData.Address);
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000cd8:	88db      	ldrh	r3, [r3, #6]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4927      	ldr	r1, [pc, #156]	; (8000d7c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000cde:	4828      	ldr	r0, [pc, #160]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000ce0:	f002 ff8a 	bl	8003bf8 <siprintf>
 8000ce4:	61f8      	str	r0, [r7, #28]
	j += sprintf(message + j, "%.2f ", controller.LeftVelocity);
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000cea:	1898      	adds	r0, r3, r2
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	4924      	ldr	r1, [pc, #144]	; (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000cf4:	f002 ff80 	bl	8003bf8 <siprintf>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	61fb      	str	r3, [r7, #28]
	j += sprintf(message + j, "%.2f ", controller.RightVelocity);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d04:	1898      	adds	r0, r3, r2
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d0c:	491d      	ldr	r1, [pc, #116]	; (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000d0e:	f002 ff73 	bl	8003bf8 <siprintf>
 8000d12:	4602      	mov	r2, r0
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	4413      	add	r3, r2
 8000d18:	61fb      	str	r3, [r7, #28]
	j += sprintf(message + j, "%d ", canData.leftValue);
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d22:	6892      	ldr	r2, [r2, #8]
 8000d24:	4918      	ldr	r1, [pc, #96]	; (8000d88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 ff66 	bl	8003bf8 <siprintf>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	61fb      	str	r3, [r7, #28]
	j += sprintf(message + j, "%d \r\n", canData.rightValue);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d3c:	68d2      	ldr	r2, [r2, #12]
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 ff59 	bl	8003bf8 <siprintf>
 8000d46:	4602      	mov	r2, r0
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	61fb      	str	r3, [r7, #28]

	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 100);
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d50:	f7ff f9fe 	bl	8000150 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	4909      	ldr	r1, [pc, #36]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000d5e:	f002 f939 	bl	8002fd4 <HAL_UART_Transmit>
}
 8000d62:	bf00      	nop
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200002ec 	.word	0x200002ec
 8000d70:	200002d0 	.word	0x200002d0
 8000d74:	200002a8 	.word	0x200002a8
 8000d78:	20000270 	.word	0x20000270
 8000d7c:	08006100 	.word	0x08006100
 8000d80:	200002f8 	.word	0x200002f8
 8000d84:	08006104 	.word	0x08006104
 8000d88:	0800610c 	.word	0x0800610c
 8000d8c:	08006110 	.word	0x08006110
 8000d90:	20000224 	.word	0x20000224

08000d94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d9a:	f000 fb6b 	bl	8001474 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d9e:	f000 f849 	bl	8000e34 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000da2:	f000 f91d 	bl	8000fe0 <_ZL12MX_GPIO_Initv>
	MX_CAN_Init();
 8000da6:	f000 f895 	bl	8000ed4 <_ZL11MX_CAN_Initv>
	MX_USART1_UART_Init();
 8000daa:	f000 f8eb 	bl	8000f84 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8000dae:	481b      	ldr	r0, [pc, #108]	; (8000e1c <main+0x88>)
 8000db0:	f000 fdaa 	bl	8001908 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000db4:	2102      	movs	r1, #2
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <main+0x88>)
 8000db8:	f000 ffda 	bl	8001d70 <HAL_CAN_ActivateNotification>

	controller.Init(&hcan);
 8000dbc:	4917      	ldr	r1, [pc, #92]	; (8000e1c <main+0x88>)
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <main+0x8c>)
 8000dc0:	f7ff fea1 	bl	8000b06 <_ZN13CANServoMotor4InitEP19__CAN_HandleTypeDef>
	controller.Reset();
 8000dc4:	4816      	ldr	r0, [pc, #88]	; (8000e20 <main+0x8c>)
 8000dc6:	f7ff fe78 	bl	8000aba <_ZN13CANServoMotor5ResetEv>
	controller.StartCommand();
 8000dca:	4815      	ldr	r0, [pc, #84]	; (8000e20 <main+0x8c>)
 8000dcc:	f7ff fea8 	bl	8000b20 <_ZN13CANServoMotor12StartCommandEv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		TxHeader.DLC = 8;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <main+0x90>)
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	611a      	str	r2, [r3, #16]
		TxHeader.StdId = 0x601;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <main+0x90>)
 8000dd8:	f240 6201 	movw	r2, #1537	; 0x601
 8000ddc:	601a      	str	r2, [r3, #0]
		uint8_t lspeed[] = { 0x40, 0x6C, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00 };// set heart beat rate
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <main+0x94>)
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de8:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, lspeed, &TxMailbox);
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <main+0x98>)
 8000df2:	490c      	ldr	r1, [pc, #48]	; (8000e24 <main+0x90>)
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <main+0x88>)
 8000df6:	f000 fdcb 	bl	8001990 <HAL_CAN_AddTxMessage>
		uint8_t rspeed[] = { 0x40, 0x6C, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00 };// set heart beat rate
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <main+0x9c>)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e02:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, rspeed, &TxMailbox);
 8000e06:	463a      	mov	r2, r7
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <main+0x98>)
 8000e0a:	4906      	ldr	r1, [pc, #24]	; (8000e24 <main+0x90>)
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <main+0x88>)
 8000e0e:	f000 fdbf 	bl	8001990 <HAL_CAN_AddTxMessage>

		//HAL_UART_Transmit(&huart1, "Test\r\n", 8, 100);
		//printf("Test\r\n");

		HAL_Delay(10);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f000 fb90 	bl	8001538 <HAL_Delay>
	}
 8000e18:	e7da      	b.n	8000dd0 <main+0x3c>
 8000e1a:	bf00      	nop
 8000e1c:	200001fc 	.word	0x200001fc
 8000e20:	20000270 	.word	0x20000270
 8000e24:	200002b8 	.word	0x200002b8
 8000e28:	08006118 	.word	0x08006118
 8000e2c:	200002f4 	.word	0x200002f4
 8000e30:	08006120 	.word	0x08006120

08000e34 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b090      	sub	sp, #64	; 0x40
 8000e38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	2228      	movs	r2, #40	; 0x28
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fa70 	bl	8003328 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fc49 	bl	8002714 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 8000e92:	f000 f8c7 	bl	8001024 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 feb1 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8000ec6:	f000 f8ad 	bl	8001024 <Error_Handler>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3740      	adds	r7, #64	; 0x40
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <_ZL11MX_CAN_Initv>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000edc:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <_ZL11MX_CAN_Initv+0xac>)
 8000ede:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000ee0:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000ee2:	2209      	movs	r2, #9
 8000ee4:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000ef4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ef8:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f00:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f28:	f000 fb2a 	bl	8001580 <HAL_CAN_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <_ZL11MX_CAN_Initv+0x6c>
		Error_Handler();
 8000f3c:	f000 f872 	bl	8001024 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;
 8000f44:	230a      	movs	r3, #10
 8000f46:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000 << 5;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x00 << 5;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 8000f64:	230d      	movs	r3, #13
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <_ZL11MX_CAN_Initv+0xa8>)
 8000f6e:	f000 fc02 	bl	8001776 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001fc 	.word	0x200001fc
 8000f80:	40006400 	.word	0x40006400

08000f84 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f8c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fbc:	f001 ffba 	bl	8002f34 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8000fd0:	f000 f828 	bl	8001024 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000224 	.word	0x20000224
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <_ZL12MX_GPIO_Initv+0x40>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <_ZL12MX_GPIO_Initv+0x40>)
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <_ZL12MX_GPIO_Initv+0x40>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_ZL12MX_GPIO_Initv+0x40>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <_ZL12MX_GPIO_Initv+0x40>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <_ZL12MX_GPIO_Initv+0x40>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000

08001024 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001046:	4293      	cmp	r3, r2
 8001048:	d103      	bne.n	8001052 <_Z41__static_initialization_and_destruction_0ii+0x22>
CANServoMotor controller(1);
 800104a:	2101      	movs	r1, #1
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800104e:	f7ff fd1b 	bl	8000a88 <_ZN13CANServoMotorC1Eh>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d107      	bne.n	8001068 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105e:	4293      	cmp	r3, r2
 8001060:	d102      	bne.n	8001068 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001064:	f7ff fd1f 	bl	8000aa6 <_ZN13CANServoMotorD1Ev>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000270 	.word	0x20000270

08001074 <_GLOBAL__sub_I_hcan>:
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
 8001078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ffd7 	bl	8001030 <_Z41__static_initialization_and_destruction_0ii>
 8001082:	bd80      	pop	{r7, pc}

08001084 <_GLOBAL__sub_D_hcan>:
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
 8001088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ffcf 	bl	8001030 <_Z41__static_initialization_and_destruction_0ii>
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_MspInit+0x5c>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_MspInit+0x5c>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_MspInit+0x5c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_MspInit+0x5c>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_MspInit+0x5c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_MspInit+0x5c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_MspInit+0x60>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_MspInit+0x60>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000

080010f8 <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
	if (hcan->Instance == CAN1) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a20      	ldr	r2, [pc, #128]	; (8001194 <HAL_CAN_MspInit+0x9c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d139      	bne.n	800118c <HAL_CAN_MspInit+0x94>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_CAN_MspInit+0xa0>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_CAN_MspInit+0xa0>)
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001122:	61d3      	str	r3, [r2, #28]
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_CAN_MspInit+0xa0>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_CAN_MspInit+0xa0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_CAN_MspInit+0xa0>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_CAN_MspInit+0xa0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
		/**CAN GPIO Configuration
		 PA11     ------> CAN_RX
		 PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480f      	ldr	r0, [pc, #60]	; (800119c <HAL_CAN_MspInit+0xa4>)
 800115e:	f001 f95d 	bl	800241c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_CAN_MspInit+0xa4>)
 8001178:	f001 f950 	bl	800241c <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2014      	movs	r0, #20
 8001182:	f001 f914 	bl	80023ae <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001186:	2014      	movs	r0, #20
 8001188:	f001 f92d 	bl	80023e6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40006400 	.word	0x40006400
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d131      	bne.n	8001224 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_UART_MspInit+0x94>)
 8001206:	f001 f909 	bl	800241c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_UART_MspInit+0x94>)
 8001220:	f001 f8fc 	bl	800241c <HAL_GPIO_Init>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40013800 	.word	0x40013800
 8001230:	40021000 	.word	0x40021000
 8001234:	40010800 	.word	0x40010800

08001238 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800127e:	f000 f93f 	bl	8001500 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800128e:	f000 fd94 	bl	8001dba <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001fc 	.word	0x200001fc

0800129c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <_kill>:

int _kill(int pid, int sig) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012b4:	f002 f80e 	bl	80032d4 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2216      	movs	r2, #22
 80012bc:	601a      	str	r2, [r3, #0]
	return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_exit>:

void _exit(int status) {
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012d2:	f04f 31ff 	mov.w	r1, #4294967295
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffe7 	bl	80012aa <_kill>
	while (1) {
 80012dc:	e7fe      	b.n	80012dc <_exit+0x12>

080012de <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e00a      	b.n	8001306 <_read+0x28>
		*ptr++ = __io_getchar();
 80012f0:	f3af 8000 	nop.w
 80012f4:	4601      	mov	r1, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	60ba      	str	r2, [r7, #8]
 80012fc:	b2ca      	uxtb	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbf0      	blt.n	80012f0 <_read+0x12>
	}

	return len;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e009      	b.n	800133e <_write+0x26>
		__io_putchar(*ptr++);
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	60ba      	str	r2, [r7, #8]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	dbf1      	blt.n	800132a <_write+0x12>
	}
	return len;
 8001346:	687b      	ldr	r3, [r7, #4]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_close>:

int _close(int file) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	605a      	str	r2, [r3, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <_isatty>:

int _isatty(int file) {
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	return 1;
 800138c:	2301      	movs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
		errno = ENOMEM;
 80013e0:	f001 ff78 	bl	80032d4 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <_sbrk+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20002800 	.word	0x20002800
 8001410:	00000400 	.word	0x00000400
 8001414:	2000035c 	.word	0x2000035c
 8001418:	20000378 	.word	0x20000378

0800141c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff fff8 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800142e:	490c      	ldr	r1, [pc, #48]	; (8001460 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001444:	4c09      	ldr	r4, [pc, #36]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f001 ff45 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001456:	f7ff fc9d 	bl	8000d94 <main>
  bx lr
 800145a:	4770      	bx	lr
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001464:	0800653c 	.word	0x0800653c
  ldr r2, =_sbss
 8001468:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800146c:	20000374 	.word	0x20000374

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x28>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x28>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 ff87 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fe00 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40022000 	.word	0x40022000

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ff9f 	bl	8002402 <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 ff67 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_IncTick+0x1c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x20>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_IncTick+0x20>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000008 	.word	0x20000008
 8001520:	20000360 	.word	0x20000360

08001524 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_GetTick+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000360 	.word	0x20000360

08001538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff fff0 	bl	8001524 <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d005      	beq.n	800155e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_Delay+0x44>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155e:	bf00      	nop
 8001560:	f7ff ffe0 	bl	8001524 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f7      	bhi.n	8001560 <HAL_Delay+0x28>
  {
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0ed      	b.n	800176e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fdaa 	bl	80010f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b4:	f7ff ffb6 	bl	8001524 <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ba:	e012      	b.n	80015e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015bc:	f7ff ffb2 	bl	8001524 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	d90b      	bls.n	80015e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2205      	movs	r2, #5
 80015da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0c5      	b.n	800176e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0e5      	beq.n	80015bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0202 	bic.w	r2, r2, #2
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001600:	f7ff ff90 	bl	8001524 <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001606:	e012      	b.n	800162e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001608:	f7ff ff8c 	bl	8001524 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d90b      	bls.n	800162e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2205      	movs	r2, #5
 8001626:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e09f      	b.n	800176e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1e5      	bne.n	8001608 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7e5b      	ldrb	r3, [r3, #25]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e9b      	ldrb	r3, [r3, #26]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0220 	bic.w	r2, r2, #32
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7edb      	ldrb	r3, [r3, #27]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0210 	bic.w	r2, r2, #16
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0210 	orr.w	r2, r2, #16
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7f1b      	ldrb	r3, [r3, #28]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0208 	orr.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0208 	bic.w	r2, r2, #8
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7f5b      	ldrb	r3, [r3, #29]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	ea42 0103 	orr.w	r1, r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001776:	b480      	push	{r7}
 8001778:	b087      	sub	sp, #28
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800178e:	7cfb      	ldrb	r3, [r7, #19]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d003      	beq.n	800179c <HAL_CAN_ConfigFilter+0x26>
 8001794:	7cfb      	ldrb	r3, [r7, #19]
 8001796:	2b02      	cmp	r3, #2
 8001798:	f040 80aa 	bne.w	80018f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2201      	movs	r2, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d123      	bne.n	800181e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	401a      	ands	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3248      	adds	r2, #72	; 0x48
 80017fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001812:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001814:	6979      	ldr	r1, [r7, #20]
 8001816:	3348      	adds	r3, #72	; 0x48
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d122      	bne.n	800186c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001846:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3248      	adds	r2, #72	; 0x48
 800184c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001860:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001862:	6979      	ldr	r1, [r7, #20]
 8001864:	3348      	adds	r3, #72	; 0x48
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001886:	e007      	b.n	8001898 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018b2:	e007      	b.n	80018c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018e2:	f023 0201 	bic.w	r2, r3, #1
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e006      	b.n	80018fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d12e      	bne.n	800197a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff fdf6 	bl	8001524 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800193a:	e012      	b.n	8001962 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800193c:	f7ff fdf2 	bl	8001524 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d90b      	bls.n	8001962 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e012      	b.n	8001988 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e5      	bne.n	800193c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e006      	b.n	8001988 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_AddTxMessage+0x2c>
 80019b4:	7ffb      	ldrb	r3, [r7, #31]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	f040 80ad 	bne.w	8001b16 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10a      	bne.n	80019dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8095 	beq.w	8001b06 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	0e1b      	lsrs	r3, r3, #24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10d      	bne.n	8001a14 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	6809      	ldr	r1, [r1, #0]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	440b      	add	r3, r1
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e00f      	b.n	8001a34 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a28:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3318      	adds	r3, #24
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	440b      	add	r3, r1
 8001a44:	3304      	adds	r3, #4
 8001a46:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	7d1b      	ldrb	r3, [r3, #20]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d111      	bne.n	8001a74 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3318      	adds	r3, #24
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	440b      	add	r3, r1
 8001a70:	3304      	adds	r3, #4
 8001a72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3307      	adds	r3, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	061a      	lsls	r2, r3, #24
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3306      	adds	r3, #6
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3305      	adds	r3, #5
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	3204      	adds	r2, #4
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	4610      	mov	r0, r2
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	6811      	ldr	r1, [r2, #0]
 8001a9c:	ea43 0200 	orr.w	r2, r3, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001aaa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	061a      	lsls	r2, r3, #24
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	4610      	mov	r0, r2
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	ea43 0200 	orr.w	r2, r3, r0
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ae0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3318      	adds	r3, #24
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	440b      	add	r3, r1
 8001b00:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e00e      	b.n	8001b24 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e006      	b.n	8001b24 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3724      	adds	r7, #36	; 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d003      	beq.n	8001b52 <HAL_CAN_GetRxMessage+0x24>
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	f040 8103 	bne.w	8001d58 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10e      	bne.n	8001b76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0f7      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0e8      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	331b      	adds	r3, #27
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0204 	and.w	r2, r3, #4
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	331b      	adds	r3, #27
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0d5b      	lsrs	r3, r3, #21
 8001bc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	331b      	adds	r3, #27
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0202 	and.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	331b      	adds	r3, #27
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2208      	movs	r2, #8
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	e00b      	b.n	8001c32 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	331b      	adds	r3, #27
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0a1a      	lsrs	r2, r3, #8
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0c1a      	lsrs	r2, r3, #16
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e1a      	lsrs	r2, r3, #24
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0a1a      	lsrs	r2, r3, #8
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3305      	adds	r3, #5
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0c1a      	lsrs	r2, r3, #16
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3306      	adds	r3, #6
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e1a      	lsrs	r2, r3, #24
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3307      	adds	r3, #7
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d002      	beq.n	8001d8e <HAL_CAN_ActivateNotification+0x1e>
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d109      	bne.n	8001da2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6959      	ldr	r1, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e006      	b.n	8001db0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
  }
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b08a      	sub	sp, #40	; 0x28
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d07c      	beq.n	8001efa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d023      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f983 	bl	8002128 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e22:	e016      	b.n	8001e52 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e00c      	b.n	8001e52 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	e002      	b.n	8001e52 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f986 	bl	800215e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d024      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f962 	bl	800213a <HAL_CAN_TxMailbox1CompleteCallback>
 8001e76:	e016      	b.n	8001ea6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e00c      	b.n	8001ea6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e002      	b.n	8001ea6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f965 	bl	8002170 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d024      	beq.n	8001efa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f941 	bl	800214c <HAL_CAN_TxMailbox2CompleteCallback>
 8001eca:	e016      	b.n	8001efa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	e00c      	b.n	8001efa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e002      	b.n	8001efa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f944 	bl	8002182 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2208      	movs	r2, #8
 8001f38:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f92a 	bl	8002194 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7fe fea5 	bl	8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2210      	movs	r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f90a 	bl	80021b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8f2 	bl	80021a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2210      	movs	r2, #16
 8001fdc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8f3 	bl	80021ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f8eb 	bl	80021dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d07b      	beq.n	8002108 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d072      	beq.n	8002100 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002074:	2b00      	cmp	r3, #0
 8002076:	d043      	beq.n	8002100 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03e      	beq.n	8002100 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002088:	2b60      	cmp	r3, #96	; 0x60
 800208a:	d02b      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x32a>
 800208c:	2b60      	cmp	r3, #96	; 0x60
 800208e:	d82e      	bhi.n	80020ee <HAL_CAN_IRQHandler+0x334>
 8002090:	2b50      	cmp	r3, #80	; 0x50
 8002092:	d022      	beq.n	80020da <HAL_CAN_IRQHandler+0x320>
 8002094:	2b50      	cmp	r3, #80	; 0x50
 8002096:	d82a      	bhi.n	80020ee <HAL_CAN_IRQHandler+0x334>
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d019      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x316>
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d826      	bhi.n	80020ee <HAL_CAN_IRQHandler+0x334>
 80020a0:	2b30      	cmp	r3, #48	; 0x30
 80020a2:	d010      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x30c>
 80020a4:	2b30      	cmp	r3, #48	; 0x30
 80020a6:	d822      	bhi.n	80020ee <HAL_CAN_IRQHandler+0x334>
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d002      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x2f8>
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d005      	beq.n	80020bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020b0:	e01d      	b.n	80020ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ba:	e019      	b.n	80020f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	f043 0310 	orr.w	r3, r3, #16
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c4:	e014      	b.n	80020f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f043 0320 	orr.w	r3, r3, #32
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ce:	e00f      	b.n	80020f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d8:	e00a      	b.n	80020f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020e2:	e005      	b.n	80020f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ec:	e000      	b.n	80020f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80020ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2204      	movs	r2, #4
 8002106:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f867 	bl	80021ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <__NVIC_EnableIRQ+0x34>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff90 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff2d 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff42 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff90 	bl	80022f0 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5f 	bl	800229c <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff35 	bl	8002264 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	e161      	b.n	80026f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002430:	2201      	movs	r2, #1
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8150 	bne.w	80026ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a97      	ldr	r2, [pc, #604]	; (80026b0 <HAL_GPIO_Init+0x294>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d05e      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002458:	4a95      	ldr	r2, [pc, #596]	; (80026b0 <HAL_GPIO_Init+0x294>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d875      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 800245e:	4a95      	ldr	r2, [pc, #596]	; (80026b4 <HAL_GPIO_Init+0x298>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d058      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002464:	4a93      	ldr	r2, [pc, #588]	; (80026b4 <HAL_GPIO_Init+0x298>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d86f      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 800246a:	4a93      	ldr	r2, [pc, #588]	; (80026b8 <HAL_GPIO_Init+0x29c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d052      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002470:	4a91      	ldr	r2, [pc, #580]	; (80026b8 <HAL_GPIO_Init+0x29c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d869      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 8002476:	4a91      	ldr	r2, [pc, #580]	; (80026bc <HAL_GPIO_Init+0x2a0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d04c      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 800247c:	4a8f      	ldr	r2, [pc, #572]	; (80026bc <HAL_GPIO_Init+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d863      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 8002482:	4a8f      	ldr	r2, [pc, #572]	; (80026c0 <HAL_GPIO_Init+0x2a4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d046      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
 8002488:	4a8d      	ldr	r2, [pc, #564]	; (80026c0 <HAL_GPIO_Init+0x2a4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d85d      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 800248e:	2b12      	cmp	r3, #18
 8002490:	d82a      	bhi.n	80024e8 <HAL_GPIO_Init+0xcc>
 8002492:	2b12      	cmp	r3, #18
 8002494:	d859      	bhi.n	800254a <HAL_GPIO_Init+0x12e>
 8002496:	a201      	add	r2, pc, #4	; (adr r2, 800249c <HAL_GPIO_Init+0x80>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	08002517 	.word	0x08002517
 80024a0:	080024f1 	.word	0x080024f1
 80024a4:	08002503 	.word	0x08002503
 80024a8:	08002545 	.word	0x08002545
 80024ac:	0800254b 	.word	0x0800254b
 80024b0:	0800254b 	.word	0x0800254b
 80024b4:	0800254b 	.word	0x0800254b
 80024b8:	0800254b 	.word	0x0800254b
 80024bc:	0800254b 	.word	0x0800254b
 80024c0:	0800254b 	.word	0x0800254b
 80024c4:	0800254b 	.word	0x0800254b
 80024c8:	0800254b 	.word	0x0800254b
 80024cc:	0800254b 	.word	0x0800254b
 80024d0:	0800254b 	.word	0x0800254b
 80024d4:	0800254b 	.word	0x0800254b
 80024d8:	0800254b 	.word	0x0800254b
 80024dc:	0800254b 	.word	0x0800254b
 80024e0:	080024f9 	.word	0x080024f9
 80024e4:	0800250d 	.word	0x0800250d
 80024e8:	4a76      	ldr	r2, [pc, #472]	; (80026c4 <HAL_GPIO_Init+0x2a8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ee:	e02c      	b.n	800254a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e029      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	3304      	adds	r3, #4
 80024fe:	623b      	str	r3, [r7, #32]
          break;
 8002500:	e024      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	3308      	adds	r3, #8
 8002508:	623b      	str	r3, [r7, #32]
          break;
 800250a:	e01f      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	330c      	adds	r3, #12
 8002512:	623b      	str	r3, [r7, #32]
          break;
 8002514:	e01a      	b.n	800254c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800251e:	2304      	movs	r3, #4
 8002520:	623b      	str	r3, [r7, #32]
          break;
 8002522:	e013      	b.n	800254c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800252c:	2308      	movs	r3, #8
 800252e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	611a      	str	r2, [r3, #16]
          break;
 8002536:	e009      	b.n	800254c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002538:	2308      	movs	r3, #8
 800253a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	615a      	str	r2, [r3, #20]
          break;
 8002542:	e003      	b.n	800254c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x130>
          break;
 800254a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2bff      	cmp	r3, #255	; 0xff
 8002550:	d801      	bhi.n	8002556 <HAL_GPIO_Init+0x13a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	e001      	b.n	800255a <HAL_GPIO_Init+0x13e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2bff      	cmp	r3, #255	; 0xff
 8002560:	d802      	bhi.n	8002568 <HAL_GPIO_Init+0x14c>
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x152>
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3b08      	subs	r3, #8
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	210f      	movs	r1, #15
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	431a      	orrs	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80a9 	beq.w	80026ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_GPIO_Init+0x2ac>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_Init+0x2ac>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_GPIO_Init+0x2ac>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025b4:	4a45      	ldr	r2, [pc, #276]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3d      	ldr	r2, [pc, #244]	; (80026d0 <HAL_GPIO_Init+0x2b4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00d      	beq.n	80025fc <HAL_GPIO_Init+0x1e0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <HAL_GPIO_Init+0x2b8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <HAL_GPIO_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x2bc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_GPIO_Init+0x1d8>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e004      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025f4:	2303      	movs	r3, #3
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800260e:	492f      	ldr	r1, [pc, #188]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	492b      	ldr	r1, [pc, #172]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	43db      	mvns	r3, r3
 800263e:	4927      	ldr	r1, [pc, #156]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002640:	4013      	ands	r3, r2
 8002642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4921      	ldr	r1, [pc, #132]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	60cb      	str	r3, [r1, #12]
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	43db      	mvns	r3, r3
 8002666:	491d      	ldr	r1, [pc, #116]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002668:	4013      	ands	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4917      	ldr	r1, [pc, #92]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	43db      	mvns	r3, r3
 800268e:	4913      	ldr	r1, [pc, #76]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 8002690:	4013      	ands	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01f      	beq.n	80026e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	490d      	ldr	r1, [pc, #52]	; (80026dc <HAL_GPIO_Init+0x2c0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e01f      	b.n	80026ee <HAL_GPIO_Init+0x2d2>
 80026ae:	bf00      	nop
 80026b0:	10320000 	.word	0x10320000
 80026b4:	10310000 	.word	0x10310000
 80026b8:	10220000 	.word	0x10220000
 80026bc:	10210000 	.word	0x10210000
 80026c0:	10120000 	.word	0x10120000
 80026c4:	10110000 	.word	0x10110000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40010800 	.word	0x40010800
 80026d4:	40010c00 	.word	0x40010c00
 80026d8:	40011000 	.word	0x40011000
 80026dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_GPIO_Init+0x2f4>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4909      	ldr	r1, [pc, #36]	; (8002710 <HAL_GPIO_Init+0x2f4>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	3301      	adds	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f47f ae96 	bne.w	8002430 <HAL_GPIO_Init+0x14>
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	372c      	adds	r7, #44	; 0x2c
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e272      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8087 	beq.w	8002842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002734:	4b92      	ldr	r3, [pc, #584]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b04      	cmp	r3, #4
 800273e:	d00c      	beq.n	800275a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002740:	4b8f      	ldr	r3, [pc, #572]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d112      	bne.n	8002772 <HAL_RCC_OscConfig+0x5e>
 800274c:	4b8c      	ldr	r3, [pc, #560]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d10b      	bne.n	8002772 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	4b89      	ldr	r3, [pc, #548]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d06c      	beq.n	8002840 <HAL_RCC_OscConfig+0x12c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d168      	bne.n	8002840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e24c      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x76>
 800277c:	4b80      	ldr	r3, [pc, #512]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a7f      	ldr	r2, [pc, #508]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e02e      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b78      	ldr	r3, [pc, #480]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a77      	ldr	r2, [pc, #476]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e01d      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0xbc>
 80027b6:	4b72      	ldr	r3, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a71      	ldr	r2, [pc, #452]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6a      	ldr	r2, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a67      	ldr	r2, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe98 	bl	8001524 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f8:	f7fe fe94 	bl	8001524 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e200      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe4>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe fe84 	bl	8001524 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fe80 	bl	8001524 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1ec      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x10c>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d063      	beq.n	8002916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800284e:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d11c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x18c>
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_RCC_OscConfig+0x176>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e1c0      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4939      	ldr	r1, [pc, #228]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	e03a      	b.n	8002916 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fe39 	bl	8001524 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b6:	f7fe fe35 	bl	8001524 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1a1      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4927      	ldr	r1, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fe18 	bl	8001524 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f8:	f7fe fe14 	bl	8001524 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e180      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d03a      	beq.n	8002998 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d019      	beq.n	800295e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_RCC_OscConfig+0x274>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fdf8 	bl	8001524 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fdf4 	bl	8001524 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e160      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002956:	2001      	movs	r0, #1
 8002958:	f000 face 	bl	8002ef8 <RCC_Delay>
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_OscConfig+0x274>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe fdde 	bl	8001524 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296a:	e00f      	b.n	800298c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fdda 	bl	8001524 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d908      	bls.n	800298c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e146      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	42420000 	.word	0x42420000
 8002988:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e9      	bne.n	800296c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a6 	beq.w	8002af2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a87      	ldr	r2, [pc, #540]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	61d3      	str	r3, [r2, #28]
 80029c2:	4b85      	ldr	r3, [pc, #532]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	4b82      	ldr	r3, [pc, #520]	; (8002bdc <HAL_RCC_OscConfig+0x4c8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d118      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029de:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x4c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7e      	ldr	r2, [pc, #504]	; (8002bdc <HAL_RCC_OscConfig+0x4c8>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fd9b 	bl	8001524 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7fe fd97 	bl	8001524 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e103      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x4c8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x312>
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	e02d      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x334>
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a66      	ldr	r2, [pc, #408]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	e01c      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d10c      	bne.n	8002a6a <HAL_RCC_OscConfig+0x356>
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a60      	ldr	r2, [pc, #384]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4a5d      	ldr	r2, [pc, #372]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6213      	str	r3, [r2, #32]
 8002a68:	e00b      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a5a      	ldr	r2, [pc, #360]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a57      	ldr	r2, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fd4b 	bl	8001524 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fd47 	bl	8001524 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0b1      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ee      	beq.n	8002a92 <HAL_RCC_OscConfig+0x37e>
 8002ab4:	e014      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fd35 	bl	8001524 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe fd31 	bl	8001524 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e09b      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad4:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ee      	bne.n	8002abe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d061      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d146      	bne.n	8002b9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b10:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fd05 	bl	8001524 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe fd01 	bl	8001524 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e06d      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d108      	bne.n	8002b58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4921      	ldr	r1, [pc, #132]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a19      	ldr	r1, [r3, #32]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	491b      	ldr	r1, [pc, #108]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe fcd5 	bl	8001524 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fcd1 	bl	8001524 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e03d      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46a>
 8002b9c:	e035      	b.n	8002c0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fcbe 	bl	8001524 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fcba 	bl	8001524 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e026      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x498>
 8002bca:	e01e      	b.n	8002c0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e019      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x500>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d0      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4965      	ldr	r1, [pc, #404]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d040      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e073      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4936      	ldr	r1, [pc, #216]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fc0c 	bl	8001524 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fc08 	bl	8001524 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e053      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d210      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4922      	ldr	r1, [pc, #136]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490a      	ldr	r1, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1cc>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fb6a 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08006128 	.word	0x08006128
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x30>
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x36>
 8002e1a:	e027      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1e:	613b      	str	r3, [r7, #16]
      break;
 8002e20:	e027      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e2c:	5cd3      	ldrb	r3, [r2, r3]
 8002e2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	0c5b      	lsrs	r3, r3, #17
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4e:	fb03 f202 	mul.w	r2, r3, r2
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e004      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	613b      	str	r3, [r7, #16]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6e:	613b      	str	r3, [r7, #16]
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	693b      	ldr	r3, [r7, #16]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	007a1200 	.word	0x007a1200
 8002e88:	08006140 	.word	0x08006140
 8002e8c:	08006150 	.word	0x08006150
 8002e90:	003d0900 	.word	0x003d0900

08002e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	20000000 	.word	0x20000000

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eac:	f7ff fff2 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4903      	ldr	r1, [pc, #12]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	08006138 	.word	0x08006138

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	0adb      	lsrs	r3, r3, #11
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08006138 	.word	0x08006138

08002ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <RCC_Delay+0x34>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <RCC_Delay+0x38>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0a5b      	lsrs	r3, r3, #9
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f14:	bf00      	nop
  }
  while (Delay --);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e5a      	subs	r2, r3, #1
 8002f1a:	60fa      	str	r2, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f9      	bne.n	8002f14 <RCC_Delay+0x1c>
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	10624dd3 	.word	0x10624dd3

08002f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e042      	b.n	8002fcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f920 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f91d 	bl	80031b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d16d      	bne.n	80030d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Transmit+0x2c>
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e066      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	; 0x21
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fe fa87 	bl	8001524 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003048:	e02a      	b.n	80030a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f840 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e036      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3302      	adds	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e007      	b.n	8003092 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1cf      	bne.n	800304a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f810 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b090      	sub	sp, #64	; 0x40
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	e050      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d04c      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <UART_WaitOnFlagUntilTimeout+0x30>
 80030fa:	f7fe fa13 	bl	8001524 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003106:	429a      	cmp	r2, r3
 8003108:	d241      	bcs.n	800318e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800312a:	637a      	str	r2, [r7, #52]	; 0x34
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e5      	bne.n	800310a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	613b      	str	r3, [r7, #16]
   return(result);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315e:	623a      	str	r2, [r7, #32]
 8003160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	69f9      	ldr	r1, [r7, #28]
 8003164:	6a3a      	ldr	r2, [r7, #32]
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	61bb      	str	r3, [r7, #24]
   return(result);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d09f      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3740      	adds	r7, #64	; 0x40
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f2:	f023 030c 	bic.w	r3, r3, #12
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7ff fe56 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	e002      	b.n	800322e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003228:	f7ff fe3e 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <UART_SetConfig+0x118>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	0119      	lsls	r1, r3, #4
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <UART_SetConfig+0x118>)
 8003266:	fba3 0302 	umull	r0, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	; 0x32
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	4419      	add	r1, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <UART_SetConfig+0x118>)
 800329e:	fba3 0302 	umull	r0, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	440a      	add	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40013800 	.word	0x40013800
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <__errno>:
 80032d4:	4b01      	ldr	r3, [pc, #4]	; (80032dc <__errno+0x8>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	2000000c 	.word	0x2000000c

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	2600      	movs	r6, #0
 80032e4:	4d0c      	ldr	r5, [pc, #48]	; (8003318 <__libc_init_array+0x38>)
 80032e6:	4c0d      	ldr	r4, [pc, #52]	; (800331c <__libc_init_array+0x3c>)
 80032e8:	1b64      	subs	r4, r4, r5
 80032ea:	10a4      	asrs	r4, r4, #2
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	f002 fefa 	bl	80060e8 <_init>
 80032f4:	2600      	movs	r6, #0
 80032f6:	4d0a      	ldr	r5, [pc, #40]	; (8003320 <__libc_init_array+0x40>)
 80032f8:	4c0a      	ldr	r4, [pc, #40]	; (8003324 <__libc_init_array+0x44>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f855 3b04 	ldr.w	r3, [r5], #4
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	0800652c 	.word	0x0800652c
 800331c:	0800652c 	.word	0x0800652c
 8003320:	0800652c 	.word	0x0800652c
 8003324:	08006534 	.word	0x08006534

08003328 <memset>:
 8003328:	4603      	mov	r3, r0
 800332a:	4402      	add	r2, r0
 800332c:	4293      	cmp	r3, r2
 800332e:	d100      	bne.n	8003332 <memset+0xa>
 8003330:	4770      	bx	lr
 8003332:	f803 1b01 	strb.w	r1, [r3], #1
 8003336:	e7f9      	b.n	800332c <memset+0x4>

08003338 <__cvt>:
 8003338:	2b00      	cmp	r3, #0
 800333a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333e:	461f      	mov	r7, r3
 8003340:	bfbb      	ittet	lt
 8003342:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003346:	461f      	movlt	r7, r3
 8003348:	2300      	movge	r3, #0
 800334a:	232d      	movlt	r3, #45	; 0x2d
 800334c:	b088      	sub	sp, #32
 800334e:	4614      	mov	r4, r2
 8003350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003352:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003354:	7013      	strb	r3, [r2, #0]
 8003356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003358:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800335c:	f023 0820 	bic.w	r8, r3, #32
 8003360:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003364:	d005      	beq.n	8003372 <__cvt+0x3a>
 8003366:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800336a:	d100      	bne.n	800336e <__cvt+0x36>
 800336c:	3501      	adds	r5, #1
 800336e:	2302      	movs	r3, #2
 8003370:	e000      	b.n	8003374 <__cvt+0x3c>
 8003372:	2303      	movs	r3, #3
 8003374:	aa07      	add	r2, sp, #28
 8003376:	9204      	str	r2, [sp, #16]
 8003378:	aa06      	add	r2, sp, #24
 800337a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800337e:	e9cd 3500 	strd	r3, r5, [sp]
 8003382:	4622      	mov	r2, r4
 8003384:	463b      	mov	r3, r7
 8003386:	f000 fce3 	bl	8003d50 <_dtoa_r>
 800338a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800338e:	4606      	mov	r6, r0
 8003390:	d102      	bne.n	8003398 <__cvt+0x60>
 8003392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003394:	07db      	lsls	r3, r3, #31
 8003396:	d522      	bpl.n	80033de <__cvt+0xa6>
 8003398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800339c:	eb06 0905 	add.w	r9, r6, r5
 80033a0:	d110      	bne.n	80033c4 <__cvt+0x8c>
 80033a2:	7833      	ldrb	r3, [r6, #0]
 80033a4:	2b30      	cmp	r3, #48	; 0x30
 80033a6:	d10a      	bne.n	80033be <__cvt+0x86>
 80033a8:	2200      	movs	r2, #0
 80033aa:	2300      	movs	r3, #0
 80033ac:	4620      	mov	r0, r4
 80033ae:	4639      	mov	r1, r7
 80033b0:	f7fd fafa 	bl	80009a8 <__aeabi_dcmpeq>
 80033b4:	b918      	cbnz	r0, 80033be <__cvt+0x86>
 80033b6:	f1c5 0501 	rsb	r5, r5, #1
 80033ba:	f8ca 5000 	str.w	r5, [sl]
 80033be:	f8da 3000 	ldr.w	r3, [sl]
 80033c2:	4499      	add	r9, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	2300      	movs	r3, #0
 80033c8:	4620      	mov	r0, r4
 80033ca:	4639      	mov	r1, r7
 80033cc:	f7fd faec 	bl	80009a8 <__aeabi_dcmpeq>
 80033d0:	b108      	cbz	r0, 80033d6 <__cvt+0x9e>
 80033d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80033d6:	2230      	movs	r2, #48	; 0x30
 80033d8:	9b07      	ldr	r3, [sp, #28]
 80033da:	454b      	cmp	r3, r9
 80033dc:	d307      	bcc.n	80033ee <__cvt+0xb6>
 80033de:	4630      	mov	r0, r6
 80033e0:	9b07      	ldr	r3, [sp, #28]
 80033e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033e4:	1b9b      	subs	r3, r3, r6
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	b008      	add	sp, #32
 80033ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	9107      	str	r1, [sp, #28]
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e7f0      	b.n	80033d8 <__cvt+0xa0>

080033f6 <__exponent>:
 80033f6:	4603      	mov	r3, r0
 80033f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033fa:	2900      	cmp	r1, #0
 80033fc:	f803 2b02 	strb.w	r2, [r3], #2
 8003400:	bfb6      	itet	lt
 8003402:	222d      	movlt	r2, #45	; 0x2d
 8003404:	222b      	movge	r2, #43	; 0x2b
 8003406:	4249      	neglt	r1, r1
 8003408:	2909      	cmp	r1, #9
 800340a:	7042      	strb	r2, [r0, #1]
 800340c:	dd2b      	ble.n	8003466 <__exponent+0x70>
 800340e:	f10d 0407 	add.w	r4, sp, #7
 8003412:	46a4      	mov	ip, r4
 8003414:	270a      	movs	r7, #10
 8003416:	fb91 f6f7 	sdiv	r6, r1, r7
 800341a:	460a      	mov	r2, r1
 800341c:	46a6      	mov	lr, r4
 800341e:	fb07 1516 	mls	r5, r7, r6, r1
 8003422:	2a63      	cmp	r2, #99	; 0x63
 8003424:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003428:	4631      	mov	r1, r6
 800342a:	f104 34ff 	add.w	r4, r4, #4294967295
 800342e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003432:	dcf0      	bgt.n	8003416 <__exponent+0x20>
 8003434:	3130      	adds	r1, #48	; 0x30
 8003436:	f1ae 0502 	sub.w	r5, lr, #2
 800343a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800343e:	4629      	mov	r1, r5
 8003440:	1c44      	adds	r4, r0, #1
 8003442:	4561      	cmp	r1, ip
 8003444:	d30a      	bcc.n	800345c <__exponent+0x66>
 8003446:	f10d 0209 	add.w	r2, sp, #9
 800344a:	eba2 020e 	sub.w	r2, r2, lr
 800344e:	4565      	cmp	r5, ip
 8003450:	bf88      	it	hi
 8003452:	2200      	movhi	r2, #0
 8003454:	4413      	add	r3, r2
 8003456:	1a18      	subs	r0, r3, r0
 8003458:	b003      	add	sp, #12
 800345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003460:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003464:	e7ed      	b.n	8003442 <__exponent+0x4c>
 8003466:	2330      	movs	r3, #48	; 0x30
 8003468:	3130      	adds	r1, #48	; 0x30
 800346a:	7083      	strb	r3, [r0, #2]
 800346c:	70c1      	strb	r1, [r0, #3]
 800346e:	1d03      	adds	r3, r0, #4
 8003470:	e7f1      	b.n	8003456 <__exponent+0x60>
	...

08003474 <_printf_float>:
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003478:	b091      	sub	sp, #68	; 0x44
 800347a:	460c      	mov	r4, r1
 800347c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003480:	4616      	mov	r6, r2
 8003482:	461f      	mov	r7, r3
 8003484:	4605      	mov	r5, r0
 8003486:	f001 fa51 	bl	800492c <_localeconv_r>
 800348a:	6803      	ldr	r3, [r0, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	9309      	str	r3, [sp, #36]	; 0x24
 8003490:	f7fc fe5e 	bl	8000150 <strlen>
 8003494:	2300      	movs	r3, #0
 8003496:	930e      	str	r3, [sp, #56]	; 0x38
 8003498:	f8d8 3000 	ldr.w	r3, [r8]
 800349c:	900a      	str	r0, [sp, #40]	; 0x28
 800349e:	3307      	adds	r3, #7
 80034a0:	f023 0307 	bic.w	r3, r3, #7
 80034a4:	f103 0208 	add.w	r2, r3, #8
 80034a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034ac:	f8d4 b000 	ldr.w	fp, [r4]
 80034b0:	f8c8 2000 	str.w	r2, [r8]
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80034c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80034c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	4640      	mov	r0, r8
 80034cc:	4b9c      	ldr	r3, [pc, #624]	; (8003740 <_printf_float+0x2cc>)
 80034ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d0:	f7fd fa9c 	bl	8000a0c <__aeabi_dcmpun>
 80034d4:	bb70      	cbnz	r0, 8003534 <_printf_float+0xc0>
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	4640      	mov	r0, r8
 80034dc:	4b98      	ldr	r3, [pc, #608]	; (8003740 <_printf_float+0x2cc>)
 80034de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034e0:	f7fd fa76 	bl	80009d0 <__aeabi_dcmple>
 80034e4:	bb30      	cbnz	r0, 8003534 <_printf_float+0xc0>
 80034e6:	2200      	movs	r2, #0
 80034e8:	2300      	movs	r3, #0
 80034ea:	4640      	mov	r0, r8
 80034ec:	4651      	mov	r1, sl
 80034ee:	f7fd fa65 	bl	80009bc <__aeabi_dcmplt>
 80034f2:	b110      	cbz	r0, 80034fa <_printf_float+0x86>
 80034f4:	232d      	movs	r3, #45	; 0x2d
 80034f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034fa:	4b92      	ldr	r3, [pc, #584]	; (8003744 <_printf_float+0x2d0>)
 80034fc:	4892      	ldr	r0, [pc, #584]	; (8003748 <_printf_float+0x2d4>)
 80034fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003502:	bf94      	ite	ls
 8003504:	4698      	movls	r8, r3
 8003506:	4680      	movhi	r8, r0
 8003508:	2303      	movs	r3, #3
 800350a:	f04f 0a00 	mov.w	sl, #0
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	f02b 0304 	bic.w	r3, fp, #4
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	4633      	mov	r3, r6
 8003518:	4621      	mov	r1, r4
 800351a:	4628      	mov	r0, r5
 800351c:	9700      	str	r7, [sp, #0]
 800351e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003520:	f000 f9d4 	bl	80038cc <_printf_common>
 8003524:	3001      	adds	r0, #1
 8003526:	f040 8090 	bne.w	800364a <_printf_float+0x1d6>
 800352a:	f04f 30ff 	mov.w	r0, #4294967295
 800352e:	b011      	add	sp, #68	; 0x44
 8003530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003534:	4642      	mov	r2, r8
 8003536:	4653      	mov	r3, sl
 8003538:	4640      	mov	r0, r8
 800353a:	4651      	mov	r1, sl
 800353c:	f7fd fa66 	bl	8000a0c <__aeabi_dcmpun>
 8003540:	b148      	cbz	r0, 8003556 <_printf_float+0xe2>
 8003542:	f1ba 0f00 	cmp.w	sl, #0
 8003546:	bfb8      	it	lt
 8003548:	232d      	movlt	r3, #45	; 0x2d
 800354a:	4880      	ldr	r0, [pc, #512]	; (800374c <_printf_float+0x2d8>)
 800354c:	bfb8      	it	lt
 800354e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003552:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <_printf_float+0x2dc>)
 8003554:	e7d3      	b.n	80034fe <_printf_float+0x8a>
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	d142      	bne.n	80035e6 <_printf_float+0x172>
 8003560:	2306      	movs	r3, #6
 8003562:	6063      	str	r3, [r4, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	9206      	str	r2, [sp, #24]
 8003568:	aa0e      	add	r2, sp, #56	; 0x38
 800356a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800356e:	aa0d      	add	r2, sp, #52	; 0x34
 8003570:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003574:	9203      	str	r2, [sp, #12]
 8003576:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800357a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	4642      	mov	r2, r8
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4628      	mov	r0, r5
 8003588:	4653      	mov	r3, sl
 800358a:	910b      	str	r1, [sp, #44]	; 0x2c
 800358c:	f7ff fed4 	bl	8003338 <__cvt>
 8003590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003592:	4680      	mov	r8, r0
 8003594:	2947      	cmp	r1, #71	; 0x47
 8003596:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003598:	d108      	bne.n	80035ac <_printf_float+0x138>
 800359a:	1cc8      	adds	r0, r1, #3
 800359c:	db02      	blt.n	80035a4 <_printf_float+0x130>
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	4299      	cmp	r1, r3
 80035a2:	dd40      	ble.n	8003626 <_printf_float+0x1b2>
 80035a4:	f1a9 0902 	sub.w	r9, r9, #2
 80035a8:	fa5f f989 	uxtb.w	r9, r9
 80035ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035b0:	d81f      	bhi.n	80035f2 <_printf_float+0x17e>
 80035b2:	464a      	mov	r2, r9
 80035b4:	3901      	subs	r1, #1
 80035b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035ba:	910d      	str	r1, [sp, #52]	; 0x34
 80035bc:	f7ff ff1b 	bl	80033f6 <__exponent>
 80035c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035c2:	4682      	mov	sl, r0
 80035c4:	1813      	adds	r3, r2, r0
 80035c6:	2a01      	cmp	r2, #1
 80035c8:	6123      	str	r3, [r4, #16]
 80035ca:	dc02      	bgt.n	80035d2 <_printf_float+0x15e>
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	07d2      	lsls	r2, r2, #31
 80035d0:	d501      	bpl.n	80035d6 <_printf_float+0x162>
 80035d2:	3301      	adds	r3, #1
 80035d4:	6123      	str	r3, [r4, #16]
 80035d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d09b      	beq.n	8003516 <_printf_float+0xa2>
 80035de:	232d      	movs	r3, #45	; 0x2d
 80035e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e4:	e797      	b.n	8003516 <_printf_float+0xa2>
 80035e6:	2947      	cmp	r1, #71	; 0x47
 80035e8:	d1bc      	bne.n	8003564 <_printf_float+0xf0>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ba      	bne.n	8003564 <_printf_float+0xf0>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e7b7      	b.n	8003562 <_printf_float+0xee>
 80035f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035f6:	d118      	bne.n	800362a <_printf_float+0x1b6>
 80035f8:	2900      	cmp	r1, #0
 80035fa:	6863      	ldr	r3, [r4, #4]
 80035fc:	dd0b      	ble.n	8003616 <_printf_float+0x1a2>
 80035fe:	6121      	str	r1, [r4, #16]
 8003600:	b913      	cbnz	r3, 8003608 <_printf_float+0x194>
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	07d0      	lsls	r0, r2, #31
 8003606:	d502      	bpl.n	800360e <_printf_float+0x19a>
 8003608:	3301      	adds	r3, #1
 800360a:	440b      	add	r3, r1
 800360c:	6123      	str	r3, [r4, #16]
 800360e:	f04f 0a00 	mov.w	sl, #0
 8003612:	65a1      	str	r1, [r4, #88]	; 0x58
 8003614:	e7df      	b.n	80035d6 <_printf_float+0x162>
 8003616:	b913      	cbnz	r3, 800361e <_printf_float+0x1aa>
 8003618:	6822      	ldr	r2, [r4, #0]
 800361a:	07d2      	lsls	r2, r2, #31
 800361c:	d501      	bpl.n	8003622 <_printf_float+0x1ae>
 800361e:	3302      	adds	r3, #2
 8003620:	e7f4      	b.n	800360c <_printf_float+0x198>
 8003622:	2301      	movs	r3, #1
 8003624:	e7f2      	b.n	800360c <_printf_float+0x198>
 8003626:	f04f 0967 	mov.w	r9, #103	; 0x67
 800362a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800362c:	4299      	cmp	r1, r3
 800362e:	db05      	blt.n	800363c <_printf_float+0x1c8>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	6121      	str	r1, [r4, #16]
 8003634:	07d8      	lsls	r0, r3, #31
 8003636:	d5ea      	bpl.n	800360e <_printf_float+0x19a>
 8003638:	1c4b      	adds	r3, r1, #1
 800363a:	e7e7      	b.n	800360c <_printf_float+0x198>
 800363c:	2900      	cmp	r1, #0
 800363e:	bfcc      	ite	gt
 8003640:	2201      	movgt	r2, #1
 8003642:	f1c1 0202 	rsble	r2, r1, #2
 8003646:	4413      	add	r3, r2
 8003648:	e7e0      	b.n	800360c <_printf_float+0x198>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	055a      	lsls	r2, r3, #21
 800364e:	d407      	bmi.n	8003660 <_printf_float+0x1ec>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	4642      	mov	r2, r8
 8003654:	4631      	mov	r1, r6
 8003656:	4628      	mov	r0, r5
 8003658:	47b8      	blx	r7
 800365a:	3001      	adds	r0, #1
 800365c:	d12b      	bne.n	80036b6 <_printf_float+0x242>
 800365e:	e764      	b.n	800352a <_printf_float+0xb6>
 8003660:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003664:	f240 80dd 	bls.w	8003822 <_printf_float+0x3ae>
 8003668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800366c:	2200      	movs	r2, #0
 800366e:	2300      	movs	r3, #0
 8003670:	f7fd f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8003674:	2800      	cmp	r0, #0
 8003676:	d033      	beq.n	80036e0 <_printf_float+0x26c>
 8003678:	2301      	movs	r3, #1
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	4a35      	ldr	r2, [pc, #212]	; (8003754 <_printf_float+0x2e0>)
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	f43f af51 	beq.w	800352a <_printf_float+0xb6>
 8003688:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800368c:	429a      	cmp	r2, r3
 800368e:	db02      	blt.n	8003696 <_printf_float+0x222>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	07d8      	lsls	r0, r3, #31
 8003694:	d50f      	bpl.n	80036b6 <_printf_float+0x242>
 8003696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800369a:	4631      	mov	r1, r6
 800369c:	4628      	mov	r0, r5
 800369e:	47b8      	blx	r7
 80036a0:	3001      	adds	r0, #1
 80036a2:	f43f af42 	beq.w	800352a <_printf_float+0xb6>
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	f104 091a 	add.w	r9, r4, #26
 80036ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036b0:	3b01      	subs	r3, #1
 80036b2:	4543      	cmp	r3, r8
 80036b4:	dc09      	bgt.n	80036ca <_printf_float+0x256>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	079b      	lsls	r3, r3, #30
 80036ba:	f100 8102 	bmi.w	80038c2 <_printf_float+0x44e>
 80036be:	68e0      	ldr	r0, [r4, #12]
 80036c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036c2:	4298      	cmp	r0, r3
 80036c4:	bfb8      	it	lt
 80036c6:	4618      	movlt	r0, r3
 80036c8:	e731      	b.n	800352e <_printf_float+0xba>
 80036ca:	2301      	movs	r3, #1
 80036cc:	464a      	mov	r2, r9
 80036ce:	4631      	mov	r1, r6
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b8      	blx	r7
 80036d4:	3001      	adds	r0, #1
 80036d6:	f43f af28 	beq.w	800352a <_printf_float+0xb6>
 80036da:	f108 0801 	add.w	r8, r8, #1
 80036de:	e7e6      	b.n	80036ae <_printf_float+0x23a>
 80036e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dc38      	bgt.n	8003758 <_printf_float+0x2e4>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4631      	mov	r1, r6
 80036ea:	4628      	mov	r0, r5
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <_printf_float+0x2e0>)
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f af1a 	beq.w	800352a <_printf_float+0xb6>
 80036f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036fa:	4313      	orrs	r3, r2
 80036fc:	d102      	bne.n	8003704 <_printf_float+0x290>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	07d9      	lsls	r1, r3, #31
 8003702:	d5d8      	bpl.n	80036b6 <_printf_float+0x242>
 8003704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003708:	4631      	mov	r1, r6
 800370a:	4628      	mov	r0, r5
 800370c:	47b8      	blx	r7
 800370e:	3001      	adds	r0, #1
 8003710:	f43f af0b 	beq.w	800352a <_printf_float+0xb6>
 8003714:	f04f 0900 	mov.w	r9, #0
 8003718:	f104 0a1a 	add.w	sl, r4, #26
 800371c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800371e:	425b      	negs	r3, r3
 8003720:	454b      	cmp	r3, r9
 8003722:	dc01      	bgt.n	8003728 <_printf_float+0x2b4>
 8003724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003726:	e794      	b.n	8003652 <_printf_float+0x1de>
 8003728:	2301      	movs	r3, #1
 800372a:	4652      	mov	r2, sl
 800372c:	4631      	mov	r1, r6
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	f43f aef9 	beq.w	800352a <_printf_float+0xb6>
 8003738:	f109 0901 	add.w	r9, r9, #1
 800373c:	e7ee      	b.n	800371c <_printf_float+0x2a8>
 800373e:	bf00      	nop
 8003740:	7fefffff 	.word	0x7fefffff
 8003744:	08006158 	.word	0x08006158
 8003748:	0800615c 	.word	0x0800615c
 800374c:	08006164 	.word	0x08006164
 8003750:	08006160 	.word	0x08006160
 8003754:	08006168 	.word	0x08006168
 8003758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800375a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800375c:	429a      	cmp	r2, r3
 800375e:	bfa8      	it	ge
 8003760:	461a      	movge	r2, r3
 8003762:	2a00      	cmp	r2, #0
 8003764:	4691      	mov	r9, r2
 8003766:	dc37      	bgt.n	80037d8 <_printf_float+0x364>
 8003768:	f04f 0b00 	mov.w	fp, #0
 800376c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003770:	f104 021a 	add.w	r2, r4, #26
 8003774:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003778:	ebaa 0309 	sub.w	r3, sl, r9
 800377c:	455b      	cmp	r3, fp
 800377e:	dc33      	bgt.n	80037e8 <_printf_float+0x374>
 8003780:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003784:	429a      	cmp	r2, r3
 8003786:	db3b      	blt.n	8003800 <_printf_float+0x38c>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	07da      	lsls	r2, r3, #31
 800378c:	d438      	bmi.n	8003800 <_printf_float+0x38c>
 800378e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003790:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003792:	eba3 020a 	sub.w	r2, r3, sl
 8003796:	eba3 0901 	sub.w	r9, r3, r1
 800379a:	4591      	cmp	r9, r2
 800379c:	bfa8      	it	ge
 800379e:	4691      	movge	r9, r2
 80037a0:	f1b9 0f00 	cmp.w	r9, #0
 80037a4:	dc34      	bgt.n	8003810 <_printf_float+0x39c>
 80037a6:	f04f 0800 	mov.w	r8, #0
 80037aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037ae:	f104 0a1a 	add.w	sl, r4, #26
 80037b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	eba3 0309 	sub.w	r3, r3, r9
 80037bc:	4543      	cmp	r3, r8
 80037be:	f77f af7a 	ble.w	80036b6 <_printf_float+0x242>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4652      	mov	r2, sl
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	f43f aeac 	beq.w	800352a <_printf_float+0xb6>
 80037d2:	f108 0801 	add.w	r8, r8, #1
 80037d6:	e7ec      	b.n	80037b2 <_printf_float+0x33e>
 80037d8:	4613      	mov	r3, r2
 80037da:	4631      	mov	r1, r6
 80037dc:	4642      	mov	r2, r8
 80037de:	4628      	mov	r0, r5
 80037e0:	47b8      	blx	r7
 80037e2:	3001      	adds	r0, #1
 80037e4:	d1c0      	bne.n	8003768 <_printf_float+0x2f4>
 80037e6:	e6a0      	b.n	800352a <_printf_float+0xb6>
 80037e8:	2301      	movs	r3, #1
 80037ea:	4631      	mov	r1, r6
 80037ec:	4628      	mov	r0, r5
 80037ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	f43f ae99 	beq.w	800352a <_printf_float+0xb6>
 80037f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037fa:	f10b 0b01 	add.w	fp, fp, #1
 80037fe:	e7b9      	b.n	8003774 <_printf_float+0x300>
 8003800:	4631      	mov	r1, r6
 8003802:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003806:	4628      	mov	r0, r5
 8003808:	47b8      	blx	r7
 800380a:	3001      	adds	r0, #1
 800380c:	d1bf      	bne.n	800378e <_printf_float+0x31a>
 800380e:	e68c      	b.n	800352a <_printf_float+0xb6>
 8003810:	464b      	mov	r3, r9
 8003812:	4631      	mov	r1, r6
 8003814:	4628      	mov	r0, r5
 8003816:	eb08 020a 	add.w	r2, r8, sl
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	d1c2      	bne.n	80037a6 <_printf_float+0x332>
 8003820:	e683      	b.n	800352a <_printf_float+0xb6>
 8003822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003824:	2a01      	cmp	r2, #1
 8003826:	dc01      	bgt.n	800382c <_printf_float+0x3b8>
 8003828:	07db      	lsls	r3, r3, #31
 800382a:	d537      	bpl.n	800389c <_printf_float+0x428>
 800382c:	2301      	movs	r3, #1
 800382e:	4642      	mov	r2, r8
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	47b8      	blx	r7
 8003836:	3001      	adds	r0, #1
 8003838:	f43f ae77 	beq.w	800352a <_printf_float+0xb6>
 800383c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003840:	4631      	mov	r1, r6
 8003842:	4628      	mov	r0, r5
 8003844:	47b8      	blx	r7
 8003846:	3001      	adds	r0, #1
 8003848:	f43f ae6f 	beq.w	800352a <_printf_float+0xb6>
 800384c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003850:	2200      	movs	r2, #0
 8003852:	2300      	movs	r3, #0
 8003854:	f7fd f8a8 	bl	80009a8 <__aeabi_dcmpeq>
 8003858:	b9d8      	cbnz	r0, 8003892 <_printf_float+0x41e>
 800385a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800385c:	f108 0201 	add.w	r2, r8, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	4631      	mov	r1, r6
 8003864:	4628      	mov	r0, r5
 8003866:	47b8      	blx	r7
 8003868:	3001      	adds	r0, #1
 800386a:	d10e      	bne.n	800388a <_printf_float+0x416>
 800386c:	e65d      	b.n	800352a <_printf_float+0xb6>
 800386e:	2301      	movs	r3, #1
 8003870:	464a      	mov	r2, r9
 8003872:	4631      	mov	r1, r6
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	f43f ae56 	beq.w	800352a <_printf_float+0xb6>
 800387e:	f108 0801 	add.w	r8, r8, #1
 8003882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003884:	3b01      	subs	r3, #1
 8003886:	4543      	cmp	r3, r8
 8003888:	dcf1      	bgt.n	800386e <_printf_float+0x3fa>
 800388a:	4653      	mov	r3, sl
 800388c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003890:	e6e0      	b.n	8003654 <_printf_float+0x1e0>
 8003892:	f04f 0800 	mov.w	r8, #0
 8003896:	f104 091a 	add.w	r9, r4, #26
 800389a:	e7f2      	b.n	8003882 <_printf_float+0x40e>
 800389c:	2301      	movs	r3, #1
 800389e:	4642      	mov	r2, r8
 80038a0:	e7df      	b.n	8003862 <_printf_float+0x3ee>
 80038a2:	2301      	movs	r3, #1
 80038a4:	464a      	mov	r2, r9
 80038a6:	4631      	mov	r1, r6
 80038a8:	4628      	mov	r0, r5
 80038aa:	47b8      	blx	r7
 80038ac:	3001      	adds	r0, #1
 80038ae:	f43f ae3c 	beq.w	800352a <_printf_float+0xb6>
 80038b2:	f108 0801 	add.w	r8, r8, #1
 80038b6:	68e3      	ldr	r3, [r4, #12]
 80038b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038ba:	1a5b      	subs	r3, r3, r1
 80038bc:	4543      	cmp	r3, r8
 80038be:	dcf0      	bgt.n	80038a2 <_printf_float+0x42e>
 80038c0:	e6fd      	b.n	80036be <_printf_float+0x24a>
 80038c2:	f04f 0800 	mov.w	r8, #0
 80038c6:	f104 0919 	add.w	r9, r4, #25
 80038ca:	e7f4      	b.n	80038b6 <_printf_float+0x442>

080038cc <_printf_common>:
 80038cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	4616      	mov	r6, r2
 80038d2:	4699      	mov	r9, r3
 80038d4:	688a      	ldr	r2, [r1, #8]
 80038d6:	690b      	ldr	r3, [r1, #16]
 80038d8:	4607      	mov	r7, r0
 80038da:	4293      	cmp	r3, r2
 80038dc:	bfb8      	it	lt
 80038de:	4613      	movlt	r3, r2
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038e6:	460c      	mov	r4, r1
 80038e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ec:	b10a      	cbz	r2, 80038f2 <_printf_common+0x26>
 80038ee:	3301      	adds	r3, #1
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	0699      	lsls	r1, r3, #26
 80038f6:	bf42      	ittt	mi
 80038f8:	6833      	ldrmi	r3, [r6, #0]
 80038fa:	3302      	addmi	r3, #2
 80038fc:	6033      	strmi	r3, [r6, #0]
 80038fe:	6825      	ldr	r5, [r4, #0]
 8003900:	f015 0506 	ands.w	r5, r5, #6
 8003904:	d106      	bne.n	8003914 <_printf_common+0x48>
 8003906:	f104 0a19 	add.w	sl, r4, #25
 800390a:	68e3      	ldr	r3, [r4, #12]
 800390c:	6832      	ldr	r2, [r6, #0]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	42ab      	cmp	r3, r5
 8003912:	dc28      	bgt.n	8003966 <_printf_common+0x9a>
 8003914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003918:	1e13      	subs	r3, r2, #0
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	bf18      	it	ne
 800391e:	2301      	movne	r3, #1
 8003920:	0692      	lsls	r2, r2, #26
 8003922:	d42d      	bmi.n	8003980 <_printf_common+0xb4>
 8003924:	4649      	mov	r1, r9
 8003926:	4638      	mov	r0, r7
 8003928:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800392c:	47c0      	blx	r8
 800392e:	3001      	adds	r0, #1
 8003930:	d020      	beq.n	8003974 <_printf_common+0xa8>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	68e5      	ldr	r5, [r4, #12]
 8003936:	f003 0306 	and.w	r3, r3, #6
 800393a:	2b04      	cmp	r3, #4
 800393c:	bf18      	it	ne
 800393e:	2500      	movne	r5, #0
 8003940:	6832      	ldr	r2, [r6, #0]
 8003942:	f04f 0600 	mov.w	r6, #0
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	bf08      	it	eq
 800394a:	1aad      	subeq	r5, r5, r2
 800394c:	6922      	ldr	r2, [r4, #16]
 800394e:	bf08      	it	eq
 8003950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003954:	4293      	cmp	r3, r2
 8003956:	bfc4      	itt	gt
 8003958:	1a9b      	subgt	r3, r3, r2
 800395a:	18ed      	addgt	r5, r5, r3
 800395c:	341a      	adds	r4, #26
 800395e:	42b5      	cmp	r5, r6
 8003960:	d11a      	bne.n	8003998 <_printf_common+0xcc>
 8003962:	2000      	movs	r0, #0
 8003964:	e008      	b.n	8003978 <_printf_common+0xac>
 8003966:	2301      	movs	r3, #1
 8003968:	4652      	mov	r2, sl
 800396a:	4649      	mov	r1, r9
 800396c:	4638      	mov	r0, r7
 800396e:	47c0      	blx	r8
 8003970:	3001      	adds	r0, #1
 8003972:	d103      	bne.n	800397c <_printf_common+0xb0>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397c:	3501      	adds	r5, #1
 800397e:	e7c4      	b.n	800390a <_printf_common+0x3e>
 8003980:	2030      	movs	r0, #48	; 0x30
 8003982:	18e1      	adds	r1, r4, r3
 8003984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800398e:	4422      	add	r2, r4
 8003990:	3302      	adds	r3, #2
 8003992:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003996:	e7c5      	b.n	8003924 <_printf_common+0x58>
 8003998:	2301      	movs	r3, #1
 800399a:	4622      	mov	r2, r4
 800399c:	4649      	mov	r1, r9
 800399e:	4638      	mov	r0, r7
 80039a0:	47c0      	blx	r8
 80039a2:	3001      	adds	r0, #1
 80039a4:	d0e6      	beq.n	8003974 <_printf_common+0xa8>
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7d9      	b.n	800395e <_printf_common+0x92>
	...

080039ac <_printf_i>:
 80039ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b0:	7e0f      	ldrb	r7, [r1, #24]
 80039b2:	4691      	mov	r9, r2
 80039b4:	2f78      	cmp	r7, #120	; 0x78
 80039b6:	4680      	mov	r8, r0
 80039b8:	460c      	mov	r4, r1
 80039ba:	469a      	mov	sl, r3
 80039bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039c2:	d807      	bhi.n	80039d4 <_printf_i+0x28>
 80039c4:	2f62      	cmp	r7, #98	; 0x62
 80039c6:	d80a      	bhi.n	80039de <_printf_i+0x32>
 80039c8:	2f00      	cmp	r7, #0
 80039ca:	f000 80d9 	beq.w	8003b80 <_printf_i+0x1d4>
 80039ce:	2f58      	cmp	r7, #88	; 0x58
 80039d0:	f000 80a4 	beq.w	8003b1c <_printf_i+0x170>
 80039d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039dc:	e03a      	b.n	8003a54 <_printf_i+0xa8>
 80039de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039e2:	2b15      	cmp	r3, #21
 80039e4:	d8f6      	bhi.n	80039d4 <_printf_i+0x28>
 80039e6:	a101      	add	r1, pc, #4	; (adr r1, 80039ec <_printf_i+0x40>)
 80039e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039ec:	08003a45 	.word	0x08003a45
 80039f0:	08003a59 	.word	0x08003a59
 80039f4:	080039d5 	.word	0x080039d5
 80039f8:	080039d5 	.word	0x080039d5
 80039fc:	080039d5 	.word	0x080039d5
 8003a00:	080039d5 	.word	0x080039d5
 8003a04:	08003a59 	.word	0x08003a59
 8003a08:	080039d5 	.word	0x080039d5
 8003a0c:	080039d5 	.word	0x080039d5
 8003a10:	080039d5 	.word	0x080039d5
 8003a14:	080039d5 	.word	0x080039d5
 8003a18:	08003b67 	.word	0x08003b67
 8003a1c:	08003a89 	.word	0x08003a89
 8003a20:	08003b49 	.word	0x08003b49
 8003a24:	080039d5 	.word	0x080039d5
 8003a28:	080039d5 	.word	0x080039d5
 8003a2c:	08003b89 	.word	0x08003b89
 8003a30:	080039d5 	.word	0x080039d5
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	080039d5 	.word	0x080039d5
 8003a3c:	080039d5 	.word	0x080039d5
 8003a40:	08003b51 	.word	0x08003b51
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	602a      	str	r2, [r5, #0]
 8003a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0a4      	b.n	8003ba2 <_printf_i+0x1f6>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	6829      	ldr	r1, [r5, #0]
 8003a5c:	0606      	lsls	r6, r0, #24
 8003a5e:	f101 0304 	add.w	r3, r1, #4
 8003a62:	d50a      	bpl.n	8003a7a <_printf_i+0xce>
 8003a64:	680e      	ldr	r6, [r1, #0]
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	2e00      	cmp	r6, #0
 8003a6a:	da03      	bge.n	8003a74 <_printf_i+0xc8>
 8003a6c:	232d      	movs	r3, #45	; 0x2d
 8003a6e:	4276      	negs	r6, r6
 8003a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a74:	230a      	movs	r3, #10
 8003a76:	485e      	ldr	r0, [pc, #376]	; (8003bf0 <_printf_i+0x244>)
 8003a78:	e019      	b.n	8003aae <_printf_i+0x102>
 8003a7a:	680e      	ldr	r6, [r1, #0]
 8003a7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	bf18      	it	ne
 8003a84:	b236      	sxthne	r6, r6
 8003a86:	e7ef      	b.n	8003a68 <_printf_i+0xbc>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	6820      	ldr	r0, [r4, #0]
 8003a8c:	1d19      	adds	r1, r3, #4
 8003a8e:	6029      	str	r1, [r5, #0]
 8003a90:	0601      	lsls	r1, r0, #24
 8003a92:	d501      	bpl.n	8003a98 <_printf_i+0xec>
 8003a94:	681e      	ldr	r6, [r3, #0]
 8003a96:	e002      	b.n	8003a9e <_printf_i+0xf2>
 8003a98:	0646      	lsls	r6, r0, #25
 8003a9a:	d5fb      	bpl.n	8003a94 <_printf_i+0xe8>
 8003a9c:	881e      	ldrh	r6, [r3, #0]
 8003a9e:	2f6f      	cmp	r7, #111	; 0x6f
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2308      	moveq	r3, #8
 8003aa4:	230a      	movne	r3, #10
 8003aa6:	4852      	ldr	r0, [pc, #328]	; (8003bf0 <_printf_i+0x244>)
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aae:	6865      	ldr	r5, [r4, #4]
 8003ab0:	2d00      	cmp	r5, #0
 8003ab2:	bfa8      	it	ge
 8003ab4:	6821      	ldrge	r1, [r4, #0]
 8003ab6:	60a5      	str	r5, [r4, #8]
 8003ab8:	bfa4      	itt	ge
 8003aba:	f021 0104 	bicge.w	r1, r1, #4
 8003abe:	6021      	strge	r1, [r4, #0]
 8003ac0:	b90e      	cbnz	r6, 8003ac6 <_printf_i+0x11a>
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	d04d      	beq.n	8003b62 <_printf_i+0x1b6>
 8003ac6:	4615      	mov	r5, r2
 8003ac8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003acc:	fb03 6711 	mls	r7, r3, r1, r6
 8003ad0:	5dc7      	ldrb	r7, [r0, r7]
 8003ad2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ad6:	4637      	mov	r7, r6
 8003ad8:	42bb      	cmp	r3, r7
 8003ada:	460e      	mov	r6, r1
 8003adc:	d9f4      	bls.n	8003ac8 <_printf_i+0x11c>
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d10b      	bne.n	8003afa <_printf_i+0x14e>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	07de      	lsls	r6, r3, #31
 8003ae6:	d508      	bpl.n	8003afa <_printf_i+0x14e>
 8003ae8:	6923      	ldr	r3, [r4, #16]
 8003aea:	6861      	ldr	r1, [r4, #4]
 8003aec:	4299      	cmp	r1, r3
 8003aee:	bfde      	ittt	le
 8003af0:	2330      	movle	r3, #48	; 0x30
 8003af2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003af6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003afa:	1b52      	subs	r2, r2, r5
 8003afc:	6122      	str	r2, [r4, #16]
 8003afe:	464b      	mov	r3, r9
 8003b00:	4621      	mov	r1, r4
 8003b02:	4640      	mov	r0, r8
 8003b04:	f8cd a000 	str.w	sl, [sp]
 8003b08:	aa03      	add	r2, sp, #12
 8003b0a:	f7ff fedf 	bl	80038cc <_printf_common>
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d14c      	bne.n	8003bac <_printf_i+0x200>
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	b004      	add	sp, #16
 8003b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1c:	4834      	ldr	r0, [pc, #208]	; (8003bf0 <_printf_i+0x244>)
 8003b1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b22:	6829      	ldr	r1, [r5, #0]
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b2a:	6029      	str	r1, [r5, #0]
 8003b2c:	061d      	lsls	r5, r3, #24
 8003b2e:	d514      	bpl.n	8003b5a <_printf_i+0x1ae>
 8003b30:	07df      	lsls	r7, r3, #31
 8003b32:	bf44      	itt	mi
 8003b34:	f043 0320 	orrmi.w	r3, r3, #32
 8003b38:	6023      	strmi	r3, [r4, #0]
 8003b3a:	b91e      	cbnz	r6, 8003b44 <_printf_i+0x198>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	f023 0320 	bic.w	r3, r3, #32
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	2310      	movs	r3, #16
 8003b46:	e7af      	b.n	8003aa8 <_printf_i+0xfc>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f043 0320 	orr.w	r3, r3, #32
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	2378      	movs	r3, #120	; 0x78
 8003b52:	4828      	ldr	r0, [pc, #160]	; (8003bf4 <_printf_i+0x248>)
 8003b54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b58:	e7e3      	b.n	8003b22 <_printf_i+0x176>
 8003b5a:	0659      	lsls	r1, r3, #25
 8003b5c:	bf48      	it	mi
 8003b5e:	b2b6      	uxthmi	r6, r6
 8003b60:	e7e6      	b.n	8003b30 <_printf_i+0x184>
 8003b62:	4615      	mov	r5, r2
 8003b64:	e7bb      	b.n	8003ade <_printf_i+0x132>
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	6826      	ldr	r6, [r4, #0]
 8003b6a:	1d18      	adds	r0, r3, #4
 8003b6c:	6961      	ldr	r1, [r4, #20]
 8003b6e:	6028      	str	r0, [r5, #0]
 8003b70:	0635      	lsls	r5, r6, #24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	d501      	bpl.n	8003b7a <_printf_i+0x1ce>
 8003b76:	6019      	str	r1, [r3, #0]
 8003b78:	e002      	b.n	8003b80 <_printf_i+0x1d4>
 8003b7a:	0670      	lsls	r0, r6, #25
 8003b7c:	d5fb      	bpl.n	8003b76 <_printf_i+0x1ca>
 8003b7e:	8019      	strh	r1, [r3, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	4615      	mov	r5, r2
 8003b84:	6123      	str	r3, [r4, #16]
 8003b86:	e7ba      	b.n	8003afe <_printf_i+0x152>
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	602a      	str	r2, [r5, #0]
 8003b90:	681d      	ldr	r5, [r3, #0]
 8003b92:	6862      	ldr	r2, [r4, #4]
 8003b94:	4628      	mov	r0, r5
 8003b96:	f000 fed5 	bl	8004944 <memchr>
 8003b9a:	b108      	cbz	r0, 8003ba0 <_printf_i+0x1f4>
 8003b9c:	1b40      	subs	r0, r0, r5
 8003b9e:	6060      	str	r0, [r4, #4]
 8003ba0:	6863      	ldr	r3, [r4, #4]
 8003ba2:	6123      	str	r3, [r4, #16]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003baa:	e7a8      	b.n	8003afe <_printf_i+0x152>
 8003bac:	462a      	mov	r2, r5
 8003bae:	4649      	mov	r1, r9
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	6923      	ldr	r3, [r4, #16]
 8003bb4:	47d0      	blx	sl
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0ab      	beq.n	8003b12 <_printf_i+0x166>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	079b      	lsls	r3, r3, #30
 8003bbe:	d413      	bmi.n	8003be8 <_printf_i+0x23c>
 8003bc0:	68e0      	ldr	r0, [r4, #12]
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	4298      	cmp	r0, r3
 8003bc6:	bfb8      	it	lt
 8003bc8:	4618      	movlt	r0, r3
 8003bca:	e7a4      	b.n	8003b16 <_printf_i+0x16a>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4632      	mov	r2, r6
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	47d0      	blx	sl
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d09b      	beq.n	8003b12 <_printf_i+0x166>
 8003bda:	3501      	adds	r5, #1
 8003bdc:	68e3      	ldr	r3, [r4, #12]
 8003bde:	9903      	ldr	r1, [sp, #12]
 8003be0:	1a5b      	subs	r3, r3, r1
 8003be2:	42ab      	cmp	r3, r5
 8003be4:	dcf2      	bgt.n	8003bcc <_printf_i+0x220>
 8003be6:	e7eb      	b.n	8003bc0 <_printf_i+0x214>
 8003be8:	2500      	movs	r5, #0
 8003bea:	f104 0619 	add.w	r6, r4, #25
 8003bee:	e7f5      	b.n	8003bdc <_printf_i+0x230>
 8003bf0:	0800616a 	.word	0x0800616a
 8003bf4:	0800617b 	.word	0x0800617b

08003bf8 <siprintf>:
 8003bf8:	b40e      	push	{r1, r2, r3}
 8003bfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bfe:	b500      	push	{lr}
 8003c00:	b09c      	sub	sp, #112	; 0x70
 8003c02:	ab1d      	add	r3, sp, #116	; 0x74
 8003c04:	9002      	str	r0, [sp, #8]
 8003c06:	9006      	str	r0, [sp, #24]
 8003c08:	9107      	str	r1, [sp, #28]
 8003c0a:	9104      	str	r1, [sp, #16]
 8003c0c:	4808      	ldr	r0, [pc, #32]	; (8003c30 <siprintf+0x38>)
 8003c0e:	4909      	ldr	r1, [pc, #36]	; (8003c34 <siprintf+0x3c>)
 8003c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c14:	9105      	str	r1, [sp, #20]
 8003c16:	6800      	ldr	r0, [r0, #0]
 8003c18:	a902      	add	r1, sp, #8
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	f001 fb7c 	bl	8005318 <_svfiprintf_r>
 8003c20:	2200      	movs	r2, #0
 8003c22:	9b02      	ldr	r3, [sp, #8]
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	b01c      	add	sp, #112	; 0x70
 8003c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c2c:	b003      	add	sp, #12
 8003c2e:	4770      	bx	lr
 8003c30:	2000000c 	.word	0x2000000c
 8003c34:	ffff0208 	.word	0xffff0208

08003c38 <quorem>:
 8003c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	6903      	ldr	r3, [r0, #16]
 8003c3e:	690c      	ldr	r4, [r1, #16]
 8003c40:	4607      	mov	r7, r0
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	f2c0 8082 	blt.w	8003d4c <quorem+0x114>
 8003c48:	3c01      	subs	r4, #1
 8003c4a:	f100 0514 	add.w	r5, r0, #20
 8003c4e:	f101 0814 	add.w	r8, r1, #20
 8003c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c60:	3301      	adds	r3, #1
 8003c62:	429a      	cmp	r2, r3
 8003c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c70:	d331      	bcc.n	8003cd6 <quorem+0x9e>
 8003c72:	f04f 0e00 	mov.w	lr, #0
 8003c76:	4640      	mov	r0, r8
 8003c78:	46ac      	mov	ip, r5
 8003c7a:	46f2      	mov	sl, lr
 8003c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c80:	b293      	uxth	r3, r2
 8003c82:	fb06 e303 	mla	r3, r6, r3, lr
 8003c86:	0c12      	lsrs	r2, r2, #16
 8003c88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	fb06 e202 	mla	r2, r6, r2, lr
 8003c92:	ebaa 0303 	sub.w	r3, sl, r3
 8003c96:	f8dc a000 	ldr.w	sl, [ip]
 8003c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c9e:	fa1f fa8a 	uxth.w	sl, sl
 8003ca2:	4453      	add	r3, sl
 8003ca4:	f8dc a000 	ldr.w	sl, [ip]
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003cae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cb8:	4581      	cmp	r9, r0
 8003cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8003cc2:	d2db      	bcs.n	8003c7c <quorem+0x44>
 8003cc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8003cc8:	b92b      	cbnz	r3, 8003cd6 <quorem+0x9e>
 8003cca:	9b01      	ldr	r3, [sp, #4]
 8003ccc:	3b04      	subs	r3, #4
 8003cce:	429d      	cmp	r5, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	d32f      	bcc.n	8003d34 <quorem+0xfc>
 8003cd4:	613c      	str	r4, [r7, #16]
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	f001 f8ce 	bl	8004e78 <__mcmp>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	db25      	blt.n	8003d2c <quorem+0xf4>
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f04f 0c00 	mov.w	ip, #0
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	f858 1b04 	ldr.w	r1, [r8], #4
 8003cec:	f8d0 e000 	ldr.w	lr, [r0]
 8003cf0:	b28b      	uxth	r3, r1
 8003cf2:	ebac 0303 	sub.w	r3, ip, r3
 8003cf6:	fa1f f28e 	uxth.w	r2, lr
 8003cfa:	4413      	add	r3, r2
 8003cfc:	0c0a      	lsrs	r2, r1, #16
 8003cfe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003d02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d0c:	45c1      	cmp	r9, r8
 8003d0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003d12:	f840 3b04 	str.w	r3, [r0], #4
 8003d16:	d2e7      	bcs.n	8003ce8 <quorem+0xb0>
 8003d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d20:	b922      	cbnz	r2, 8003d2c <quorem+0xf4>
 8003d22:	3b04      	subs	r3, #4
 8003d24:	429d      	cmp	r5, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	d30a      	bcc.n	8003d40 <quorem+0x108>
 8003d2a:	613c      	str	r4, [r7, #16]
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	b003      	add	sp, #12
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	3b04      	subs	r3, #4
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d1cb      	bne.n	8003cd4 <quorem+0x9c>
 8003d3c:	3c01      	subs	r4, #1
 8003d3e:	e7c6      	b.n	8003cce <quorem+0x96>
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	3b04      	subs	r3, #4
 8003d44:	2a00      	cmp	r2, #0
 8003d46:	d1f0      	bne.n	8003d2a <quorem+0xf2>
 8003d48:	3c01      	subs	r4, #1
 8003d4a:	e7eb      	b.n	8003d24 <quorem+0xec>
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e7ee      	b.n	8003d2e <quorem+0xf6>

08003d50 <_dtoa_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	4616      	mov	r6, r2
 8003d56:	461f      	mov	r7, r3
 8003d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003d5a:	b099      	sub	sp, #100	; 0x64
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003d66:	b974      	cbnz	r4, 8003d86 <_dtoa_r+0x36>
 8003d68:	2010      	movs	r0, #16
 8003d6a:	f000 fde3 	bl	8004934 <malloc>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6268      	str	r0, [r5, #36]	; 0x24
 8003d72:	b920      	cbnz	r0, 8003d7e <_dtoa_r+0x2e>
 8003d74:	21ea      	movs	r1, #234	; 0xea
 8003d76:	4ba8      	ldr	r3, [pc, #672]	; (8004018 <_dtoa_r+0x2c8>)
 8003d78:	48a8      	ldr	r0, [pc, #672]	; (800401c <_dtoa_r+0x2cc>)
 8003d7a:	f001 fbdd 	bl	8005538 <__assert_func>
 8003d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003d82:	6004      	str	r4, [r0, #0]
 8003d84:	60c4      	str	r4, [r0, #12]
 8003d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	b151      	cbz	r1, 8003da2 <_dtoa_r+0x52>
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4093      	lsls	r3, r2
 8003d92:	604a      	str	r2, [r1, #4]
 8003d94:	608b      	str	r3, [r1, #8]
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 fe30 	bl	80049fc <_Bfree>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	1e3b      	subs	r3, r7, #0
 8003da4:	bfaf      	iteee	ge
 8003da6:	2300      	movge	r3, #0
 8003da8:	2201      	movlt	r2, #1
 8003daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	9305      	strlt	r3, [sp, #20]
 8003db0:	bfa8      	it	ge
 8003db2:	f8c8 3000 	strge.w	r3, [r8]
 8003db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003dba:	4b99      	ldr	r3, [pc, #612]	; (8004020 <_dtoa_r+0x2d0>)
 8003dbc:	bfb8      	it	lt
 8003dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8003dc2:	ea33 0309 	bics.w	r3, r3, r9
 8003dc6:	d119      	bne.n	8003dfc <_dtoa_r+0xac>
 8003dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003dd4:	4333      	orrs	r3, r6
 8003dd6:	f000 857f 	beq.w	80048d8 <_dtoa_r+0xb88>
 8003dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ddc:	b953      	cbnz	r3, 8003df4 <_dtoa_r+0xa4>
 8003dde:	4b91      	ldr	r3, [pc, #580]	; (8004024 <_dtoa_r+0x2d4>)
 8003de0:	e022      	b.n	8003e28 <_dtoa_r+0xd8>
 8003de2:	4b91      	ldr	r3, [pc, #580]	; (8004028 <_dtoa_r+0x2d8>)
 8003de4:	9303      	str	r3, [sp, #12]
 8003de6:	3308      	adds	r3, #8
 8003de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	9803      	ldr	r0, [sp, #12]
 8003dee:	b019      	add	sp, #100	; 0x64
 8003df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df4:	4b8b      	ldr	r3, [pc, #556]	; (8004024 <_dtoa_r+0x2d4>)
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	3303      	adds	r3, #3
 8003dfa:	e7f5      	b.n	8003de8 <_dtoa_r+0x98>
 8003dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f7fc fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8003e10:	4680      	mov	r8, r0
 8003e12:	b158      	cbz	r0, 8003e2c <_dtoa_r+0xdc>
 8003e14:	2301      	movs	r3, #1
 8003e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8558 	beq.w	80048d2 <_dtoa_r+0xb82>
 8003e22:	4882      	ldr	r0, [pc, #520]	; (800402c <_dtoa_r+0x2dc>)
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	1e43      	subs	r3, r0, #1
 8003e28:	9303      	str	r3, [sp, #12]
 8003e2a:	e7df      	b.n	8003dec <_dtoa_r+0x9c>
 8003e2c:	ab16      	add	r3, sp, #88	; 0x58
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	ab17      	add	r3, sp, #92	; 0x5c
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4628      	mov	r0, r5
 8003e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003e3a:	f001 f8c5 	bl	8004fc8 <__d2b>
 8003e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003e42:	4683      	mov	fp, r0
 8003e44:	2c00      	cmp	r4, #0
 8003e46:	d07f      	beq.n	8003f48 <_dtoa_r+0x1f8>
 8003e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003e5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003e5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003e62:	2200      	movs	r2, #0
 8003e64:	4b72      	ldr	r3, [pc, #456]	; (8004030 <_dtoa_r+0x2e0>)
 8003e66:	f7fc f97f 	bl	8000168 <__aeabi_dsub>
 8003e6a:	a365      	add	r3, pc, #404	; (adr r3, 8004000 <_dtoa_r+0x2b0>)
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f7fc fb32 	bl	80004d8 <__aeabi_dmul>
 8003e74:	a364      	add	r3, pc, #400	; (adr r3, 8004008 <_dtoa_r+0x2b8>)
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f7fc f977 	bl	800016c <__adddf3>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	4620      	mov	r0, r4
 8003e82:	460f      	mov	r7, r1
 8003e84:	f7fc fabe 	bl	8000404 <__aeabi_i2d>
 8003e88:	a361      	add	r3, pc, #388	; (adr r3, 8004010 <_dtoa_r+0x2c0>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc fb23 	bl	80004d8 <__aeabi_dmul>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4630      	mov	r0, r6
 8003e98:	4639      	mov	r1, r7
 8003e9a:	f7fc f967 	bl	800016c <__adddf3>
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	460f      	mov	r7, r1
 8003ea2:	f7fc fdc9 	bl	8000a38 <__aeabi_d2iz>
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4682      	mov	sl, r0
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4630      	mov	r0, r6
 8003eae:	4639      	mov	r1, r7
 8003eb0:	f7fc fd84 	bl	80009bc <__aeabi_dcmplt>
 8003eb4:	b148      	cbz	r0, 8003eca <_dtoa_r+0x17a>
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f7fc faa4 	bl	8000404 <__aeabi_i2d>
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	f7fc fd72 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec4:	b908      	cbnz	r0, 8003eca <_dtoa_r+0x17a>
 8003ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003eca:	f1ba 0f16 	cmp.w	sl, #22
 8003ece:	d858      	bhi.n	8003f82 <_dtoa_r+0x232>
 8003ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ed4:	4b57      	ldr	r3, [pc, #348]	; (8004034 <_dtoa_r+0x2e4>)
 8003ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc fd6d 	bl	80009bc <__aeabi_dcmplt>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	d04f      	beq.n	8003f86 <_dtoa_r+0x236>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8003eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ef0:	1b1c      	subs	r4, r3, r4
 8003ef2:	1e63      	subs	r3, r4, #1
 8003ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef6:	bf49      	itett	mi
 8003ef8:	f1c4 0301 	rsbmi	r3, r4, #1
 8003efc:	2300      	movpl	r3, #0
 8003efe:	9306      	strmi	r3, [sp, #24]
 8003f00:	2300      	movmi	r3, #0
 8003f02:	bf54      	ite	pl
 8003f04:	9306      	strpl	r3, [sp, #24]
 8003f06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003f08:	f1ba 0f00 	cmp.w	sl, #0
 8003f0c:	db3d      	blt.n	8003f8a <_dtoa_r+0x23a>
 8003f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003f14:	4453      	add	r3, sl
 8003f16:	9309      	str	r3, [sp, #36]	; 0x24
 8003f18:	2300      	movs	r3, #0
 8003f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f1e:	2b09      	cmp	r3, #9
 8003f20:	f200 808c 	bhi.w	800403c <_dtoa_r+0x2ec>
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	bfc4      	itt	gt
 8003f28:	3b04      	subgt	r3, #4
 8003f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f2e:	bfc8      	it	gt
 8003f30:	2400      	movgt	r4, #0
 8003f32:	f1a3 0302 	sub.w	r3, r3, #2
 8003f36:	bfd8      	it	le
 8003f38:	2401      	movle	r4, #1
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	f200 808a 	bhi.w	8004054 <_dtoa_r+0x304>
 8003f40:	e8df f003 	tbb	[pc, r3]
 8003f44:	5b4d4f2d 	.word	0x5b4d4f2d
 8003f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	bfc3      	ittte	gt
 8003f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003f5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003f5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8003f62:	f1c3 0320 	rsble	r3, r3, #32
 8003f66:	bfc6      	itte	gt
 8003f68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003f6c:	4318      	orrgt	r0, r3
 8003f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8003f72:	f7fc fa37 	bl	80003e4 <__aeabi_ui2d>
 8003f76:	2301      	movs	r3, #1
 8003f78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003f7c:	3c01      	subs	r4, #1
 8003f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f80:	e76f      	b.n	8003e62 <_dtoa_r+0x112>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e7b2      	b.n	8003eec <_dtoa_r+0x19c>
 8003f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f88:	e7b1      	b.n	8003eee <_dtoa_r+0x19e>
 8003f8a:	9b06      	ldr	r3, [sp, #24]
 8003f8c:	eba3 030a 	sub.w	r3, r3, sl
 8003f90:	9306      	str	r3, [sp, #24]
 8003f92:	f1ca 0300 	rsb	r3, sl, #0
 8003f96:	930a      	str	r3, [sp, #40]	; 0x28
 8003f98:	2300      	movs	r3, #0
 8003f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f9c:	e7be      	b.n	8003f1c <_dtoa_r+0x1cc>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dc58      	bgt.n	800405a <_dtoa_r+0x30a>
 8003fa8:	f04f 0901 	mov.w	r9, #1
 8003fac:	464b      	mov	r3, r9
 8003fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8003fb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003fba:	6042      	str	r2, [r0, #4]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	f102 0614 	add.w	r6, r2, #20
 8003fc2:	429e      	cmp	r6, r3
 8003fc4:	6841      	ldr	r1, [r0, #4]
 8003fc6:	d94e      	bls.n	8004066 <_dtoa_r+0x316>
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 fcd7 	bl	800497c <_Balloc>
 8003fce:	9003      	str	r0, [sp, #12]
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d14c      	bne.n	800406e <_dtoa_r+0x31e>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <_dtoa_r+0x2e8>)
 8003fdc:	e6cc      	b.n	8003d78 <_dtoa_r+0x28>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e7de      	b.n	8003fa0 <_dtoa_r+0x250>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fe8:	eb0a 0903 	add.w	r9, sl, r3
 8003fec:	f109 0301 	add.w	r3, r9, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	9308      	str	r3, [sp, #32]
 8003ff4:	bfb8      	it	lt
 8003ff6:	2301      	movlt	r3, #1
 8003ff8:	e7dd      	b.n	8003fb6 <_dtoa_r+0x266>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e7f2      	b.n	8003fe4 <_dtoa_r+0x294>
 8003ffe:	bf00      	nop
 8004000:	636f4361 	.word	0x636f4361
 8004004:	3fd287a7 	.word	0x3fd287a7
 8004008:	8b60c8b3 	.word	0x8b60c8b3
 800400c:	3fc68a28 	.word	0x3fc68a28
 8004010:	509f79fb 	.word	0x509f79fb
 8004014:	3fd34413 	.word	0x3fd34413
 8004018:	08006199 	.word	0x08006199
 800401c:	080061b0 	.word	0x080061b0
 8004020:	7ff00000 	.word	0x7ff00000
 8004024:	08006195 	.word	0x08006195
 8004028:	0800618c 	.word	0x0800618c
 800402c:	08006169 	.word	0x08006169
 8004030:	3ff80000 	.word	0x3ff80000
 8004034:	080062a0 	.word	0x080062a0
 8004038:	0800620b 	.word	0x0800620b
 800403c:	2401      	movs	r4, #1
 800403e:	2300      	movs	r3, #0
 8004040:	940b      	str	r4, [sp, #44]	; 0x2c
 8004042:	9322      	str	r3, [sp, #136]	; 0x88
 8004044:	f04f 39ff 	mov.w	r9, #4294967295
 8004048:	2200      	movs	r2, #0
 800404a:	2312      	movs	r3, #18
 800404c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004050:	9223      	str	r2, [sp, #140]	; 0x8c
 8004052:	e7b0      	b.n	8003fb6 <_dtoa_r+0x266>
 8004054:	2301      	movs	r3, #1
 8004056:	930b      	str	r3, [sp, #44]	; 0x2c
 8004058:	e7f4      	b.n	8004044 <_dtoa_r+0x2f4>
 800405a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800405e:	464b      	mov	r3, r9
 8004060:	f8cd 9020 	str.w	r9, [sp, #32]
 8004064:	e7a7      	b.n	8003fb6 <_dtoa_r+0x266>
 8004066:	3101      	adds	r1, #1
 8004068:	6041      	str	r1, [r0, #4]
 800406a:	0052      	lsls	r2, r2, #1
 800406c:	e7a7      	b.n	8003fbe <_dtoa_r+0x26e>
 800406e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004070:	9a03      	ldr	r2, [sp, #12]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	9b08      	ldr	r3, [sp, #32]
 8004076:	2b0e      	cmp	r3, #14
 8004078:	f200 80a8 	bhi.w	80041cc <_dtoa_r+0x47c>
 800407c:	2c00      	cmp	r4, #0
 800407e:	f000 80a5 	beq.w	80041cc <_dtoa_r+0x47c>
 8004082:	f1ba 0f00 	cmp.w	sl, #0
 8004086:	dd34      	ble.n	80040f2 <_dtoa_r+0x3a2>
 8004088:	4a9a      	ldr	r2, [pc, #616]	; (80042f4 <_dtoa_r+0x5a4>)
 800408a:	f00a 030f 	and.w	r3, sl, #15
 800408e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004092:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800409a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800409e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80040a2:	d016      	beq.n	80040d2 <_dtoa_r+0x382>
 80040a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040a8:	4b93      	ldr	r3, [pc, #588]	; (80042f8 <_dtoa_r+0x5a8>)
 80040aa:	2703      	movs	r7, #3
 80040ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80040b0:	f7fc fb3c 	bl	800072c <__aeabi_ddiv>
 80040b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040b8:	f004 040f 	and.w	r4, r4, #15
 80040bc:	4e8e      	ldr	r6, [pc, #568]	; (80042f8 <_dtoa_r+0x5a8>)
 80040be:	b954      	cbnz	r4, 80040d6 <_dtoa_r+0x386>
 80040c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c8:	f7fc fb30 	bl	800072c <__aeabi_ddiv>
 80040cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040d0:	e029      	b.n	8004126 <_dtoa_r+0x3d6>
 80040d2:	2702      	movs	r7, #2
 80040d4:	e7f2      	b.n	80040bc <_dtoa_r+0x36c>
 80040d6:	07e1      	lsls	r1, r4, #31
 80040d8:	d508      	bpl.n	80040ec <_dtoa_r+0x39c>
 80040da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80040e2:	f7fc f9f9 	bl	80004d8 <__aeabi_dmul>
 80040e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040ea:	3701      	adds	r7, #1
 80040ec:	1064      	asrs	r4, r4, #1
 80040ee:	3608      	adds	r6, #8
 80040f0:	e7e5      	b.n	80040be <_dtoa_r+0x36e>
 80040f2:	f000 80a5 	beq.w	8004240 <_dtoa_r+0x4f0>
 80040f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040fa:	f1ca 0400 	rsb	r4, sl, #0
 80040fe:	4b7d      	ldr	r3, [pc, #500]	; (80042f4 <_dtoa_r+0x5a4>)
 8004100:	f004 020f 	and.w	r2, r4, #15
 8004104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f9e4 	bl	80004d8 <__aeabi_dmul>
 8004110:	2702      	movs	r7, #2
 8004112:	2300      	movs	r3, #0
 8004114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004118:	4e77      	ldr	r6, [pc, #476]	; (80042f8 <_dtoa_r+0x5a8>)
 800411a:	1124      	asrs	r4, r4, #4
 800411c:	2c00      	cmp	r4, #0
 800411e:	f040 8084 	bne.w	800422a <_dtoa_r+0x4da>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1d2      	bne.n	80040cc <_dtoa_r+0x37c>
 8004126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 808b 	beq.w	8004244 <_dtoa_r+0x4f4>
 800412e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800413a:	2200      	movs	r2, #0
 800413c:	4b6f      	ldr	r3, [pc, #444]	; (80042fc <_dtoa_r+0x5ac>)
 800413e:	f7fc fc3d 	bl	80009bc <__aeabi_dcmplt>
 8004142:	2800      	cmp	r0, #0
 8004144:	d07e      	beq.n	8004244 <_dtoa_r+0x4f4>
 8004146:	9b08      	ldr	r3, [sp, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d07b      	beq.n	8004244 <_dtoa_r+0x4f4>
 800414c:	f1b9 0f00 	cmp.w	r9, #0
 8004150:	dd38      	ble.n	80041c4 <_dtoa_r+0x474>
 8004152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004156:	2200      	movs	r2, #0
 8004158:	4b69      	ldr	r3, [pc, #420]	; (8004300 <_dtoa_r+0x5b0>)
 800415a:	f7fc f9bd 	bl	80004d8 <__aeabi_dmul>
 800415e:	464c      	mov	r4, r9
 8004160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004164:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004168:	3701      	adds	r7, #1
 800416a:	4638      	mov	r0, r7
 800416c:	f7fc f94a 	bl	8000404 <__aeabi_i2d>
 8004170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004174:	f7fc f9b0 	bl	80004d8 <__aeabi_dmul>
 8004178:	2200      	movs	r2, #0
 800417a:	4b62      	ldr	r3, [pc, #392]	; (8004304 <_dtoa_r+0x5b4>)
 800417c:	f7fb fff6 	bl	800016c <__adddf3>
 8004180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004188:	9611      	str	r6, [sp, #68]	; 0x44
 800418a:	2c00      	cmp	r4, #0
 800418c:	d15d      	bne.n	800424a <_dtoa_r+0x4fa>
 800418e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004192:	2200      	movs	r2, #0
 8004194:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <_dtoa_r+0x5b8>)
 8004196:	f7fb ffe7 	bl	8000168 <__aeabi_dsub>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041a2:	4633      	mov	r3, r6
 80041a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041a6:	f7fc fc27 	bl	80009f8 <__aeabi_dcmpgt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f040 829c 	bne.w	80046e8 <_dtoa_r+0x998>
 80041b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80041ba:	f7fc fbff 	bl	80009bc <__aeabi_dcmplt>
 80041be:	2800      	cmp	r0, #0
 80041c0:	f040 8290 	bne.w	80046e4 <_dtoa_r+0x994>
 80041c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80041c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f2c0 8152 	blt.w	8004478 <_dtoa_r+0x728>
 80041d4:	f1ba 0f0e 	cmp.w	sl, #14
 80041d8:	f300 814e 	bgt.w	8004478 <_dtoa_r+0x728>
 80041dc:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <_dtoa_r+0x5a4>)
 80041de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80041e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80041ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f280 80db 	bge.w	80043a8 <_dtoa_r+0x658>
 80041f2:	9b08      	ldr	r3, [sp, #32]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f300 80d7 	bgt.w	80043a8 <_dtoa_r+0x658>
 80041fa:	f040 8272 	bne.w	80046e2 <_dtoa_r+0x992>
 80041fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004202:	2200      	movs	r2, #0
 8004204:	4b40      	ldr	r3, [pc, #256]	; (8004308 <_dtoa_r+0x5b8>)
 8004206:	f7fc f967 	bl	80004d8 <__aeabi_dmul>
 800420a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800420e:	f7fc fbe9 	bl	80009e4 <__aeabi_dcmpge>
 8004212:	9c08      	ldr	r4, [sp, #32]
 8004214:	4626      	mov	r6, r4
 8004216:	2800      	cmp	r0, #0
 8004218:	f040 8248 	bne.w	80046ac <_dtoa_r+0x95c>
 800421c:	2331      	movs	r3, #49	; 0x31
 800421e:	9f03      	ldr	r7, [sp, #12]
 8004220:	f10a 0a01 	add.w	sl, sl, #1
 8004224:	f807 3b01 	strb.w	r3, [r7], #1
 8004228:	e244      	b.n	80046b4 <_dtoa_r+0x964>
 800422a:	07e2      	lsls	r2, r4, #31
 800422c:	d505      	bpl.n	800423a <_dtoa_r+0x4ea>
 800422e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004232:	f7fc f951 	bl	80004d8 <__aeabi_dmul>
 8004236:	2301      	movs	r3, #1
 8004238:	3701      	adds	r7, #1
 800423a:	1064      	asrs	r4, r4, #1
 800423c:	3608      	adds	r6, #8
 800423e:	e76d      	b.n	800411c <_dtoa_r+0x3cc>
 8004240:	2702      	movs	r7, #2
 8004242:	e770      	b.n	8004126 <_dtoa_r+0x3d6>
 8004244:	46d0      	mov	r8, sl
 8004246:	9c08      	ldr	r4, [sp, #32]
 8004248:	e78f      	b.n	800416a <_dtoa_r+0x41a>
 800424a:	9903      	ldr	r1, [sp, #12]
 800424c:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <_dtoa_r+0x5a4>)
 800424e:	4421      	add	r1, r4
 8004250:	9112      	str	r1, [sp, #72]	; 0x48
 8004252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004258:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800425c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004260:	2900      	cmp	r1, #0
 8004262:	d055      	beq.n	8004310 <_dtoa_r+0x5c0>
 8004264:	2000      	movs	r0, #0
 8004266:	4929      	ldr	r1, [pc, #164]	; (800430c <_dtoa_r+0x5bc>)
 8004268:	f7fc fa60 	bl	800072c <__aeabi_ddiv>
 800426c:	463b      	mov	r3, r7
 800426e:	4632      	mov	r2, r6
 8004270:	f7fb ff7a 	bl	8000168 <__aeabi_dsub>
 8004274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004278:	9f03      	ldr	r7, [sp, #12]
 800427a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800427e:	f7fc fbdb 	bl	8000a38 <__aeabi_d2iz>
 8004282:	4604      	mov	r4, r0
 8004284:	f7fc f8be 	bl	8000404 <__aeabi_i2d>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004290:	f7fb ff6a 	bl	8000168 <__aeabi_dsub>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	3430      	adds	r4, #48	; 0x30
 800429a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800429e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042a2:	f807 4b01 	strb.w	r4, [r7], #1
 80042a6:	f7fc fb89 	bl	80009bc <__aeabi_dcmplt>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d174      	bne.n	8004398 <_dtoa_r+0x648>
 80042ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042b2:	2000      	movs	r0, #0
 80042b4:	4911      	ldr	r1, [pc, #68]	; (80042fc <_dtoa_r+0x5ac>)
 80042b6:	f7fb ff57 	bl	8000168 <__aeabi_dsub>
 80042ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042be:	f7fc fb7d 	bl	80009bc <__aeabi_dcmplt>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	f040 80b7 	bne.w	8004436 <_dtoa_r+0x6e6>
 80042c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042ca:	429f      	cmp	r7, r3
 80042cc:	f43f af7a 	beq.w	80041c4 <_dtoa_r+0x474>
 80042d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042d4:	2200      	movs	r2, #0
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <_dtoa_r+0x5b0>)
 80042d8:	f7fc f8fe 	bl	80004d8 <__aeabi_dmul>
 80042dc:	2200      	movs	r2, #0
 80042de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <_dtoa_r+0x5b0>)
 80042e8:	f7fc f8f6 	bl	80004d8 <__aeabi_dmul>
 80042ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042f0:	e7c3      	b.n	800427a <_dtoa_r+0x52a>
 80042f2:	bf00      	nop
 80042f4:	080062a0 	.word	0x080062a0
 80042f8:	08006278 	.word	0x08006278
 80042fc:	3ff00000 	.word	0x3ff00000
 8004300:	40240000 	.word	0x40240000
 8004304:	401c0000 	.word	0x401c0000
 8004308:	40140000 	.word	0x40140000
 800430c:	3fe00000 	.word	0x3fe00000
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	f7fc f8e0 	bl	80004d8 <__aeabi_dmul>
 8004318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800431a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800431e:	9c03      	ldr	r4, [sp, #12]
 8004320:	9314      	str	r3, [sp, #80]	; 0x50
 8004322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004326:	f7fc fb87 	bl	8000a38 <__aeabi_d2iz>
 800432a:	9015      	str	r0, [sp, #84]	; 0x54
 800432c:	f7fc f86a 	bl	8000404 <__aeabi_i2d>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004338:	f7fb ff16 	bl	8000168 <__aeabi_dsub>
 800433c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800433e:	4606      	mov	r6, r0
 8004340:	3330      	adds	r3, #48	; 0x30
 8004342:	f804 3b01 	strb.w	r3, [r4], #1
 8004346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004348:	460f      	mov	r7, r1
 800434a:	429c      	cmp	r4, r3
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	d124      	bne.n	800439c <_dtoa_r+0x64c>
 8004352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004356:	4bb0      	ldr	r3, [pc, #704]	; (8004618 <_dtoa_r+0x8c8>)
 8004358:	f7fb ff08 	bl	800016c <__adddf3>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4630      	mov	r0, r6
 8004362:	4639      	mov	r1, r7
 8004364:	f7fc fb48 	bl	80009f8 <__aeabi_dcmpgt>
 8004368:	2800      	cmp	r0, #0
 800436a:	d163      	bne.n	8004434 <_dtoa_r+0x6e4>
 800436c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004370:	2000      	movs	r0, #0
 8004372:	49a9      	ldr	r1, [pc, #676]	; (8004618 <_dtoa_r+0x8c8>)
 8004374:	f7fb fef8 	bl	8000168 <__aeabi_dsub>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4630      	mov	r0, r6
 800437e:	4639      	mov	r1, r7
 8004380:	f7fc fb1c 	bl	80009bc <__aeabi_dcmplt>
 8004384:	2800      	cmp	r0, #0
 8004386:	f43f af1d 	beq.w	80041c4 <_dtoa_r+0x474>
 800438a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800438c:	1e7b      	subs	r3, r7, #1
 800438e:	9314      	str	r3, [sp, #80]	; 0x50
 8004390:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d0f8      	beq.n	800438a <_dtoa_r+0x63a>
 8004398:	46c2      	mov	sl, r8
 800439a:	e03b      	b.n	8004414 <_dtoa_r+0x6c4>
 800439c:	4b9f      	ldr	r3, [pc, #636]	; (800461c <_dtoa_r+0x8cc>)
 800439e:	f7fc f89b 	bl	80004d8 <__aeabi_dmul>
 80043a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043a6:	e7bc      	b.n	8004322 <_dtoa_r+0x5d2>
 80043a8:	9f03      	ldr	r7, [sp, #12]
 80043aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80043ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043b2:	4640      	mov	r0, r8
 80043b4:	4649      	mov	r1, r9
 80043b6:	f7fc f9b9 	bl	800072c <__aeabi_ddiv>
 80043ba:	f7fc fb3d 	bl	8000a38 <__aeabi_d2iz>
 80043be:	4604      	mov	r4, r0
 80043c0:	f7fc f820 	bl	8000404 <__aeabi_i2d>
 80043c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043c8:	f7fc f886 	bl	80004d8 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4640      	mov	r0, r8
 80043d2:	4649      	mov	r1, r9
 80043d4:	f7fb fec8 	bl	8000168 <__aeabi_dsub>
 80043d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80043dc:	f807 6b01 	strb.w	r6, [r7], #1
 80043e0:	9e03      	ldr	r6, [sp, #12]
 80043e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80043e6:	1bbe      	subs	r6, r7, r6
 80043e8:	45b4      	cmp	ip, r6
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	d136      	bne.n	800445e <_dtoa_r+0x70e>
 80043f0:	f7fb febc 	bl	800016c <__adddf3>
 80043f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043f8:	4680      	mov	r8, r0
 80043fa:	4689      	mov	r9, r1
 80043fc:	f7fc fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8004400:	bb58      	cbnz	r0, 800445a <_dtoa_r+0x70a>
 8004402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004406:	4640      	mov	r0, r8
 8004408:	4649      	mov	r1, r9
 800440a:	f7fc facd 	bl	80009a8 <__aeabi_dcmpeq>
 800440e:	b108      	cbz	r0, 8004414 <_dtoa_r+0x6c4>
 8004410:	07e1      	lsls	r1, r4, #31
 8004412:	d422      	bmi.n	800445a <_dtoa_r+0x70a>
 8004414:	4628      	mov	r0, r5
 8004416:	4659      	mov	r1, fp
 8004418:	f000 faf0 	bl	80049fc <_Bfree>
 800441c:	2300      	movs	r3, #0
 800441e:	703b      	strb	r3, [r7, #0]
 8004420:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004422:	f10a 0001 	add.w	r0, sl, #1
 8004426:	6018      	str	r0, [r3, #0]
 8004428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800442a:	2b00      	cmp	r3, #0
 800442c:	f43f acde 	beq.w	8003dec <_dtoa_r+0x9c>
 8004430:	601f      	str	r7, [r3, #0]
 8004432:	e4db      	b.n	8003dec <_dtoa_r+0x9c>
 8004434:	4627      	mov	r7, r4
 8004436:	463b      	mov	r3, r7
 8004438:	461f      	mov	r7, r3
 800443a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800443e:	2a39      	cmp	r2, #57	; 0x39
 8004440:	d107      	bne.n	8004452 <_dtoa_r+0x702>
 8004442:	9a03      	ldr	r2, [sp, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d1f7      	bne.n	8004438 <_dtoa_r+0x6e8>
 8004448:	2230      	movs	r2, #48	; 0x30
 800444a:	9903      	ldr	r1, [sp, #12]
 800444c:	f108 0801 	add.w	r8, r8, #1
 8004450:	700a      	strb	r2, [r1, #0]
 8004452:	781a      	ldrb	r2, [r3, #0]
 8004454:	3201      	adds	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e79e      	b.n	8004398 <_dtoa_r+0x648>
 800445a:	46d0      	mov	r8, sl
 800445c:	e7eb      	b.n	8004436 <_dtoa_r+0x6e6>
 800445e:	2200      	movs	r2, #0
 8004460:	4b6e      	ldr	r3, [pc, #440]	; (800461c <_dtoa_r+0x8cc>)
 8004462:	f7fc f839 	bl	80004d8 <__aeabi_dmul>
 8004466:	2200      	movs	r2, #0
 8004468:	2300      	movs	r3, #0
 800446a:	4680      	mov	r8, r0
 800446c:	4689      	mov	r9, r1
 800446e:	f7fc fa9b 	bl	80009a8 <__aeabi_dcmpeq>
 8004472:	2800      	cmp	r0, #0
 8004474:	d09b      	beq.n	80043ae <_dtoa_r+0x65e>
 8004476:	e7cd      	b.n	8004414 <_dtoa_r+0x6c4>
 8004478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800447a:	2a00      	cmp	r2, #0
 800447c:	f000 80d0 	beq.w	8004620 <_dtoa_r+0x8d0>
 8004480:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004482:	2a01      	cmp	r2, #1
 8004484:	f300 80ae 	bgt.w	80045e4 <_dtoa_r+0x894>
 8004488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800448a:	2a00      	cmp	r2, #0
 800448c:	f000 80a6 	beq.w	80045dc <_dtoa_r+0x88c>
 8004490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004496:	9f06      	ldr	r7, [sp, #24]
 8004498:	9a06      	ldr	r2, [sp, #24]
 800449a:	2101      	movs	r1, #1
 800449c:	441a      	add	r2, r3
 800449e:	9206      	str	r2, [sp, #24]
 80044a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a2:	4628      	mov	r0, r5
 80044a4:	441a      	add	r2, r3
 80044a6:	9209      	str	r2, [sp, #36]	; 0x24
 80044a8:	f000 fb5e 	bl	8004b68 <__i2b>
 80044ac:	4606      	mov	r6, r0
 80044ae:	2f00      	cmp	r7, #0
 80044b0:	dd0c      	ble.n	80044cc <_dtoa_r+0x77c>
 80044b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	dd09      	ble.n	80044cc <_dtoa_r+0x77c>
 80044b8:	42bb      	cmp	r3, r7
 80044ba:	bfa8      	it	ge
 80044bc:	463b      	movge	r3, r7
 80044be:	9a06      	ldr	r2, [sp, #24]
 80044c0:	1aff      	subs	r7, r7, r3
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	9206      	str	r2, [sp, #24]
 80044c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	9309      	str	r3, [sp, #36]	; 0x24
 80044cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ce:	b1f3      	cbz	r3, 800450e <_dtoa_r+0x7be>
 80044d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80a8 	beq.w	8004628 <_dtoa_r+0x8d8>
 80044d8:	2c00      	cmp	r4, #0
 80044da:	dd10      	ble.n	80044fe <_dtoa_r+0x7ae>
 80044dc:	4631      	mov	r1, r6
 80044de:	4622      	mov	r2, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 fbff 	bl	8004ce4 <__pow5mult>
 80044e6:	465a      	mov	r2, fp
 80044e8:	4601      	mov	r1, r0
 80044ea:	4606      	mov	r6, r0
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 fb51 	bl	8004b94 <__multiply>
 80044f2:	4680      	mov	r8, r0
 80044f4:	4659      	mov	r1, fp
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fa80 	bl	80049fc <_Bfree>
 80044fc:	46c3      	mov	fp, r8
 80044fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004500:	1b1a      	subs	r2, r3, r4
 8004502:	d004      	beq.n	800450e <_dtoa_r+0x7be>
 8004504:	4659      	mov	r1, fp
 8004506:	4628      	mov	r0, r5
 8004508:	f000 fbec 	bl	8004ce4 <__pow5mult>
 800450c:	4683      	mov	fp, r0
 800450e:	2101      	movs	r1, #1
 8004510:	4628      	mov	r0, r5
 8004512:	f000 fb29 	bl	8004b68 <__i2b>
 8004516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004518:	4604      	mov	r4, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f340 8086 	ble.w	800462c <_dtoa_r+0x8dc>
 8004520:	461a      	mov	r2, r3
 8004522:	4601      	mov	r1, r0
 8004524:	4628      	mov	r0, r5
 8004526:	f000 fbdd 	bl	8004ce4 <__pow5mult>
 800452a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800452c:	4604      	mov	r4, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	dd7f      	ble.n	8004632 <_dtoa_r+0x8e2>
 8004532:	f04f 0800 	mov.w	r8, #0
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800453c:	6918      	ldr	r0, [r3, #16]
 800453e:	f000 fac5 	bl	8004acc <__hi0bits>
 8004542:	f1c0 0020 	rsb	r0, r0, #32
 8004546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004548:	4418      	add	r0, r3
 800454a:	f010 001f 	ands.w	r0, r0, #31
 800454e:	f000 8092 	beq.w	8004676 <_dtoa_r+0x926>
 8004552:	f1c0 0320 	rsb	r3, r0, #32
 8004556:	2b04      	cmp	r3, #4
 8004558:	f340 808a 	ble.w	8004670 <_dtoa_r+0x920>
 800455c:	f1c0 001c 	rsb	r0, r0, #28
 8004560:	9b06      	ldr	r3, [sp, #24]
 8004562:	4407      	add	r7, r0
 8004564:	4403      	add	r3, r0
 8004566:	9306      	str	r3, [sp, #24]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	4403      	add	r3, r0
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	9b06      	ldr	r3, [sp, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	dd05      	ble.n	8004580 <_dtoa_r+0x830>
 8004574:	4659      	mov	r1, fp
 8004576:	461a      	mov	r2, r3
 8004578:	4628      	mov	r0, r5
 800457a:	f000 fc0d 	bl	8004d98 <__lshift>
 800457e:	4683      	mov	fp, r0
 8004580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	dd05      	ble.n	8004592 <_dtoa_r+0x842>
 8004586:	4621      	mov	r1, r4
 8004588:	461a      	mov	r2, r3
 800458a:	4628      	mov	r0, r5
 800458c:	f000 fc04 	bl	8004d98 <__lshift>
 8004590:	4604      	mov	r4, r0
 8004592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d070      	beq.n	800467a <_dtoa_r+0x92a>
 8004598:	4621      	mov	r1, r4
 800459a:	4658      	mov	r0, fp
 800459c:	f000 fc6c 	bl	8004e78 <__mcmp>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	da6a      	bge.n	800467a <_dtoa_r+0x92a>
 80045a4:	2300      	movs	r3, #0
 80045a6:	4659      	mov	r1, fp
 80045a8:	220a      	movs	r2, #10
 80045aa:	4628      	mov	r0, r5
 80045ac:	f000 fa48 	bl	8004a40 <__multadd>
 80045b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b2:	4683      	mov	fp, r0
 80045b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8194 	beq.w	80048e6 <_dtoa_r+0xb96>
 80045be:	4631      	mov	r1, r6
 80045c0:	2300      	movs	r3, #0
 80045c2:	220a      	movs	r2, #10
 80045c4:	4628      	mov	r0, r5
 80045c6:	f000 fa3b 	bl	8004a40 <__multadd>
 80045ca:	f1b9 0f00 	cmp.w	r9, #0
 80045ce:	4606      	mov	r6, r0
 80045d0:	f300 8093 	bgt.w	80046fa <_dtoa_r+0x9aa>
 80045d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	dc57      	bgt.n	800468a <_dtoa_r+0x93a>
 80045da:	e08e      	b.n	80046fa <_dtoa_r+0x9aa>
 80045dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80045e2:	e757      	b.n	8004494 <_dtoa_r+0x744>
 80045e4:	9b08      	ldr	r3, [sp, #32]
 80045e6:	1e5c      	subs	r4, r3, #1
 80045e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ea:	42a3      	cmp	r3, r4
 80045ec:	bfb7      	itett	lt
 80045ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80045f0:	1b1c      	subge	r4, r3, r4
 80045f2:	1ae2      	sublt	r2, r4, r3
 80045f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80045f6:	bfbe      	ittt	lt
 80045f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80045fa:	189b      	addlt	r3, r3, r2
 80045fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80045fe:	9b08      	ldr	r3, [sp, #32]
 8004600:	bfb8      	it	lt
 8004602:	2400      	movlt	r4, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	bfbb      	ittet	lt
 8004608:	9b06      	ldrlt	r3, [sp, #24]
 800460a:	9a08      	ldrlt	r2, [sp, #32]
 800460c:	9f06      	ldrge	r7, [sp, #24]
 800460e:	1a9f      	sublt	r7, r3, r2
 8004610:	bfac      	ite	ge
 8004612:	9b08      	ldrge	r3, [sp, #32]
 8004614:	2300      	movlt	r3, #0
 8004616:	e73f      	b.n	8004498 <_dtoa_r+0x748>
 8004618:	3fe00000 	.word	0x3fe00000
 800461c:	40240000 	.word	0x40240000
 8004620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004622:	9f06      	ldr	r7, [sp, #24]
 8004624:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004626:	e742      	b.n	80044ae <_dtoa_r+0x75e>
 8004628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462a:	e76b      	b.n	8004504 <_dtoa_r+0x7b4>
 800462c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800462e:	2b01      	cmp	r3, #1
 8004630:	dc19      	bgt.n	8004666 <_dtoa_r+0x916>
 8004632:	9b04      	ldr	r3, [sp, #16]
 8004634:	b9bb      	cbnz	r3, 8004666 <_dtoa_r+0x916>
 8004636:	9b05      	ldr	r3, [sp, #20]
 8004638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800463c:	b99b      	cbnz	r3, 8004666 <_dtoa_r+0x916>
 800463e:	9b05      	ldr	r3, [sp, #20]
 8004640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004644:	0d1b      	lsrs	r3, r3, #20
 8004646:	051b      	lsls	r3, r3, #20
 8004648:	b183      	cbz	r3, 800466c <_dtoa_r+0x91c>
 800464a:	f04f 0801 	mov.w	r8, #1
 800464e:	9b06      	ldr	r3, [sp, #24]
 8004650:	3301      	adds	r3, #1
 8004652:	9306      	str	r3, [sp, #24]
 8004654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004656:	3301      	adds	r3, #1
 8004658:	9309      	str	r3, [sp, #36]	; 0x24
 800465a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f af6a 	bne.w	8004536 <_dtoa_r+0x7e6>
 8004662:	2001      	movs	r0, #1
 8004664:	e76f      	b.n	8004546 <_dtoa_r+0x7f6>
 8004666:	f04f 0800 	mov.w	r8, #0
 800466a:	e7f6      	b.n	800465a <_dtoa_r+0x90a>
 800466c:	4698      	mov	r8, r3
 800466e:	e7f4      	b.n	800465a <_dtoa_r+0x90a>
 8004670:	f43f af7d 	beq.w	800456e <_dtoa_r+0x81e>
 8004674:	4618      	mov	r0, r3
 8004676:	301c      	adds	r0, #28
 8004678:	e772      	b.n	8004560 <_dtoa_r+0x810>
 800467a:	9b08      	ldr	r3, [sp, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dc36      	bgt.n	80046ee <_dtoa_r+0x99e>
 8004680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004682:	2b02      	cmp	r3, #2
 8004684:	dd33      	ble.n	80046ee <_dtoa_r+0x99e>
 8004686:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800468a:	f1b9 0f00 	cmp.w	r9, #0
 800468e:	d10d      	bne.n	80046ac <_dtoa_r+0x95c>
 8004690:	4621      	mov	r1, r4
 8004692:	464b      	mov	r3, r9
 8004694:	2205      	movs	r2, #5
 8004696:	4628      	mov	r0, r5
 8004698:	f000 f9d2 	bl	8004a40 <__multadd>
 800469c:	4601      	mov	r1, r0
 800469e:	4604      	mov	r4, r0
 80046a0:	4658      	mov	r0, fp
 80046a2:	f000 fbe9 	bl	8004e78 <__mcmp>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f73f adb8 	bgt.w	800421c <_dtoa_r+0x4cc>
 80046ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046ae:	9f03      	ldr	r7, [sp, #12]
 80046b0:	ea6f 0a03 	mvn.w	sl, r3
 80046b4:	f04f 0800 	mov.w	r8, #0
 80046b8:	4621      	mov	r1, r4
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 f99e 	bl	80049fc <_Bfree>
 80046c0:	2e00      	cmp	r6, #0
 80046c2:	f43f aea7 	beq.w	8004414 <_dtoa_r+0x6c4>
 80046c6:	f1b8 0f00 	cmp.w	r8, #0
 80046ca:	d005      	beq.n	80046d8 <_dtoa_r+0x988>
 80046cc:	45b0      	cmp	r8, r6
 80046ce:	d003      	beq.n	80046d8 <_dtoa_r+0x988>
 80046d0:	4641      	mov	r1, r8
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 f992 	bl	80049fc <_Bfree>
 80046d8:	4631      	mov	r1, r6
 80046da:	4628      	mov	r0, r5
 80046dc:	f000 f98e 	bl	80049fc <_Bfree>
 80046e0:	e698      	b.n	8004414 <_dtoa_r+0x6c4>
 80046e2:	2400      	movs	r4, #0
 80046e4:	4626      	mov	r6, r4
 80046e6:	e7e1      	b.n	80046ac <_dtoa_r+0x95c>
 80046e8:	46c2      	mov	sl, r8
 80046ea:	4626      	mov	r6, r4
 80046ec:	e596      	b.n	800421c <_dtoa_r+0x4cc>
 80046ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80fd 	beq.w	80048f4 <_dtoa_r+0xba4>
 80046fa:	2f00      	cmp	r7, #0
 80046fc:	dd05      	ble.n	800470a <_dtoa_r+0x9ba>
 80046fe:	4631      	mov	r1, r6
 8004700:	463a      	mov	r2, r7
 8004702:	4628      	mov	r0, r5
 8004704:	f000 fb48 	bl	8004d98 <__lshift>
 8004708:	4606      	mov	r6, r0
 800470a:	f1b8 0f00 	cmp.w	r8, #0
 800470e:	d05c      	beq.n	80047ca <_dtoa_r+0xa7a>
 8004710:	4628      	mov	r0, r5
 8004712:	6871      	ldr	r1, [r6, #4]
 8004714:	f000 f932 	bl	800497c <_Balloc>
 8004718:	4607      	mov	r7, r0
 800471a:	b928      	cbnz	r0, 8004728 <_dtoa_r+0x9d8>
 800471c:	4602      	mov	r2, r0
 800471e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004722:	4b7f      	ldr	r3, [pc, #508]	; (8004920 <_dtoa_r+0xbd0>)
 8004724:	f7ff bb28 	b.w	8003d78 <_dtoa_r+0x28>
 8004728:	6932      	ldr	r2, [r6, #16]
 800472a:	f106 010c 	add.w	r1, r6, #12
 800472e:	3202      	adds	r2, #2
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	300c      	adds	r0, #12
 8004734:	f000 f914 	bl	8004960 <memcpy>
 8004738:	2201      	movs	r2, #1
 800473a:	4639      	mov	r1, r7
 800473c:	4628      	mov	r0, r5
 800473e:	f000 fb2b 	bl	8004d98 <__lshift>
 8004742:	46b0      	mov	r8, r6
 8004744:	4606      	mov	r6, r0
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	9308      	str	r3, [sp, #32]
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	444b      	add	r3, r9
 8004750:	930a      	str	r3, [sp, #40]	; 0x28
 8004752:	9b04      	ldr	r3, [sp, #16]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	9309      	str	r3, [sp, #36]	; 0x24
 800475a:	9b08      	ldr	r3, [sp, #32]
 800475c:	4621      	mov	r1, r4
 800475e:	3b01      	subs	r3, #1
 8004760:	4658      	mov	r0, fp
 8004762:	9304      	str	r3, [sp, #16]
 8004764:	f7ff fa68 	bl	8003c38 <quorem>
 8004768:	4603      	mov	r3, r0
 800476a:	4641      	mov	r1, r8
 800476c:	3330      	adds	r3, #48	; 0x30
 800476e:	9006      	str	r0, [sp, #24]
 8004770:	4658      	mov	r0, fp
 8004772:	930b      	str	r3, [sp, #44]	; 0x2c
 8004774:	f000 fb80 	bl	8004e78 <__mcmp>
 8004778:	4632      	mov	r2, r6
 800477a:	4681      	mov	r9, r0
 800477c:	4621      	mov	r1, r4
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fb96 	bl	8004eb0 <__mdiff>
 8004784:	68c2      	ldr	r2, [r0, #12]
 8004786:	4607      	mov	r7, r0
 8004788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800478a:	bb02      	cbnz	r2, 80047ce <_dtoa_r+0xa7e>
 800478c:	4601      	mov	r1, r0
 800478e:	4658      	mov	r0, fp
 8004790:	f000 fb72 	bl	8004e78 <__mcmp>
 8004794:	4602      	mov	r2, r0
 8004796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004798:	4639      	mov	r1, r7
 800479a:	4628      	mov	r0, r5
 800479c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80047a0:	f000 f92c 	bl	80049fc <_Bfree>
 80047a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047a8:	9f08      	ldr	r7, [sp, #32]
 80047aa:	ea43 0102 	orr.w	r1, r3, r2
 80047ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b0:	430b      	orrs	r3, r1
 80047b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047b4:	d10d      	bne.n	80047d2 <_dtoa_r+0xa82>
 80047b6:	2b39      	cmp	r3, #57	; 0x39
 80047b8:	d029      	beq.n	800480e <_dtoa_r+0xabe>
 80047ba:	f1b9 0f00 	cmp.w	r9, #0
 80047be:	dd01      	ble.n	80047c4 <_dtoa_r+0xa74>
 80047c0:	9b06      	ldr	r3, [sp, #24]
 80047c2:	3331      	adds	r3, #49	; 0x31
 80047c4:	9a04      	ldr	r2, [sp, #16]
 80047c6:	7013      	strb	r3, [r2, #0]
 80047c8:	e776      	b.n	80046b8 <_dtoa_r+0x968>
 80047ca:	4630      	mov	r0, r6
 80047cc:	e7b9      	b.n	8004742 <_dtoa_r+0x9f2>
 80047ce:	2201      	movs	r2, #1
 80047d0:	e7e2      	b.n	8004798 <_dtoa_r+0xa48>
 80047d2:	f1b9 0f00 	cmp.w	r9, #0
 80047d6:	db06      	blt.n	80047e6 <_dtoa_r+0xa96>
 80047d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80047da:	ea41 0909 	orr.w	r9, r1, r9
 80047de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047e0:	ea59 0101 	orrs.w	r1, r9, r1
 80047e4:	d120      	bne.n	8004828 <_dtoa_r+0xad8>
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	ddec      	ble.n	80047c4 <_dtoa_r+0xa74>
 80047ea:	4659      	mov	r1, fp
 80047ec:	2201      	movs	r2, #1
 80047ee:	4628      	mov	r0, r5
 80047f0:	9308      	str	r3, [sp, #32]
 80047f2:	f000 fad1 	bl	8004d98 <__lshift>
 80047f6:	4621      	mov	r1, r4
 80047f8:	4683      	mov	fp, r0
 80047fa:	f000 fb3d 	bl	8004e78 <__mcmp>
 80047fe:	2800      	cmp	r0, #0
 8004800:	9b08      	ldr	r3, [sp, #32]
 8004802:	dc02      	bgt.n	800480a <_dtoa_r+0xaba>
 8004804:	d1de      	bne.n	80047c4 <_dtoa_r+0xa74>
 8004806:	07da      	lsls	r2, r3, #31
 8004808:	d5dc      	bpl.n	80047c4 <_dtoa_r+0xa74>
 800480a:	2b39      	cmp	r3, #57	; 0x39
 800480c:	d1d8      	bne.n	80047c0 <_dtoa_r+0xa70>
 800480e:	2339      	movs	r3, #57	; 0x39
 8004810:	9a04      	ldr	r2, [sp, #16]
 8004812:	7013      	strb	r3, [r2, #0]
 8004814:	463b      	mov	r3, r7
 8004816:	461f      	mov	r7, r3
 8004818:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800481c:	3b01      	subs	r3, #1
 800481e:	2a39      	cmp	r2, #57	; 0x39
 8004820:	d050      	beq.n	80048c4 <_dtoa_r+0xb74>
 8004822:	3201      	adds	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e747      	b.n	80046b8 <_dtoa_r+0x968>
 8004828:	2a00      	cmp	r2, #0
 800482a:	dd03      	ble.n	8004834 <_dtoa_r+0xae4>
 800482c:	2b39      	cmp	r3, #57	; 0x39
 800482e:	d0ee      	beq.n	800480e <_dtoa_r+0xabe>
 8004830:	3301      	adds	r3, #1
 8004832:	e7c7      	b.n	80047c4 <_dtoa_r+0xa74>
 8004834:	9a08      	ldr	r2, [sp, #32]
 8004836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004838:	f802 3c01 	strb.w	r3, [r2, #-1]
 800483c:	428a      	cmp	r2, r1
 800483e:	d02a      	beq.n	8004896 <_dtoa_r+0xb46>
 8004840:	4659      	mov	r1, fp
 8004842:	2300      	movs	r3, #0
 8004844:	220a      	movs	r2, #10
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f8fa 	bl	8004a40 <__multadd>
 800484c:	45b0      	cmp	r8, r6
 800484e:	4683      	mov	fp, r0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	f04f 020a 	mov.w	r2, #10
 8004858:	4641      	mov	r1, r8
 800485a:	4628      	mov	r0, r5
 800485c:	d107      	bne.n	800486e <_dtoa_r+0xb1e>
 800485e:	f000 f8ef 	bl	8004a40 <__multadd>
 8004862:	4680      	mov	r8, r0
 8004864:	4606      	mov	r6, r0
 8004866:	9b08      	ldr	r3, [sp, #32]
 8004868:	3301      	adds	r3, #1
 800486a:	9308      	str	r3, [sp, #32]
 800486c:	e775      	b.n	800475a <_dtoa_r+0xa0a>
 800486e:	f000 f8e7 	bl	8004a40 <__multadd>
 8004872:	4631      	mov	r1, r6
 8004874:	4680      	mov	r8, r0
 8004876:	2300      	movs	r3, #0
 8004878:	220a      	movs	r2, #10
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f8e0 	bl	8004a40 <__multadd>
 8004880:	4606      	mov	r6, r0
 8004882:	e7f0      	b.n	8004866 <_dtoa_r+0xb16>
 8004884:	f1b9 0f00 	cmp.w	r9, #0
 8004888:	bfcc      	ite	gt
 800488a:	464f      	movgt	r7, r9
 800488c:	2701      	movle	r7, #1
 800488e:	f04f 0800 	mov.w	r8, #0
 8004892:	9a03      	ldr	r2, [sp, #12]
 8004894:	4417      	add	r7, r2
 8004896:	4659      	mov	r1, fp
 8004898:	2201      	movs	r2, #1
 800489a:	4628      	mov	r0, r5
 800489c:	9308      	str	r3, [sp, #32]
 800489e:	f000 fa7b 	bl	8004d98 <__lshift>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4683      	mov	fp, r0
 80048a6:	f000 fae7 	bl	8004e78 <__mcmp>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	dcb2      	bgt.n	8004814 <_dtoa_r+0xac4>
 80048ae:	d102      	bne.n	80048b6 <_dtoa_r+0xb66>
 80048b0:	9b08      	ldr	r3, [sp, #32]
 80048b2:	07db      	lsls	r3, r3, #31
 80048b4:	d4ae      	bmi.n	8004814 <_dtoa_r+0xac4>
 80048b6:	463b      	mov	r3, r7
 80048b8:	461f      	mov	r7, r3
 80048ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048be:	2a30      	cmp	r2, #48	; 0x30
 80048c0:	d0fa      	beq.n	80048b8 <_dtoa_r+0xb68>
 80048c2:	e6f9      	b.n	80046b8 <_dtoa_r+0x968>
 80048c4:	9a03      	ldr	r2, [sp, #12]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d1a5      	bne.n	8004816 <_dtoa_r+0xac6>
 80048ca:	2331      	movs	r3, #49	; 0x31
 80048cc:	f10a 0a01 	add.w	sl, sl, #1
 80048d0:	e779      	b.n	80047c6 <_dtoa_r+0xa76>
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <_dtoa_r+0xbd4>)
 80048d4:	f7ff baa8 	b.w	8003e28 <_dtoa_r+0xd8>
 80048d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f47f aa81 	bne.w	8003de2 <_dtoa_r+0x92>
 80048e0:	4b11      	ldr	r3, [pc, #68]	; (8004928 <_dtoa_r+0xbd8>)
 80048e2:	f7ff baa1 	b.w	8003e28 <_dtoa_r+0xd8>
 80048e6:	f1b9 0f00 	cmp.w	r9, #0
 80048ea:	dc03      	bgt.n	80048f4 <_dtoa_r+0xba4>
 80048ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f73f aecb 	bgt.w	800468a <_dtoa_r+0x93a>
 80048f4:	9f03      	ldr	r7, [sp, #12]
 80048f6:	4621      	mov	r1, r4
 80048f8:	4658      	mov	r0, fp
 80048fa:	f7ff f99d 	bl	8003c38 <quorem>
 80048fe:	9a03      	ldr	r2, [sp, #12]
 8004900:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004904:	f807 3b01 	strb.w	r3, [r7], #1
 8004908:	1aba      	subs	r2, r7, r2
 800490a:	4591      	cmp	r9, r2
 800490c:	ddba      	ble.n	8004884 <_dtoa_r+0xb34>
 800490e:	4659      	mov	r1, fp
 8004910:	2300      	movs	r3, #0
 8004912:	220a      	movs	r2, #10
 8004914:	4628      	mov	r0, r5
 8004916:	f000 f893 	bl	8004a40 <__multadd>
 800491a:	4683      	mov	fp, r0
 800491c:	e7eb      	b.n	80048f6 <_dtoa_r+0xba6>
 800491e:	bf00      	nop
 8004920:	0800620b 	.word	0x0800620b
 8004924:	08006168 	.word	0x08006168
 8004928:	0800618c 	.word	0x0800618c

0800492c <_localeconv_r>:
 800492c:	4800      	ldr	r0, [pc, #0]	; (8004930 <_localeconv_r+0x4>)
 800492e:	4770      	bx	lr
 8004930:	20000160 	.word	0x20000160

08004934 <malloc>:
 8004934:	4b02      	ldr	r3, [pc, #8]	; (8004940 <malloc+0xc>)
 8004936:	4601      	mov	r1, r0
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f000 bc1d 	b.w	8005178 <_malloc_r>
 800493e:	bf00      	nop
 8004940:	2000000c 	.word	0x2000000c

08004944 <memchr>:
 8004944:	4603      	mov	r3, r0
 8004946:	b510      	push	{r4, lr}
 8004948:	b2c9      	uxtb	r1, r1
 800494a:	4402      	add	r2, r0
 800494c:	4293      	cmp	r3, r2
 800494e:	4618      	mov	r0, r3
 8004950:	d101      	bne.n	8004956 <memchr+0x12>
 8004952:	2000      	movs	r0, #0
 8004954:	e003      	b.n	800495e <memchr+0x1a>
 8004956:	7804      	ldrb	r4, [r0, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	428c      	cmp	r4, r1
 800495c:	d1f6      	bne.n	800494c <memchr+0x8>
 800495e:	bd10      	pop	{r4, pc}

08004960 <memcpy>:
 8004960:	440a      	add	r2, r1
 8004962:	4291      	cmp	r1, r2
 8004964:	f100 33ff 	add.w	r3, r0, #4294967295
 8004968:	d100      	bne.n	800496c <memcpy+0xc>
 800496a:	4770      	bx	lr
 800496c:	b510      	push	{r4, lr}
 800496e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004972:	4291      	cmp	r1, r2
 8004974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004978:	d1f9      	bne.n	800496e <memcpy+0xe>
 800497a:	bd10      	pop	{r4, pc}

0800497c <_Balloc>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004980:	4604      	mov	r4, r0
 8004982:	460d      	mov	r5, r1
 8004984:	b976      	cbnz	r6, 80049a4 <_Balloc+0x28>
 8004986:	2010      	movs	r0, #16
 8004988:	f7ff ffd4 	bl	8004934 <malloc>
 800498c:	4602      	mov	r2, r0
 800498e:	6260      	str	r0, [r4, #36]	; 0x24
 8004990:	b920      	cbnz	r0, 800499c <_Balloc+0x20>
 8004992:	2166      	movs	r1, #102	; 0x66
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <_Balloc+0x78>)
 8004996:	4818      	ldr	r0, [pc, #96]	; (80049f8 <_Balloc+0x7c>)
 8004998:	f000 fdce 	bl	8005538 <__assert_func>
 800499c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049a0:	6006      	str	r6, [r0, #0]
 80049a2:	60c6      	str	r6, [r0, #12]
 80049a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80049a6:	68f3      	ldr	r3, [r6, #12]
 80049a8:	b183      	cbz	r3, 80049cc <_Balloc+0x50>
 80049aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80049b2:	b9b8      	cbnz	r0, 80049e4 <_Balloc+0x68>
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f605 	lsl.w	r6, r1, r5
 80049ba:	1d72      	adds	r2, r6, #5
 80049bc:	4620      	mov	r0, r4
 80049be:	0092      	lsls	r2, r2, #2
 80049c0:	f000 fb5e 	bl	8005080 <_calloc_r>
 80049c4:	b160      	cbz	r0, 80049e0 <_Balloc+0x64>
 80049c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80049ca:	e00e      	b.n	80049ea <_Balloc+0x6e>
 80049cc:	2221      	movs	r2, #33	; 0x21
 80049ce:	2104      	movs	r1, #4
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 fb55 	bl	8005080 <_calloc_r>
 80049d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d8:	60f0      	str	r0, [r6, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e4      	bne.n	80049aa <_Balloc+0x2e>
 80049e0:	2000      	movs	r0, #0
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	6802      	ldr	r2, [r0, #0]
 80049e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049ea:	2300      	movs	r3, #0
 80049ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049f0:	e7f7      	b.n	80049e2 <_Balloc+0x66>
 80049f2:	bf00      	nop
 80049f4:	08006199 	.word	0x08006199
 80049f8:	0800621c 	.word	0x0800621c

080049fc <_Bfree>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a00:	4605      	mov	r5, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	b976      	cbnz	r6, 8004a24 <_Bfree+0x28>
 8004a06:	2010      	movs	r0, #16
 8004a08:	f7ff ff94 	bl	8004934 <malloc>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6268      	str	r0, [r5, #36]	; 0x24
 8004a10:	b920      	cbnz	r0, 8004a1c <_Bfree+0x20>
 8004a12:	218a      	movs	r1, #138	; 0x8a
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <_Bfree+0x3c>)
 8004a16:	4809      	ldr	r0, [pc, #36]	; (8004a3c <_Bfree+0x40>)
 8004a18:	f000 fd8e 	bl	8005538 <__assert_func>
 8004a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a20:	6006      	str	r6, [r0, #0]
 8004a22:	60c6      	str	r6, [r0, #12]
 8004a24:	b13c      	cbz	r4, 8004a36 <_Bfree+0x3a>
 8004a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a28:	6862      	ldr	r2, [r4, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a30:	6021      	str	r1, [r4, #0]
 8004a32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	08006199 	.word	0x08006199
 8004a3c:	0800621c 	.word	0x0800621c

08004a40 <__multadd>:
 8004a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	4607      	mov	r7, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	461e      	mov	r6, r3
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	690d      	ldr	r5, [r1, #16]
 8004a4e:	f101 0c14 	add.w	ip, r1, #20
 8004a52:	f8dc 3000 	ldr.w	r3, [ip]
 8004a56:	3001      	adds	r0, #1
 8004a58:	b299      	uxth	r1, r3
 8004a5a:	fb02 6101 	mla	r1, r2, r1, r6
 8004a5e:	0c1e      	lsrs	r6, r3, #16
 8004a60:	0c0b      	lsrs	r3, r1, #16
 8004a62:	fb02 3306 	mla	r3, r2, r6, r3
 8004a66:	b289      	uxth	r1, r1
 8004a68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a6c:	4285      	cmp	r5, r0
 8004a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a72:	f84c 1b04 	str.w	r1, [ip], #4
 8004a76:	dcec      	bgt.n	8004a52 <__multadd+0x12>
 8004a78:	b30e      	cbz	r6, 8004abe <__multadd+0x7e>
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	dc19      	bgt.n	8004ab4 <__multadd+0x74>
 8004a80:	6861      	ldr	r1, [r4, #4]
 8004a82:	4638      	mov	r0, r7
 8004a84:	3101      	adds	r1, #1
 8004a86:	f7ff ff79 	bl	800497c <_Balloc>
 8004a8a:	4680      	mov	r8, r0
 8004a8c:	b928      	cbnz	r0, 8004a9a <__multadd+0x5a>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	21b5      	movs	r1, #181	; 0xb5
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <__multadd+0x84>)
 8004a94:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <__multadd+0x88>)
 8004a96:	f000 fd4f 	bl	8005538 <__assert_func>
 8004a9a:	6922      	ldr	r2, [r4, #16]
 8004a9c:	f104 010c 	add.w	r1, r4, #12
 8004aa0:	3202      	adds	r2, #2
 8004aa2:	0092      	lsls	r2, r2, #2
 8004aa4:	300c      	adds	r0, #12
 8004aa6:	f7ff ff5b 	bl	8004960 <memcpy>
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4638      	mov	r0, r7
 8004aae:	f7ff ffa5 	bl	80049fc <_Bfree>
 8004ab2:	4644      	mov	r4, r8
 8004ab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ab8:	3501      	adds	r5, #1
 8004aba:	615e      	str	r6, [r3, #20]
 8004abc:	6125      	str	r5, [r4, #16]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac4:	0800620b 	.word	0x0800620b
 8004ac8:	0800621c 	.word	0x0800621c

08004acc <__hi0bits>:
 8004acc:	0c02      	lsrs	r2, r0, #16
 8004ace:	0412      	lsls	r2, r2, #16
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	b9ca      	cbnz	r2, 8004b08 <__hi0bits+0x3c>
 8004ad4:	0403      	lsls	r3, r0, #16
 8004ad6:	2010      	movs	r0, #16
 8004ad8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004adc:	bf04      	itt	eq
 8004ade:	021b      	lsleq	r3, r3, #8
 8004ae0:	3008      	addeq	r0, #8
 8004ae2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ae6:	bf04      	itt	eq
 8004ae8:	011b      	lsleq	r3, r3, #4
 8004aea:	3004      	addeq	r0, #4
 8004aec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004af0:	bf04      	itt	eq
 8004af2:	009b      	lsleq	r3, r3, #2
 8004af4:	3002      	addeq	r0, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db05      	blt.n	8004b06 <__hi0bits+0x3a>
 8004afa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004afe:	f100 0001 	add.w	r0, r0, #1
 8004b02:	bf08      	it	eq
 8004b04:	2020      	moveq	r0, #32
 8004b06:	4770      	bx	lr
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e7e5      	b.n	8004ad8 <__hi0bits+0xc>

08004b0c <__lo0bits>:
 8004b0c:	6803      	ldr	r3, [r0, #0]
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f013 0007 	ands.w	r0, r3, #7
 8004b14:	d00b      	beq.n	8004b2e <__lo0bits+0x22>
 8004b16:	07d9      	lsls	r1, r3, #31
 8004b18:	d421      	bmi.n	8004b5e <__lo0bits+0x52>
 8004b1a:	0798      	lsls	r0, r3, #30
 8004b1c:	bf49      	itett	mi
 8004b1e:	085b      	lsrmi	r3, r3, #1
 8004b20:	089b      	lsrpl	r3, r3, #2
 8004b22:	2001      	movmi	r0, #1
 8004b24:	6013      	strmi	r3, [r2, #0]
 8004b26:	bf5c      	itt	pl
 8004b28:	2002      	movpl	r0, #2
 8004b2a:	6013      	strpl	r3, [r2, #0]
 8004b2c:	4770      	bx	lr
 8004b2e:	b299      	uxth	r1, r3
 8004b30:	b909      	cbnz	r1, 8004b36 <__lo0bits+0x2a>
 8004b32:	2010      	movs	r0, #16
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	b2d9      	uxtb	r1, r3
 8004b38:	b909      	cbnz	r1, 8004b3e <__lo0bits+0x32>
 8004b3a:	3008      	adds	r0, #8
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	0719      	lsls	r1, r3, #28
 8004b40:	bf04      	itt	eq
 8004b42:	091b      	lsreq	r3, r3, #4
 8004b44:	3004      	addeq	r0, #4
 8004b46:	0799      	lsls	r1, r3, #30
 8004b48:	bf04      	itt	eq
 8004b4a:	089b      	lsreq	r3, r3, #2
 8004b4c:	3002      	addeq	r0, #2
 8004b4e:	07d9      	lsls	r1, r3, #31
 8004b50:	d403      	bmi.n	8004b5a <__lo0bits+0x4e>
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	f100 0001 	add.w	r0, r0, #1
 8004b58:	d003      	beq.n	8004b62 <__lo0bits+0x56>
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	2000      	movs	r0, #0
 8004b60:	4770      	bx	lr
 8004b62:	2020      	movs	r0, #32
 8004b64:	4770      	bx	lr
	...

08004b68 <__i2b>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	f7ff ff05 	bl	800497c <_Balloc>
 8004b72:	4602      	mov	r2, r0
 8004b74:	b928      	cbnz	r0, 8004b82 <__i2b+0x1a>
 8004b76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <__i2b+0x24>)
 8004b7c:	4804      	ldr	r0, [pc, #16]	; (8004b90 <__i2b+0x28>)
 8004b7e:	f000 fcdb 	bl	8005538 <__assert_func>
 8004b82:	2301      	movs	r3, #1
 8004b84:	6144      	str	r4, [r0, #20]
 8004b86:	6103      	str	r3, [r0, #16]
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0800620b 	.word	0x0800620b
 8004b90:	0800621c 	.word	0x0800621c

08004b94 <__multiply>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	4691      	mov	r9, r2
 8004b9a:	690a      	ldr	r2, [r1, #16]
 8004b9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	bfbe      	ittt	lt
 8004ba6:	460b      	movlt	r3, r1
 8004ba8:	464c      	movlt	r4, r9
 8004baa:	4699      	movlt	r9, r3
 8004bac:	6927      	ldr	r7, [r4, #16]
 8004bae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004bb2:	68a3      	ldr	r3, [r4, #8]
 8004bb4:	6861      	ldr	r1, [r4, #4]
 8004bb6:	eb07 060a 	add.w	r6, r7, sl
 8004bba:	42b3      	cmp	r3, r6
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	bfb8      	it	lt
 8004bc0:	3101      	addlt	r1, #1
 8004bc2:	f7ff fedb 	bl	800497c <_Balloc>
 8004bc6:	b930      	cbnz	r0, 8004bd6 <__multiply+0x42>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	f240 115d 	movw	r1, #349	; 0x15d
 8004bce:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <__multiply+0x148>)
 8004bd0:	4843      	ldr	r0, [pc, #268]	; (8004ce0 <__multiply+0x14c>)
 8004bd2:	f000 fcb1 	bl	8005538 <__assert_func>
 8004bd6:	f100 0514 	add.w	r5, r0, #20
 8004bda:	462b      	mov	r3, r5
 8004bdc:	2200      	movs	r2, #0
 8004bde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004be2:	4543      	cmp	r3, r8
 8004be4:	d321      	bcc.n	8004c2a <__multiply+0x96>
 8004be6:	f104 0314 	add.w	r3, r4, #20
 8004bea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004bee:	f109 0314 	add.w	r3, r9, #20
 8004bf2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004bf6:	9202      	str	r2, [sp, #8]
 8004bf8:	1b3a      	subs	r2, r7, r4
 8004bfa:	3a15      	subs	r2, #21
 8004bfc:	f022 0203 	bic.w	r2, r2, #3
 8004c00:	3204      	adds	r2, #4
 8004c02:	f104 0115 	add.w	r1, r4, #21
 8004c06:	428f      	cmp	r7, r1
 8004c08:	bf38      	it	cc
 8004c0a:	2204      	movcc	r2, #4
 8004c0c:	9201      	str	r2, [sp, #4]
 8004c0e:	9a02      	ldr	r2, [sp, #8]
 8004c10:	9303      	str	r3, [sp, #12]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d80c      	bhi.n	8004c30 <__multiply+0x9c>
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	dd03      	ble.n	8004c22 <__multiply+0x8e>
 8004c1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d059      	beq.n	8004cd6 <__multiply+0x142>
 8004c22:	6106      	str	r6, [r0, #16]
 8004c24:	b005      	add	sp, #20
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	f843 2b04 	str.w	r2, [r3], #4
 8004c2e:	e7d8      	b.n	8004be2 <__multiply+0x4e>
 8004c30:	f8b3 a000 	ldrh.w	sl, [r3]
 8004c34:	f1ba 0f00 	cmp.w	sl, #0
 8004c38:	d023      	beq.n	8004c82 <__multiply+0xee>
 8004c3a:	46a9      	mov	r9, r5
 8004c3c:	f04f 0c00 	mov.w	ip, #0
 8004c40:	f104 0e14 	add.w	lr, r4, #20
 8004c44:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004c48:	f8d9 1000 	ldr.w	r1, [r9]
 8004c4c:	fa1f fb82 	uxth.w	fp, r2
 8004c50:	b289      	uxth	r1, r1
 8004c52:	fb0a 110b 	mla	r1, sl, fp, r1
 8004c56:	4461      	add	r1, ip
 8004c58:	f8d9 c000 	ldr.w	ip, [r9]
 8004c5c:	0c12      	lsrs	r2, r2, #16
 8004c5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004c62:	fb0a c202 	mla	r2, sl, r2, ip
 8004c66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004c6a:	b289      	uxth	r1, r1
 8004c6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c70:	4577      	cmp	r7, lr
 8004c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004c76:	f849 1b04 	str.w	r1, [r9], #4
 8004c7a:	d8e3      	bhi.n	8004c44 <__multiply+0xb0>
 8004c7c:	9a01      	ldr	r2, [sp, #4]
 8004c7e:	f845 c002 	str.w	ip, [r5, r2]
 8004c82:	9a03      	ldr	r2, [sp, #12]
 8004c84:	3304      	adds	r3, #4
 8004c86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c8a:	f1b9 0f00 	cmp.w	r9, #0
 8004c8e:	d020      	beq.n	8004cd2 <__multiply+0x13e>
 8004c90:	46ae      	mov	lr, r5
 8004c92:	f04f 0a00 	mov.w	sl, #0
 8004c96:	6829      	ldr	r1, [r5, #0]
 8004c98:	f104 0c14 	add.w	ip, r4, #20
 8004c9c:	f8bc b000 	ldrh.w	fp, [ip]
 8004ca0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004ca4:	b289      	uxth	r1, r1
 8004ca6:	fb09 220b 	mla	r2, r9, fp, r2
 8004caa:	4492      	add	sl, r2
 8004cac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004cb0:	f84e 1b04 	str.w	r1, [lr], #4
 8004cb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004cb8:	f8be 1000 	ldrh.w	r1, [lr]
 8004cbc:	0c12      	lsrs	r2, r2, #16
 8004cbe:	fb09 1102 	mla	r1, r9, r2, r1
 8004cc2:	4567      	cmp	r7, ip
 8004cc4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004cc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004ccc:	d8e6      	bhi.n	8004c9c <__multiply+0x108>
 8004cce:	9a01      	ldr	r2, [sp, #4]
 8004cd0:	50a9      	str	r1, [r5, r2]
 8004cd2:	3504      	adds	r5, #4
 8004cd4:	e79b      	b.n	8004c0e <__multiply+0x7a>
 8004cd6:	3e01      	subs	r6, #1
 8004cd8:	e79d      	b.n	8004c16 <__multiply+0x82>
 8004cda:	bf00      	nop
 8004cdc:	0800620b 	.word	0x0800620b
 8004ce0:	0800621c 	.word	0x0800621c

08004ce4 <__pow5mult>:
 8004ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	4615      	mov	r5, r2
 8004cea:	f012 0203 	ands.w	r2, r2, #3
 8004cee:	4606      	mov	r6, r0
 8004cf0:	460f      	mov	r7, r1
 8004cf2:	d007      	beq.n	8004d04 <__pow5mult+0x20>
 8004cf4:	4c25      	ldr	r4, [pc, #148]	; (8004d8c <__pow5mult+0xa8>)
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cfe:	f7ff fe9f 	bl	8004a40 <__multadd>
 8004d02:	4607      	mov	r7, r0
 8004d04:	10ad      	asrs	r5, r5, #2
 8004d06:	d03d      	beq.n	8004d84 <__pow5mult+0xa0>
 8004d08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004d0a:	b97c      	cbnz	r4, 8004d2c <__pow5mult+0x48>
 8004d0c:	2010      	movs	r0, #16
 8004d0e:	f7ff fe11 	bl	8004934 <malloc>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6270      	str	r0, [r6, #36]	; 0x24
 8004d16:	b928      	cbnz	r0, 8004d24 <__pow5mult+0x40>
 8004d18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004d1c:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <__pow5mult+0xac>)
 8004d1e:	481d      	ldr	r0, [pc, #116]	; (8004d94 <__pow5mult+0xb0>)
 8004d20:	f000 fc0a 	bl	8005538 <__assert_func>
 8004d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d28:	6004      	str	r4, [r0, #0]
 8004d2a:	60c4      	str	r4, [r0, #12]
 8004d2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004d30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d34:	b94c      	cbnz	r4, 8004d4a <__pow5mult+0x66>
 8004d36:	f240 2171 	movw	r1, #625	; 0x271
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f7ff ff14 	bl	8004b68 <__i2b>
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d48:	6003      	str	r3, [r0, #0]
 8004d4a:	f04f 0900 	mov.w	r9, #0
 8004d4e:	07eb      	lsls	r3, r5, #31
 8004d50:	d50a      	bpl.n	8004d68 <__pow5mult+0x84>
 8004d52:	4639      	mov	r1, r7
 8004d54:	4622      	mov	r2, r4
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7ff ff1c 	bl	8004b94 <__multiply>
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	4639      	mov	r1, r7
 8004d60:	4630      	mov	r0, r6
 8004d62:	f7ff fe4b 	bl	80049fc <_Bfree>
 8004d66:	4647      	mov	r7, r8
 8004d68:	106d      	asrs	r5, r5, #1
 8004d6a:	d00b      	beq.n	8004d84 <__pow5mult+0xa0>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	b938      	cbnz	r0, 8004d80 <__pow5mult+0x9c>
 8004d70:	4622      	mov	r2, r4
 8004d72:	4621      	mov	r1, r4
 8004d74:	4630      	mov	r0, r6
 8004d76:	f7ff ff0d 	bl	8004b94 <__multiply>
 8004d7a:	6020      	str	r0, [r4, #0]
 8004d7c:	f8c0 9000 	str.w	r9, [r0]
 8004d80:	4604      	mov	r4, r0
 8004d82:	e7e4      	b.n	8004d4e <__pow5mult+0x6a>
 8004d84:	4638      	mov	r0, r7
 8004d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d8a:	bf00      	nop
 8004d8c:	08006368 	.word	0x08006368
 8004d90:	08006199 	.word	0x08006199
 8004d94:	0800621c 	.word	0x0800621c

08004d98 <__lshift>:
 8004d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	4607      	mov	r7, r0
 8004da0:	4691      	mov	r9, r2
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	6849      	ldr	r1, [r1, #4]
 8004da6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004db0:	f108 0601 	add.w	r6, r8, #1
 8004db4:	42b3      	cmp	r3, r6
 8004db6:	db0b      	blt.n	8004dd0 <__lshift+0x38>
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff fddf 	bl	800497c <_Balloc>
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	b948      	cbnz	r0, 8004dd6 <__lshift+0x3e>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004dc8:	4b29      	ldr	r3, [pc, #164]	; (8004e70 <__lshift+0xd8>)
 8004dca:	482a      	ldr	r0, [pc, #168]	; (8004e74 <__lshift+0xdc>)
 8004dcc:	f000 fbb4 	bl	8005538 <__assert_func>
 8004dd0:	3101      	adds	r1, #1
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	e7ee      	b.n	8004db4 <__lshift+0x1c>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f100 0114 	add.w	r1, r0, #20
 8004ddc:	f100 0210 	add.w	r2, r0, #16
 8004de0:	4618      	mov	r0, r3
 8004de2:	4553      	cmp	r3, sl
 8004de4:	db37      	blt.n	8004e56 <__lshift+0xbe>
 8004de6:	6920      	ldr	r0, [r4, #16]
 8004de8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004dec:	f104 0314 	add.w	r3, r4, #20
 8004df0:	f019 091f 	ands.w	r9, r9, #31
 8004df4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004df8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004dfc:	d02f      	beq.n	8004e5e <__lshift+0xc6>
 8004dfe:	468a      	mov	sl, r1
 8004e00:	f04f 0c00 	mov.w	ip, #0
 8004e04:	f1c9 0e20 	rsb	lr, r9, #32
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	fa02 f209 	lsl.w	r2, r2, r9
 8004e0e:	ea42 020c 	orr.w	r2, r2, ip
 8004e12:	f84a 2b04 	str.w	r2, [sl], #4
 8004e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004e20:	d8f2      	bhi.n	8004e08 <__lshift+0x70>
 8004e22:	1b03      	subs	r3, r0, r4
 8004e24:	3b15      	subs	r3, #21
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	f104 0215 	add.w	r2, r4, #21
 8004e30:	4290      	cmp	r0, r2
 8004e32:	bf38      	it	cc
 8004e34:	2304      	movcc	r3, #4
 8004e36:	f841 c003 	str.w	ip, [r1, r3]
 8004e3a:	f1bc 0f00 	cmp.w	ip, #0
 8004e3e:	d001      	beq.n	8004e44 <__lshift+0xac>
 8004e40:	f108 0602 	add.w	r6, r8, #2
 8004e44:	3e01      	subs	r6, #1
 8004e46:	4638      	mov	r0, r7
 8004e48:	4621      	mov	r1, r4
 8004e4a:	612e      	str	r6, [r5, #16]
 8004e4c:	f7ff fdd6 	bl	80049fc <_Bfree>
 8004e50:	4628      	mov	r0, r5
 8004e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e56:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	e7c1      	b.n	8004de2 <__lshift+0x4a>
 8004e5e:	3904      	subs	r1, #4
 8004e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e64:	4298      	cmp	r0, r3
 8004e66:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e6a:	d8f9      	bhi.n	8004e60 <__lshift+0xc8>
 8004e6c:	e7ea      	b.n	8004e44 <__lshift+0xac>
 8004e6e:	bf00      	nop
 8004e70:	0800620b 	.word	0x0800620b
 8004e74:	0800621c 	.word	0x0800621c

08004e78 <__mcmp>:
 8004e78:	4603      	mov	r3, r0
 8004e7a:	690a      	ldr	r2, [r1, #16]
 8004e7c:	6900      	ldr	r0, [r0, #16]
 8004e7e:	b530      	push	{r4, r5, lr}
 8004e80:	1a80      	subs	r0, r0, r2
 8004e82:	d10d      	bne.n	8004ea0 <__mcmp+0x28>
 8004e84:	3314      	adds	r3, #20
 8004e86:	3114      	adds	r1, #20
 8004e88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e98:	4295      	cmp	r5, r2
 8004e9a:	d002      	beq.n	8004ea2 <__mcmp+0x2a>
 8004e9c:	d304      	bcc.n	8004ea8 <__mcmp+0x30>
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	bd30      	pop	{r4, r5, pc}
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	d3f4      	bcc.n	8004e90 <__mcmp+0x18>
 8004ea6:	e7fb      	b.n	8004ea0 <__mcmp+0x28>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	e7f8      	b.n	8004ea0 <__mcmp+0x28>
	...

08004eb0 <__mdiff>:
 8004eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	460d      	mov	r5, r1
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4628      	mov	r0, r5
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	f7ff ffdb 	bl	8004e78 <__mcmp>
 8004ec2:	1e06      	subs	r6, r0, #0
 8004ec4:	d111      	bne.n	8004eea <__mdiff+0x3a>
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f7ff fd57 	bl	800497c <_Balloc>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	b928      	cbnz	r0, 8004ede <__mdiff+0x2e>
 8004ed2:	f240 2132 	movw	r1, #562	; 0x232
 8004ed6:	4b3a      	ldr	r3, [pc, #232]	; (8004fc0 <__mdiff+0x110>)
 8004ed8:	483a      	ldr	r0, [pc, #232]	; (8004fc4 <__mdiff+0x114>)
 8004eda:	f000 fb2d 	bl	8005538 <__assert_func>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eea:	bfa4      	itt	ge
 8004eec:	4623      	movge	r3, r4
 8004eee:	462c      	movge	r4, r5
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	6861      	ldr	r1, [r4, #4]
 8004ef4:	bfa6      	itte	ge
 8004ef6:	461d      	movge	r5, r3
 8004ef8:	2600      	movge	r6, #0
 8004efa:	2601      	movlt	r6, #1
 8004efc:	f7ff fd3e 	bl	800497c <_Balloc>
 8004f00:	4602      	mov	r2, r0
 8004f02:	b918      	cbnz	r0, 8004f0c <__mdiff+0x5c>
 8004f04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <__mdiff+0x110>)
 8004f0a:	e7e5      	b.n	8004ed8 <__mdiff+0x28>
 8004f0c:	f102 0814 	add.w	r8, r2, #20
 8004f10:	46c2      	mov	sl, r8
 8004f12:	f04f 0c00 	mov.w	ip, #0
 8004f16:	6927      	ldr	r7, [r4, #16]
 8004f18:	60c6      	str	r6, [r0, #12]
 8004f1a:	692e      	ldr	r6, [r5, #16]
 8004f1c:	f104 0014 	add.w	r0, r4, #20
 8004f20:	f105 0914 	add.w	r9, r5, #20
 8004f24:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004f28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004f2c:	3410      	adds	r4, #16
 8004f2e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004f32:	f859 3b04 	ldr.w	r3, [r9], #4
 8004f36:	fa1f f18b 	uxth.w	r1, fp
 8004f3a:	448c      	add	ip, r1
 8004f3c:	b299      	uxth	r1, r3
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	ebac 0101 	sub.w	r1, ip, r1
 8004f44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004f48:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004f4c:	b289      	uxth	r1, r1
 8004f4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004f52:	454e      	cmp	r6, r9
 8004f54:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004f58:	f84a 3b04 	str.w	r3, [sl], #4
 8004f5c:	d8e7      	bhi.n	8004f2e <__mdiff+0x7e>
 8004f5e:	1b73      	subs	r3, r6, r5
 8004f60:	3b15      	subs	r3, #21
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	3515      	adds	r5, #21
 8004f68:	3304      	adds	r3, #4
 8004f6a:	42ae      	cmp	r6, r5
 8004f6c:	bf38      	it	cc
 8004f6e:	2304      	movcc	r3, #4
 8004f70:	4418      	add	r0, r3
 8004f72:	4443      	add	r3, r8
 8004f74:	461e      	mov	r6, r3
 8004f76:	4605      	mov	r5, r0
 8004f78:	4575      	cmp	r5, lr
 8004f7a:	d30e      	bcc.n	8004f9a <__mdiff+0xea>
 8004f7c:	f10e 0103 	add.w	r1, lr, #3
 8004f80:	1a09      	subs	r1, r1, r0
 8004f82:	f021 0103 	bic.w	r1, r1, #3
 8004f86:	3803      	subs	r0, #3
 8004f88:	4586      	cmp	lr, r0
 8004f8a:	bf38      	it	cc
 8004f8c:	2100      	movcc	r1, #0
 8004f8e:	4419      	add	r1, r3
 8004f90:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004f94:	b18b      	cbz	r3, 8004fba <__mdiff+0x10a>
 8004f96:	6117      	str	r7, [r2, #16]
 8004f98:	e7a4      	b.n	8004ee4 <__mdiff+0x34>
 8004f9a:	f855 8b04 	ldr.w	r8, [r5], #4
 8004f9e:	fa1f f188 	uxth.w	r1, r8
 8004fa2:	4461      	add	r1, ip
 8004fa4:	140c      	asrs	r4, r1, #16
 8004fa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004faa:	b289      	uxth	r1, r1
 8004fac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004fb0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004fb4:	f846 1b04 	str.w	r1, [r6], #4
 8004fb8:	e7de      	b.n	8004f78 <__mdiff+0xc8>
 8004fba:	3f01      	subs	r7, #1
 8004fbc:	e7e8      	b.n	8004f90 <__mdiff+0xe0>
 8004fbe:	bf00      	nop
 8004fc0:	0800620b 	.word	0x0800620b
 8004fc4:	0800621c 	.word	0x0800621c

08004fc8 <__d2b>:
 8004fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004fcc:	2101      	movs	r1, #1
 8004fce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004fd2:	4690      	mov	r8, r2
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	f7ff fcd1 	bl	800497c <_Balloc>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	b930      	cbnz	r0, 8004fec <__d2b+0x24>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	f240 310a 	movw	r1, #778	; 0x30a
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <__d2b+0xb0>)
 8004fe6:	4825      	ldr	r0, [pc, #148]	; (800507c <__d2b+0xb4>)
 8004fe8:	f000 faa6 	bl	8005538 <__assert_func>
 8004fec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004ff0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004ff4:	bb2d      	cbnz	r5, 8005042 <__d2b+0x7a>
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	f1b8 0300 	subs.w	r3, r8, #0
 8004ffc:	d026      	beq.n	800504c <__d2b+0x84>
 8004ffe:	4668      	mov	r0, sp
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	f7ff fd83 	bl	8004b0c <__lo0bits>
 8005006:	9900      	ldr	r1, [sp, #0]
 8005008:	b1f0      	cbz	r0, 8005048 <__d2b+0x80>
 800500a:	9a01      	ldr	r2, [sp, #4]
 800500c:	f1c0 0320 	rsb	r3, r0, #32
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	430b      	orrs	r3, r1
 8005016:	40c2      	lsrs	r2, r0
 8005018:	6163      	str	r3, [r4, #20]
 800501a:	9201      	str	r2, [sp, #4]
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	bf14      	ite	ne
 8005022:	2102      	movne	r1, #2
 8005024:	2101      	moveq	r1, #1
 8005026:	61a3      	str	r3, [r4, #24]
 8005028:	6121      	str	r1, [r4, #16]
 800502a:	b1c5      	cbz	r5, 800505e <__d2b+0x96>
 800502c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005030:	4405      	add	r5, r0
 8005032:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005036:	603d      	str	r5, [r7, #0]
 8005038:	6030      	str	r0, [r6, #0]
 800503a:	4620      	mov	r0, r4
 800503c:	b002      	add	sp, #8
 800503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	e7d6      	b.n	8004ff6 <__d2b+0x2e>
 8005048:	6161      	str	r1, [r4, #20]
 800504a:	e7e7      	b.n	800501c <__d2b+0x54>
 800504c:	a801      	add	r0, sp, #4
 800504e:	f7ff fd5d 	bl	8004b0c <__lo0bits>
 8005052:	2101      	movs	r1, #1
 8005054:	9b01      	ldr	r3, [sp, #4]
 8005056:	6121      	str	r1, [r4, #16]
 8005058:	6163      	str	r3, [r4, #20]
 800505a:	3020      	adds	r0, #32
 800505c:	e7e5      	b.n	800502a <__d2b+0x62>
 800505e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005062:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005066:	6038      	str	r0, [r7, #0]
 8005068:	6918      	ldr	r0, [r3, #16]
 800506a:	f7ff fd2f 	bl	8004acc <__hi0bits>
 800506e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005072:	6031      	str	r1, [r6, #0]
 8005074:	e7e1      	b.n	800503a <__d2b+0x72>
 8005076:	bf00      	nop
 8005078:	0800620b 	.word	0x0800620b
 800507c:	0800621c 	.word	0x0800621c

08005080 <_calloc_r>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	fba1 5402 	umull	r5, r4, r1, r2
 8005086:	b934      	cbnz	r4, 8005096 <_calloc_r+0x16>
 8005088:	4629      	mov	r1, r5
 800508a:	f000 f875 	bl	8005178 <_malloc_r>
 800508e:	4606      	mov	r6, r0
 8005090:	b928      	cbnz	r0, 800509e <_calloc_r+0x1e>
 8005092:	4630      	mov	r0, r6
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	220c      	movs	r2, #12
 8005098:	2600      	movs	r6, #0
 800509a:	6002      	str	r2, [r0, #0]
 800509c:	e7f9      	b.n	8005092 <_calloc_r+0x12>
 800509e:	462a      	mov	r2, r5
 80050a0:	4621      	mov	r1, r4
 80050a2:	f7fe f941 	bl	8003328 <memset>
 80050a6:	e7f4      	b.n	8005092 <_calloc_r+0x12>

080050a8 <_free_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4605      	mov	r5, r0
 80050ac:	2900      	cmp	r1, #0
 80050ae:	d040      	beq.n	8005132 <_free_r+0x8a>
 80050b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b4:	1f0c      	subs	r4, r1, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfb8      	it	lt
 80050ba:	18e4      	addlt	r4, r4, r3
 80050bc:	f000 fa98 	bl	80055f0 <__malloc_lock>
 80050c0:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <_free_r+0x8c>)
 80050c2:	6813      	ldr	r3, [r2, #0]
 80050c4:	b933      	cbnz	r3, 80050d4 <_free_r+0x2c>
 80050c6:	6063      	str	r3, [r4, #4]
 80050c8:	6014      	str	r4, [r2, #0]
 80050ca:	4628      	mov	r0, r5
 80050cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050d0:	f000 ba94 	b.w	80055fc <__malloc_unlock>
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d908      	bls.n	80050ea <_free_r+0x42>
 80050d8:	6820      	ldr	r0, [r4, #0]
 80050da:	1821      	adds	r1, r4, r0
 80050dc:	428b      	cmp	r3, r1
 80050de:	bf01      	itttt	eq
 80050e0:	6819      	ldreq	r1, [r3, #0]
 80050e2:	685b      	ldreq	r3, [r3, #4]
 80050e4:	1809      	addeq	r1, r1, r0
 80050e6:	6021      	streq	r1, [r4, #0]
 80050e8:	e7ed      	b.n	80050c6 <_free_r+0x1e>
 80050ea:	461a      	mov	r2, r3
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	b10b      	cbz	r3, 80050f4 <_free_r+0x4c>
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	d9fa      	bls.n	80050ea <_free_r+0x42>
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	1850      	adds	r0, r2, r1
 80050f8:	42a0      	cmp	r0, r4
 80050fa:	d10b      	bne.n	8005114 <_free_r+0x6c>
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	4401      	add	r1, r0
 8005100:	1850      	adds	r0, r2, r1
 8005102:	4283      	cmp	r3, r0
 8005104:	6011      	str	r1, [r2, #0]
 8005106:	d1e0      	bne.n	80050ca <_free_r+0x22>
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4401      	add	r1, r0
 800510e:	6011      	str	r1, [r2, #0]
 8005110:	6053      	str	r3, [r2, #4]
 8005112:	e7da      	b.n	80050ca <_free_r+0x22>
 8005114:	d902      	bls.n	800511c <_free_r+0x74>
 8005116:	230c      	movs	r3, #12
 8005118:	602b      	str	r3, [r5, #0]
 800511a:	e7d6      	b.n	80050ca <_free_r+0x22>
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	1821      	adds	r1, r4, r0
 8005120:	428b      	cmp	r3, r1
 8005122:	bf01      	itttt	eq
 8005124:	6819      	ldreq	r1, [r3, #0]
 8005126:	685b      	ldreq	r3, [r3, #4]
 8005128:	1809      	addeq	r1, r1, r0
 800512a:	6021      	streq	r1, [r4, #0]
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	6054      	str	r4, [r2, #4]
 8005130:	e7cb      	b.n	80050ca <_free_r+0x22>
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000364 	.word	0x20000364

08005138 <sbrk_aligned>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4e0e      	ldr	r6, [pc, #56]	; (8005174 <sbrk_aligned+0x3c>)
 800513c:	460c      	mov	r4, r1
 800513e:	6831      	ldr	r1, [r6, #0]
 8005140:	4605      	mov	r5, r0
 8005142:	b911      	cbnz	r1, 800514a <sbrk_aligned+0x12>
 8005144:	f000 f9e8 	bl	8005518 <_sbrk_r>
 8005148:	6030      	str	r0, [r6, #0]
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 f9e3 	bl	8005518 <_sbrk_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	d00a      	beq.n	800516c <sbrk_aligned+0x34>
 8005156:	1cc4      	adds	r4, r0, #3
 8005158:	f024 0403 	bic.w	r4, r4, #3
 800515c:	42a0      	cmp	r0, r4
 800515e:	d007      	beq.n	8005170 <sbrk_aligned+0x38>
 8005160:	1a21      	subs	r1, r4, r0
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f9d8 	bl	8005518 <_sbrk_r>
 8005168:	3001      	adds	r0, #1
 800516a:	d101      	bne.n	8005170 <sbrk_aligned+0x38>
 800516c:	f04f 34ff 	mov.w	r4, #4294967295
 8005170:	4620      	mov	r0, r4
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	20000368 	.word	0x20000368

08005178 <_malloc_r>:
 8005178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517c:	1ccd      	adds	r5, r1, #3
 800517e:	f025 0503 	bic.w	r5, r5, #3
 8005182:	3508      	adds	r5, #8
 8005184:	2d0c      	cmp	r5, #12
 8005186:	bf38      	it	cc
 8005188:	250c      	movcc	r5, #12
 800518a:	2d00      	cmp	r5, #0
 800518c:	4607      	mov	r7, r0
 800518e:	db01      	blt.n	8005194 <_malloc_r+0x1c>
 8005190:	42a9      	cmp	r1, r5
 8005192:	d905      	bls.n	80051a0 <_malloc_r+0x28>
 8005194:	230c      	movs	r3, #12
 8005196:	2600      	movs	r6, #0
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4630      	mov	r0, r6
 800519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a0:	4e2e      	ldr	r6, [pc, #184]	; (800525c <_malloc_r+0xe4>)
 80051a2:	f000 fa25 	bl	80055f0 <__malloc_lock>
 80051a6:	6833      	ldr	r3, [r6, #0]
 80051a8:	461c      	mov	r4, r3
 80051aa:	bb34      	cbnz	r4, 80051fa <_malloc_r+0x82>
 80051ac:	4629      	mov	r1, r5
 80051ae:	4638      	mov	r0, r7
 80051b0:	f7ff ffc2 	bl	8005138 <sbrk_aligned>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	4604      	mov	r4, r0
 80051b8:	d14d      	bne.n	8005256 <_malloc_r+0xde>
 80051ba:	6834      	ldr	r4, [r6, #0]
 80051bc:	4626      	mov	r6, r4
 80051be:	2e00      	cmp	r6, #0
 80051c0:	d140      	bne.n	8005244 <_malloc_r+0xcc>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	4631      	mov	r1, r6
 80051c6:	4638      	mov	r0, r7
 80051c8:	eb04 0803 	add.w	r8, r4, r3
 80051cc:	f000 f9a4 	bl	8005518 <_sbrk_r>
 80051d0:	4580      	cmp	r8, r0
 80051d2:	d13a      	bne.n	800524a <_malloc_r+0xd2>
 80051d4:	6821      	ldr	r1, [r4, #0]
 80051d6:	3503      	adds	r5, #3
 80051d8:	1a6d      	subs	r5, r5, r1
 80051da:	f025 0503 	bic.w	r5, r5, #3
 80051de:	3508      	adds	r5, #8
 80051e0:	2d0c      	cmp	r5, #12
 80051e2:	bf38      	it	cc
 80051e4:	250c      	movcc	r5, #12
 80051e6:	4638      	mov	r0, r7
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7ff ffa5 	bl	8005138 <sbrk_aligned>
 80051ee:	3001      	adds	r0, #1
 80051f0:	d02b      	beq.n	800524a <_malloc_r+0xd2>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	442b      	add	r3, r5
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	e00e      	b.n	8005218 <_malloc_r+0xa0>
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	1b52      	subs	r2, r2, r5
 80051fe:	d41e      	bmi.n	800523e <_malloc_r+0xc6>
 8005200:	2a0b      	cmp	r2, #11
 8005202:	d916      	bls.n	8005232 <_malloc_r+0xba>
 8005204:	1961      	adds	r1, r4, r5
 8005206:	42a3      	cmp	r3, r4
 8005208:	6025      	str	r5, [r4, #0]
 800520a:	bf18      	it	ne
 800520c:	6059      	strne	r1, [r3, #4]
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	bf08      	it	eq
 8005212:	6031      	streq	r1, [r6, #0]
 8005214:	5162      	str	r2, [r4, r5]
 8005216:	604b      	str	r3, [r1, #4]
 8005218:	4638      	mov	r0, r7
 800521a:	f104 060b 	add.w	r6, r4, #11
 800521e:	f000 f9ed 	bl	80055fc <__malloc_unlock>
 8005222:	f026 0607 	bic.w	r6, r6, #7
 8005226:	1d23      	adds	r3, r4, #4
 8005228:	1af2      	subs	r2, r6, r3
 800522a:	d0b6      	beq.n	800519a <_malloc_r+0x22>
 800522c:	1b9b      	subs	r3, r3, r6
 800522e:	50a3      	str	r3, [r4, r2]
 8005230:	e7b3      	b.n	800519a <_malloc_r+0x22>
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	42a3      	cmp	r3, r4
 8005236:	bf0c      	ite	eq
 8005238:	6032      	streq	r2, [r6, #0]
 800523a:	605a      	strne	r2, [r3, #4]
 800523c:	e7ec      	b.n	8005218 <_malloc_r+0xa0>
 800523e:	4623      	mov	r3, r4
 8005240:	6864      	ldr	r4, [r4, #4]
 8005242:	e7b2      	b.n	80051aa <_malloc_r+0x32>
 8005244:	4634      	mov	r4, r6
 8005246:	6876      	ldr	r6, [r6, #4]
 8005248:	e7b9      	b.n	80051be <_malloc_r+0x46>
 800524a:	230c      	movs	r3, #12
 800524c:	4638      	mov	r0, r7
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	f000 f9d4 	bl	80055fc <__malloc_unlock>
 8005254:	e7a1      	b.n	800519a <_malloc_r+0x22>
 8005256:	6025      	str	r5, [r4, #0]
 8005258:	e7de      	b.n	8005218 <_malloc_r+0xa0>
 800525a:	bf00      	nop
 800525c:	20000364 	.word	0x20000364

08005260 <__ssputs_r>:
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	688e      	ldr	r6, [r1, #8]
 8005266:	4682      	mov	sl, r0
 8005268:	429e      	cmp	r6, r3
 800526a:	460c      	mov	r4, r1
 800526c:	4690      	mov	r8, r2
 800526e:	461f      	mov	r7, r3
 8005270:	d838      	bhi.n	80052e4 <__ssputs_r+0x84>
 8005272:	898a      	ldrh	r2, [r1, #12]
 8005274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005278:	d032      	beq.n	80052e0 <__ssputs_r+0x80>
 800527a:	6825      	ldr	r5, [r4, #0]
 800527c:	6909      	ldr	r1, [r1, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	eba5 0901 	sub.w	r9, r5, r1
 8005284:	6965      	ldr	r5, [r4, #20]
 8005286:	444b      	add	r3, r9
 8005288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800528c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005290:	106d      	asrs	r5, r5, #1
 8005292:	429d      	cmp	r5, r3
 8005294:	bf38      	it	cc
 8005296:	461d      	movcc	r5, r3
 8005298:	0553      	lsls	r3, r2, #21
 800529a:	d531      	bpl.n	8005300 <__ssputs_r+0xa0>
 800529c:	4629      	mov	r1, r5
 800529e:	f7ff ff6b 	bl	8005178 <_malloc_r>
 80052a2:	4606      	mov	r6, r0
 80052a4:	b950      	cbnz	r0, 80052bc <__ssputs_r+0x5c>
 80052a6:	230c      	movs	r3, #12
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	f8ca 3000 	str.w	r3, [sl]
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	464a      	mov	r2, r9
 80052be:	6921      	ldr	r1, [r4, #16]
 80052c0:	f7ff fb4e 	bl	8004960 <memcpy>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ce:	81a3      	strh	r3, [r4, #12]
 80052d0:	6126      	str	r6, [r4, #16]
 80052d2:	444e      	add	r6, r9
 80052d4:	6026      	str	r6, [r4, #0]
 80052d6:	463e      	mov	r6, r7
 80052d8:	6165      	str	r5, [r4, #20]
 80052da:	eba5 0509 	sub.w	r5, r5, r9
 80052de:	60a5      	str	r5, [r4, #8]
 80052e0:	42be      	cmp	r6, r7
 80052e2:	d900      	bls.n	80052e6 <__ssputs_r+0x86>
 80052e4:	463e      	mov	r6, r7
 80052e6:	4632      	mov	r2, r6
 80052e8:	4641      	mov	r1, r8
 80052ea:	6820      	ldr	r0, [r4, #0]
 80052ec:	f000 f966 	bl	80055bc <memmove>
 80052f0:	68a3      	ldr	r3, [r4, #8]
 80052f2:	2000      	movs	r0, #0
 80052f4:	1b9b      	subs	r3, r3, r6
 80052f6:	60a3      	str	r3, [r4, #8]
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	4433      	add	r3, r6
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	e7db      	b.n	80052b8 <__ssputs_r+0x58>
 8005300:	462a      	mov	r2, r5
 8005302:	f000 f981 	bl	8005608 <_realloc_r>
 8005306:	4606      	mov	r6, r0
 8005308:	2800      	cmp	r0, #0
 800530a:	d1e1      	bne.n	80052d0 <__ssputs_r+0x70>
 800530c:	4650      	mov	r0, sl
 800530e:	6921      	ldr	r1, [r4, #16]
 8005310:	f7ff feca 	bl	80050a8 <_free_r>
 8005314:	e7c7      	b.n	80052a6 <__ssputs_r+0x46>
	...

08005318 <_svfiprintf_r>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	4698      	mov	r8, r3
 800531e:	898b      	ldrh	r3, [r1, #12]
 8005320:	4607      	mov	r7, r0
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	460d      	mov	r5, r1
 8005326:	4614      	mov	r4, r2
 8005328:	b09d      	sub	sp, #116	; 0x74
 800532a:	d50e      	bpl.n	800534a <_svfiprintf_r+0x32>
 800532c:	690b      	ldr	r3, [r1, #16]
 800532e:	b963      	cbnz	r3, 800534a <_svfiprintf_r+0x32>
 8005330:	2140      	movs	r1, #64	; 0x40
 8005332:	f7ff ff21 	bl	8005178 <_malloc_r>
 8005336:	6028      	str	r0, [r5, #0]
 8005338:	6128      	str	r0, [r5, #16]
 800533a:	b920      	cbnz	r0, 8005346 <_svfiprintf_r+0x2e>
 800533c:	230c      	movs	r3, #12
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	e0d1      	b.n	80054ea <_svfiprintf_r+0x1d2>
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	616b      	str	r3, [r5, #20]
 800534a:	2300      	movs	r3, #0
 800534c:	9309      	str	r3, [sp, #36]	; 0x24
 800534e:	2320      	movs	r3, #32
 8005350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005354:	2330      	movs	r3, #48	; 0x30
 8005356:	f04f 0901 	mov.w	r9, #1
 800535a:	f8cd 800c 	str.w	r8, [sp, #12]
 800535e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005504 <_svfiprintf_r+0x1ec>
 8005362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005366:	4623      	mov	r3, r4
 8005368:	469a      	mov	sl, r3
 800536a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800536e:	b10a      	cbz	r2, 8005374 <_svfiprintf_r+0x5c>
 8005370:	2a25      	cmp	r2, #37	; 0x25
 8005372:	d1f9      	bne.n	8005368 <_svfiprintf_r+0x50>
 8005374:	ebba 0b04 	subs.w	fp, sl, r4
 8005378:	d00b      	beq.n	8005392 <_svfiprintf_r+0x7a>
 800537a:	465b      	mov	r3, fp
 800537c:	4622      	mov	r2, r4
 800537e:	4629      	mov	r1, r5
 8005380:	4638      	mov	r0, r7
 8005382:	f7ff ff6d 	bl	8005260 <__ssputs_r>
 8005386:	3001      	adds	r0, #1
 8005388:	f000 80aa 	beq.w	80054e0 <_svfiprintf_r+0x1c8>
 800538c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800538e:	445a      	add	r2, fp
 8005390:	9209      	str	r2, [sp, #36]	; 0x24
 8005392:	f89a 3000 	ldrb.w	r3, [sl]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80a2 	beq.w	80054e0 <_svfiprintf_r+0x1c8>
 800539c:	2300      	movs	r3, #0
 800539e:	f04f 32ff 	mov.w	r2, #4294967295
 80053a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a6:	f10a 0a01 	add.w	sl, sl, #1
 80053aa:	9304      	str	r3, [sp, #16]
 80053ac:	9307      	str	r3, [sp, #28]
 80053ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053b2:	931a      	str	r3, [sp, #104]	; 0x68
 80053b4:	4654      	mov	r4, sl
 80053b6:	2205      	movs	r2, #5
 80053b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053bc:	4851      	ldr	r0, [pc, #324]	; (8005504 <_svfiprintf_r+0x1ec>)
 80053be:	f7ff fac1 	bl	8004944 <memchr>
 80053c2:	9a04      	ldr	r2, [sp, #16]
 80053c4:	b9d8      	cbnz	r0, 80053fe <_svfiprintf_r+0xe6>
 80053c6:	06d0      	lsls	r0, r2, #27
 80053c8:	bf44      	itt	mi
 80053ca:	2320      	movmi	r3, #32
 80053cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053d0:	0711      	lsls	r1, r2, #28
 80053d2:	bf44      	itt	mi
 80053d4:	232b      	movmi	r3, #43	; 0x2b
 80053d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053da:	f89a 3000 	ldrb.w	r3, [sl]
 80053de:	2b2a      	cmp	r3, #42	; 0x2a
 80053e0:	d015      	beq.n	800540e <_svfiprintf_r+0xf6>
 80053e2:	4654      	mov	r4, sl
 80053e4:	2000      	movs	r0, #0
 80053e6:	f04f 0c0a 	mov.w	ip, #10
 80053ea:	9a07      	ldr	r2, [sp, #28]
 80053ec:	4621      	mov	r1, r4
 80053ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053f2:	3b30      	subs	r3, #48	; 0x30
 80053f4:	2b09      	cmp	r3, #9
 80053f6:	d94e      	bls.n	8005496 <_svfiprintf_r+0x17e>
 80053f8:	b1b0      	cbz	r0, 8005428 <_svfiprintf_r+0x110>
 80053fa:	9207      	str	r2, [sp, #28]
 80053fc:	e014      	b.n	8005428 <_svfiprintf_r+0x110>
 80053fe:	eba0 0308 	sub.w	r3, r0, r8
 8005402:	fa09 f303 	lsl.w	r3, r9, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	46a2      	mov	sl, r4
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	e7d2      	b.n	80053b4 <_svfiprintf_r+0x9c>
 800540e:	9b03      	ldr	r3, [sp, #12]
 8005410:	1d19      	adds	r1, r3, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	9103      	str	r1, [sp, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfbb      	ittet	lt
 800541a:	425b      	neglt	r3, r3
 800541c:	f042 0202 	orrlt.w	r2, r2, #2
 8005420:	9307      	strge	r3, [sp, #28]
 8005422:	9307      	strlt	r3, [sp, #28]
 8005424:	bfb8      	it	lt
 8005426:	9204      	strlt	r2, [sp, #16]
 8005428:	7823      	ldrb	r3, [r4, #0]
 800542a:	2b2e      	cmp	r3, #46	; 0x2e
 800542c:	d10c      	bne.n	8005448 <_svfiprintf_r+0x130>
 800542e:	7863      	ldrb	r3, [r4, #1]
 8005430:	2b2a      	cmp	r3, #42	; 0x2a
 8005432:	d135      	bne.n	80054a0 <_svfiprintf_r+0x188>
 8005434:	9b03      	ldr	r3, [sp, #12]
 8005436:	3402      	adds	r4, #2
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9203      	str	r2, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfb8      	it	lt
 8005442:	f04f 33ff 	movlt.w	r3, #4294967295
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005508 <_svfiprintf_r+0x1f0>
 800544c:	2203      	movs	r2, #3
 800544e:	4650      	mov	r0, sl
 8005450:	7821      	ldrb	r1, [r4, #0]
 8005452:	f7ff fa77 	bl	8004944 <memchr>
 8005456:	b140      	cbz	r0, 800546a <_svfiprintf_r+0x152>
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	eba0 000a 	sub.w	r0, r0, sl
 800545e:	fa03 f000 	lsl.w	r0, r3, r0
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	3401      	adds	r4, #1
 8005466:	4303      	orrs	r3, r0
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546e:	2206      	movs	r2, #6
 8005470:	4826      	ldr	r0, [pc, #152]	; (800550c <_svfiprintf_r+0x1f4>)
 8005472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005476:	f7ff fa65 	bl	8004944 <memchr>
 800547a:	2800      	cmp	r0, #0
 800547c:	d038      	beq.n	80054f0 <_svfiprintf_r+0x1d8>
 800547e:	4b24      	ldr	r3, [pc, #144]	; (8005510 <_svfiprintf_r+0x1f8>)
 8005480:	bb1b      	cbnz	r3, 80054ca <_svfiprintf_r+0x1b2>
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	3307      	adds	r3, #7
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	3308      	adds	r3, #8
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005490:	4433      	add	r3, r6
 8005492:	9309      	str	r3, [sp, #36]	; 0x24
 8005494:	e767      	b.n	8005366 <_svfiprintf_r+0x4e>
 8005496:	460c      	mov	r4, r1
 8005498:	2001      	movs	r0, #1
 800549a:	fb0c 3202 	mla	r2, ip, r2, r3
 800549e:	e7a5      	b.n	80053ec <_svfiprintf_r+0xd4>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f04f 0c0a 	mov.w	ip, #10
 80054a6:	4619      	mov	r1, r3
 80054a8:	3401      	adds	r4, #1
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	4620      	mov	r0, r4
 80054ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054b2:	3a30      	subs	r2, #48	; 0x30
 80054b4:	2a09      	cmp	r2, #9
 80054b6:	d903      	bls.n	80054c0 <_svfiprintf_r+0x1a8>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0c5      	beq.n	8005448 <_svfiprintf_r+0x130>
 80054bc:	9105      	str	r1, [sp, #20]
 80054be:	e7c3      	b.n	8005448 <_svfiprintf_r+0x130>
 80054c0:	4604      	mov	r4, r0
 80054c2:	2301      	movs	r3, #1
 80054c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054c8:	e7f0      	b.n	80054ac <_svfiprintf_r+0x194>
 80054ca:	ab03      	add	r3, sp, #12
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	462a      	mov	r2, r5
 80054d0:	4638      	mov	r0, r7
 80054d2:	4b10      	ldr	r3, [pc, #64]	; (8005514 <_svfiprintf_r+0x1fc>)
 80054d4:	a904      	add	r1, sp, #16
 80054d6:	f7fd ffcd 	bl	8003474 <_printf_float>
 80054da:	1c42      	adds	r2, r0, #1
 80054dc:	4606      	mov	r6, r0
 80054de:	d1d6      	bne.n	800548e <_svfiprintf_r+0x176>
 80054e0:	89ab      	ldrh	r3, [r5, #12]
 80054e2:	065b      	lsls	r3, r3, #25
 80054e4:	f53f af2c 	bmi.w	8005340 <_svfiprintf_r+0x28>
 80054e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ea:	b01d      	add	sp, #116	; 0x74
 80054ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f0:	ab03      	add	r3, sp, #12
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	462a      	mov	r2, r5
 80054f6:	4638      	mov	r0, r7
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <_svfiprintf_r+0x1fc>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	f7fe fa56 	bl	80039ac <_printf_i>
 8005500:	e7eb      	b.n	80054da <_svfiprintf_r+0x1c2>
 8005502:	bf00      	nop
 8005504:	08006374 	.word	0x08006374
 8005508:	0800637a 	.word	0x0800637a
 800550c:	0800637e 	.word	0x0800637e
 8005510:	08003475 	.word	0x08003475
 8005514:	08005261 	.word	0x08005261

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	2300      	movs	r3, #0
 800551c:	4d05      	ldr	r5, [pc, #20]	; (8005534 <_sbrk_r+0x1c>)
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb ff44 	bl	80013b0 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	2000036c 	.word	0x2000036c

08005538 <__assert_func>:
 8005538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800553a:	4614      	mov	r4, r2
 800553c:	461a      	mov	r2, r3
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <__assert_func+0x2c>)
 8005540:	4605      	mov	r5, r0
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68d8      	ldr	r0, [r3, #12]
 8005546:	b14c      	cbz	r4, 800555c <__assert_func+0x24>
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <__assert_func+0x30>)
 800554a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800554e:	9100      	str	r1, [sp, #0]
 8005550:	462b      	mov	r3, r5
 8005552:	4906      	ldr	r1, [pc, #24]	; (800556c <__assert_func+0x34>)
 8005554:	f000 f80e 	bl	8005574 <fiprintf>
 8005558:	f000 faaa 	bl	8005ab0 <abort>
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <__assert_func+0x38>)
 800555e:	461c      	mov	r4, r3
 8005560:	e7f3      	b.n	800554a <__assert_func+0x12>
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c
 8005568:	08006385 	.word	0x08006385
 800556c:	08006392 	.word	0x08006392
 8005570:	080063c0 	.word	0x080063c0

08005574 <fiprintf>:
 8005574:	b40e      	push	{r1, r2, r3}
 8005576:	b503      	push	{r0, r1, lr}
 8005578:	4601      	mov	r1, r0
 800557a:	ab03      	add	r3, sp, #12
 800557c:	4805      	ldr	r0, [pc, #20]	; (8005594 <fiprintf+0x20>)
 800557e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005582:	6800      	ldr	r0, [r0, #0]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	f000 f895 	bl	80056b4 <_vfiprintf_r>
 800558a:	b002      	add	sp, #8
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	2000000c 	.word	0x2000000c

08005598 <__ascii_mbtowc>:
 8005598:	b082      	sub	sp, #8
 800559a:	b901      	cbnz	r1, 800559e <__ascii_mbtowc+0x6>
 800559c:	a901      	add	r1, sp, #4
 800559e:	b142      	cbz	r2, 80055b2 <__ascii_mbtowc+0x1a>
 80055a0:	b14b      	cbz	r3, 80055b6 <__ascii_mbtowc+0x1e>
 80055a2:	7813      	ldrb	r3, [r2, #0]
 80055a4:	600b      	str	r3, [r1, #0]
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	1e10      	subs	r0, r2, #0
 80055aa:	bf18      	it	ne
 80055ac:	2001      	movne	r0, #1
 80055ae:	b002      	add	sp, #8
 80055b0:	4770      	bx	lr
 80055b2:	4610      	mov	r0, r2
 80055b4:	e7fb      	b.n	80055ae <__ascii_mbtowc+0x16>
 80055b6:	f06f 0001 	mvn.w	r0, #1
 80055ba:	e7f8      	b.n	80055ae <__ascii_mbtowc+0x16>

080055bc <memmove>:
 80055bc:	4288      	cmp	r0, r1
 80055be:	b510      	push	{r4, lr}
 80055c0:	eb01 0402 	add.w	r4, r1, r2
 80055c4:	d902      	bls.n	80055cc <memmove+0x10>
 80055c6:	4284      	cmp	r4, r0
 80055c8:	4623      	mov	r3, r4
 80055ca:	d807      	bhi.n	80055dc <memmove+0x20>
 80055cc:	1e43      	subs	r3, r0, #1
 80055ce:	42a1      	cmp	r1, r4
 80055d0:	d008      	beq.n	80055e4 <memmove+0x28>
 80055d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055da:	e7f8      	b.n	80055ce <memmove+0x12>
 80055dc:	4601      	mov	r1, r0
 80055de:	4402      	add	r2, r0
 80055e0:	428a      	cmp	r2, r1
 80055e2:	d100      	bne.n	80055e6 <memmove+0x2a>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ee:	e7f7      	b.n	80055e0 <memmove+0x24>

080055f0 <__malloc_lock>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__malloc_lock+0x8>)
 80055f2:	f000 bc19 	b.w	8005e28 <__retarget_lock_acquire_recursive>
 80055f6:	bf00      	nop
 80055f8:	20000370 	.word	0x20000370

080055fc <__malloc_unlock>:
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <__malloc_unlock+0x8>)
 80055fe:	f000 bc14 	b.w	8005e2a <__retarget_lock_release_recursive>
 8005602:	bf00      	nop
 8005604:	20000370 	.word	0x20000370

08005608 <_realloc_r>:
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	4680      	mov	r8, r0
 800560e:	4614      	mov	r4, r2
 8005610:	460e      	mov	r6, r1
 8005612:	b921      	cbnz	r1, 800561e <_realloc_r+0x16>
 8005614:	4611      	mov	r1, r2
 8005616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561a:	f7ff bdad 	b.w	8005178 <_malloc_r>
 800561e:	b92a      	cbnz	r2, 800562c <_realloc_r+0x24>
 8005620:	f7ff fd42 	bl	80050a8 <_free_r>
 8005624:	4625      	mov	r5, r4
 8005626:	4628      	mov	r0, r5
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	f000 fc64 	bl	8005ef8 <_malloc_usable_size_r>
 8005630:	4284      	cmp	r4, r0
 8005632:	4607      	mov	r7, r0
 8005634:	d802      	bhi.n	800563c <_realloc_r+0x34>
 8005636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800563a:	d812      	bhi.n	8005662 <_realloc_r+0x5a>
 800563c:	4621      	mov	r1, r4
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff fd9a 	bl	8005178 <_malloc_r>
 8005644:	4605      	mov	r5, r0
 8005646:	2800      	cmp	r0, #0
 8005648:	d0ed      	beq.n	8005626 <_realloc_r+0x1e>
 800564a:	42bc      	cmp	r4, r7
 800564c:	4622      	mov	r2, r4
 800564e:	4631      	mov	r1, r6
 8005650:	bf28      	it	cs
 8005652:	463a      	movcs	r2, r7
 8005654:	f7ff f984 	bl	8004960 <memcpy>
 8005658:	4631      	mov	r1, r6
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff fd24 	bl	80050a8 <_free_r>
 8005660:	e7e1      	b.n	8005626 <_realloc_r+0x1e>
 8005662:	4635      	mov	r5, r6
 8005664:	e7df      	b.n	8005626 <_realloc_r+0x1e>

08005666 <__sfputc_r>:
 8005666:	6893      	ldr	r3, [r2, #8]
 8005668:	b410      	push	{r4}
 800566a:	3b01      	subs	r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	6093      	str	r3, [r2, #8]
 8005670:	da07      	bge.n	8005682 <__sfputc_r+0x1c>
 8005672:	6994      	ldr	r4, [r2, #24]
 8005674:	42a3      	cmp	r3, r4
 8005676:	db01      	blt.n	800567c <__sfputc_r+0x16>
 8005678:	290a      	cmp	r1, #10
 800567a:	d102      	bne.n	8005682 <__sfputc_r+0x1c>
 800567c:	bc10      	pop	{r4}
 800567e:	f000 b949 	b.w	8005914 <__swbuf_r>
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	1c58      	adds	r0, r3, #1
 8005686:	6010      	str	r0, [r2, #0]
 8005688:	7019      	strb	r1, [r3, #0]
 800568a:	4608      	mov	r0, r1
 800568c:	bc10      	pop	{r4}
 800568e:	4770      	bx	lr

08005690 <__sfputs_r>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	4606      	mov	r6, r0
 8005694:	460f      	mov	r7, r1
 8005696:	4614      	mov	r4, r2
 8005698:	18d5      	adds	r5, r2, r3
 800569a:	42ac      	cmp	r4, r5
 800569c:	d101      	bne.n	80056a2 <__sfputs_r+0x12>
 800569e:	2000      	movs	r0, #0
 80056a0:	e007      	b.n	80056b2 <__sfputs_r+0x22>
 80056a2:	463a      	mov	r2, r7
 80056a4:	4630      	mov	r0, r6
 80056a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056aa:	f7ff ffdc 	bl	8005666 <__sfputc_r>
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	d1f3      	bne.n	800569a <__sfputs_r+0xa>
 80056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056b4 <_vfiprintf_r>:
 80056b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b8:	460d      	mov	r5, r1
 80056ba:	4614      	mov	r4, r2
 80056bc:	4698      	mov	r8, r3
 80056be:	4606      	mov	r6, r0
 80056c0:	b09d      	sub	sp, #116	; 0x74
 80056c2:	b118      	cbz	r0, 80056cc <_vfiprintf_r+0x18>
 80056c4:	6983      	ldr	r3, [r0, #24]
 80056c6:	b90b      	cbnz	r3, 80056cc <_vfiprintf_r+0x18>
 80056c8:	f000 fb10 	bl	8005cec <__sinit>
 80056cc:	4b89      	ldr	r3, [pc, #548]	; (80058f4 <_vfiprintf_r+0x240>)
 80056ce:	429d      	cmp	r5, r3
 80056d0:	d11b      	bne.n	800570a <_vfiprintf_r+0x56>
 80056d2:	6875      	ldr	r5, [r6, #4]
 80056d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056d6:	07d9      	lsls	r1, r3, #31
 80056d8:	d405      	bmi.n	80056e6 <_vfiprintf_r+0x32>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	059a      	lsls	r2, r3, #22
 80056de:	d402      	bmi.n	80056e6 <_vfiprintf_r+0x32>
 80056e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056e2:	f000 fba1 	bl	8005e28 <__retarget_lock_acquire_recursive>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	071b      	lsls	r3, r3, #28
 80056ea:	d501      	bpl.n	80056f0 <_vfiprintf_r+0x3c>
 80056ec:	692b      	ldr	r3, [r5, #16]
 80056ee:	b9eb      	cbnz	r3, 800572c <_vfiprintf_r+0x78>
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f000 f96e 	bl	80059d4 <__swsetup_r>
 80056f8:	b1c0      	cbz	r0, 800572c <_vfiprintf_r+0x78>
 80056fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056fc:	07dc      	lsls	r4, r3, #31
 80056fe:	d50e      	bpl.n	800571e <_vfiprintf_r+0x6a>
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	b01d      	add	sp, #116	; 0x74
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <_vfiprintf_r+0x244>)
 800570c:	429d      	cmp	r5, r3
 800570e:	d101      	bne.n	8005714 <_vfiprintf_r+0x60>
 8005710:	68b5      	ldr	r5, [r6, #8]
 8005712:	e7df      	b.n	80056d4 <_vfiprintf_r+0x20>
 8005714:	4b79      	ldr	r3, [pc, #484]	; (80058fc <_vfiprintf_r+0x248>)
 8005716:	429d      	cmp	r5, r3
 8005718:	bf08      	it	eq
 800571a:	68f5      	ldreq	r5, [r6, #12]
 800571c:	e7da      	b.n	80056d4 <_vfiprintf_r+0x20>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	0598      	lsls	r0, r3, #22
 8005722:	d4ed      	bmi.n	8005700 <_vfiprintf_r+0x4c>
 8005724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005726:	f000 fb80 	bl	8005e2a <__retarget_lock_release_recursive>
 800572a:	e7e9      	b.n	8005700 <_vfiprintf_r+0x4c>
 800572c:	2300      	movs	r3, #0
 800572e:	9309      	str	r3, [sp, #36]	; 0x24
 8005730:	2320      	movs	r3, #32
 8005732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005736:	2330      	movs	r3, #48	; 0x30
 8005738:	f04f 0901 	mov.w	r9, #1
 800573c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005740:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005900 <_vfiprintf_r+0x24c>
 8005744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005748:	4623      	mov	r3, r4
 800574a:	469a      	mov	sl, r3
 800574c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005750:	b10a      	cbz	r2, 8005756 <_vfiprintf_r+0xa2>
 8005752:	2a25      	cmp	r2, #37	; 0x25
 8005754:	d1f9      	bne.n	800574a <_vfiprintf_r+0x96>
 8005756:	ebba 0b04 	subs.w	fp, sl, r4
 800575a:	d00b      	beq.n	8005774 <_vfiprintf_r+0xc0>
 800575c:	465b      	mov	r3, fp
 800575e:	4622      	mov	r2, r4
 8005760:	4629      	mov	r1, r5
 8005762:	4630      	mov	r0, r6
 8005764:	f7ff ff94 	bl	8005690 <__sfputs_r>
 8005768:	3001      	adds	r0, #1
 800576a:	f000 80aa 	beq.w	80058c2 <_vfiprintf_r+0x20e>
 800576e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005770:	445a      	add	r2, fp
 8005772:	9209      	str	r2, [sp, #36]	; 0x24
 8005774:	f89a 3000 	ldrb.w	r3, [sl]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a2 	beq.w	80058c2 <_vfiprintf_r+0x20e>
 800577e:	2300      	movs	r3, #0
 8005780:	f04f 32ff 	mov.w	r2, #4294967295
 8005784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005788:	f10a 0a01 	add.w	sl, sl, #1
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	9307      	str	r3, [sp, #28]
 8005790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005794:	931a      	str	r3, [sp, #104]	; 0x68
 8005796:	4654      	mov	r4, sl
 8005798:	2205      	movs	r2, #5
 800579a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579e:	4858      	ldr	r0, [pc, #352]	; (8005900 <_vfiprintf_r+0x24c>)
 80057a0:	f7ff f8d0 	bl	8004944 <memchr>
 80057a4:	9a04      	ldr	r2, [sp, #16]
 80057a6:	b9d8      	cbnz	r0, 80057e0 <_vfiprintf_r+0x12c>
 80057a8:	06d1      	lsls	r1, r2, #27
 80057aa:	bf44      	itt	mi
 80057ac:	2320      	movmi	r3, #32
 80057ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b2:	0713      	lsls	r3, r2, #28
 80057b4:	bf44      	itt	mi
 80057b6:	232b      	movmi	r3, #43	; 0x2b
 80057b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057bc:	f89a 3000 	ldrb.w	r3, [sl]
 80057c0:	2b2a      	cmp	r3, #42	; 0x2a
 80057c2:	d015      	beq.n	80057f0 <_vfiprintf_r+0x13c>
 80057c4:	4654      	mov	r4, sl
 80057c6:	2000      	movs	r0, #0
 80057c8:	f04f 0c0a 	mov.w	ip, #10
 80057cc:	9a07      	ldr	r2, [sp, #28]
 80057ce:	4621      	mov	r1, r4
 80057d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057d4:	3b30      	subs	r3, #48	; 0x30
 80057d6:	2b09      	cmp	r3, #9
 80057d8:	d94e      	bls.n	8005878 <_vfiprintf_r+0x1c4>
 80057da:	b1b0      	cbz	r0, 800580a <_vfiprintf_r+0x156>
 80057dc:	9207      	str	r2, [sp, #28]
 80057de:	e014      	b.n	800580a <_vfiprintf_r+0x156>
 80057e0:	eba0 0308 	sub.w	r3, r0, r8
 80057e4:	fa09 f303 	lsl.w	r3, r9, r3
 80057e8:	4313      	orrs	r3, r2
 80057ea:	46a2      	mov	sl, r4
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	e7d2      	b.n	8005796 <_vfiprintf_r+0xe2>
 80057f0:	9b03      	ldr	r3, [sp, #12]
 80057f2:	1d19      	adds	r1, r3, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	9103      	str	r1, [sp, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bfbb      	ittet	lt
 80057fc:	425b      	neglt	r3, r3
 80057fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005802:	9307      	strge	r3, [sp, #28]
 8005804:	9307      	strlt	r3, [sp, #28]
 8005806:	bfb8      	it	lt
 8005808:	9204      	strlt	r2, [sp, #16]
 800580a:	7823      	ldrb	r3, [r4, #0]
 800580c:	2b2e      	cmp	r3, #46	; 0x2e
 800580e:	d10c      	bne.n	800582a <_vfiprintf_r+0x176>
 8005810:	7863      	ldrb	r3, [r4, #1]
 8005812:	2b2a      	cmp	r3, #42	; 0x2a
 8005814:	d135      	bne.n	8005882 <_vfiprintf_r+0x1ce>
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	3402      	adds	r4, #2
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	9203      	str	r2, [sp, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	bfb8      	it	lt
 8005824:	f04f 33ff 	movlt.w	r3, #4294967295
 8005828:	9305      	str	r3, [sp, #20]
 800582a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005904 <_vfiprintf_r+0x250>
 800582e:	2203      	movs	r2, #3
 8005830:	4650      	mov	r0, sl
 8005832:	7821      	ldrb	r1, [r4, #0]
 8005834:	f7ff f886 	bl	8004944 <memchr>
 8005838:	b140      	cbz	r0, 800584c <_vfiprintf_r+0x198>
 800583a:	2340      	movs	r3, #64	; 0x40
 800583c:	eba0 000a 	sub.w	r0, r0, sl
 8005840:	fa03 f000 	lsl.w	r0, r3, r0
 8005844:	9b04      	ldr	r3, [sp, #16]
 8005846:	3401      	adds	r4, #1
 8005848:	4303      	orrs	r3, r0
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005850:	2206      	movs	r2, #6
 8005852:	482d      	ldr	r0, [pc, #180]	; (8005908 <_vfiprintf_r+0x254>)
 8005854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005858:	f7ff f874 	bl	8004944 <memchr>
 800585c:	2800      	cmp	r0, #0
 800585e:	d03f      	beq.n	80058e0 <_vfiprintf_r+0x22c>
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <_vfiprintf_r+0x258>)
 8005862:	bb1b      	cbnz	r3, 80058ac <_vfiprintf_r+0x1f8>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	3307      	adds	r3, #7
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	3308      	adds	r3, #8
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005872:	443b      	add	r3, r7
 8005874:	9309      	str	r3, [sp, #36]	; 0x24
 8005876:	e767      	b.n	8005748 <_vfiprintf_r+0x94>
 8005878:	460c      	mov	r4, r1
 800587a:	2001      	movs	r0, #1
 800587c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005880:	e7a5      	b.n	80057ce <_vfiprintf_r+0x11a>
 8005882:	2300      	movs	r3, #0
 8005884:	f04f 0c0a 	mov.w	ip, #10
 8005888:	4619      	mov	r1, r3
 800588a:	3401      	adds	r4, #1
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	4620      	mov	r0, r4
 8005890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005894:	3a30      	subs	r2, #48	; 0x30
 8005896:	2a09      	cmp	r2, #9
 8005898:	d903      	bls.n	80058a2 <_vfiprintf_r+0x1ee>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c5      	beq.n	800582a <_vfiprintf_r+0x176>
 800589e:	9105      	str	r1, [sp, #20]
 80058a0:	e7c3      	b.n	800582a <_vfiprintf_r+0x176>
 80058a2:	4604      	mov	r4, r0
 80058a4:	2301      	movs	r3, #1
 80058a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058aa:	e7f0      	b.n	800588e <_vfiprintf_r+0x1da>
 80058ac:	ab03      	add	r3, sp, #12
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	462a      	mov	r2, r5
 80058b2:	4630      	mov	r0, r6
 80058b4:	4b16      	ldr	r3, [pc, #88]	; (8005910 <_vfiprintf_r+0x25c>)
 80058b6:	a904      	add	r1, sp, #16
 80058b8:	f7fd fddc 	bl	8003474 <_printf_float>
 80058bc:	4607      	mov	r7, r0
 80058be:	1c78      	adds	r0, r7, #1
 80058c0:	d1d6      	bne.n	8005870 <_vfiprintf_r+0x1bc>
 80058c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058c4:	07d9      	lsls	r1, r3, #31
 80058c6:	d405      	bmi.n	80058d4 <_vfiprintf_r+0x220>
 80058c8:	89ab      	ldrh	r3, [r5, #12]
 80058ca:	059a      	lsls	r2, r3, #22
 80058cc:	d402      	bmi.n	80058d4 <_vfiprintf_r+0x220>
 80058ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058d0:	f000 faab 	bl	8005e2a <__retarget_lock_release_recursive>
 80058d4:	89ab      	ldrh	r3, [r5, #12]
 80058d6:	065b      	lsls	r3, r3, #25
 80058d8:	f53f af12 	bmi.w	8005700 <_vfiprintf_r+0x4c>
 80058dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058de:	e711      	b.n	8005704 <_vfiprintf_r+0x50>
 80058e0:	ab03      	add	r3, sp, #12
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	462a      	mov	r2, r5
 80058e6:	4630      	mov	r0, r6
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <_vfiprintf_r+0x25c>)
 80058ea:	a904      	add	r1, sp, #16
 80058ec:	f7fe f85e 	bl	80039ac <_printf_i>
 80058f0:	e7e4      	b.n	80058bc <_vfiprintf_r+0x208>
 80058f2:	bf00      	nop
 80058f4:	080064ec 	.word	0x080064ec
 80058f8:	0800650c 	.word	0x0800650c
 80058fc:	080064cc 	.word	0x080064cc
 8005900:	08006374 	.word	0x08006374
 8005904:	0800637a 	.word	0x0800637a
 8005908:	0800637e 	.word	0x0800637e
 800590c:	08003475 	.word	0x08003475
 8005910:	08005691 	.word	0x08005691

08005914 <__swbuf_r>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	460e      	mov	r6, r1
 8005918:	4614      	mov	r4, r2
 800591a:	4605      	mov	r5, r0
 800591c:	b118      	cbz	r0, 8005926 <__swbuf_r+0x12>
 800591e:	6983      	ldr	r3, [r0, #24]
 8005920:	b90b      	cbnz	r3, 8005926 <__swbuf_r+0x12>
 8005922:	f000 f9e3 	bl	8005cec <__sinit>
 8005926:	4b21      	ldr	r3, [pc, #132]	; (80059ac <__swbuf_r+0x98>)
 8005928:	429c      	cmp	r4, r3
 800592a:	d12b      	bne.n	8005984 <__swbuf_r+0x70>
 800592c:	686c      	ldr	r4, [r5, #4]
 800592e:	69a3      	ldr	r3, [r4, #24]
 8005930:	60a3      	str	r3, [r4, #8]
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	071a      	lsls	r2, r3, #28
 8005936:	d52f      	bpl.n	8005998 <__swbuf_r+0x84>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	b36b      	cbz	r3, 8005998 <__swbuf_r+0x84>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	b2f6      	uxtb	r6, r6
 8005942:	1ac0      	subs	r0, r0, r3
 8005944:	6963      	ldr	r3, [r4, #20]
 8005946:	4637      	mov	r7, r6
 8005948:	4283      	cmp	r3, r0
 800594a:	dc04      	bgt.n	8005956 <__swbuf_r+0x42>
 800594c:	4621      	mov	r1, r4
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f938 	bl	8005bc4 <_fflush_r>
 8005954:	bb30      	cbnz	r0, 80059a4 <__swbuf_r+0x90>
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	3001      	adds	r0, #1
 800595a:	3b01      	subs	r3, #1
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	701e      	strb	r6, [r3, #0]
 8005966:	6963      	ldr	r3, [r4, #20]
 8005968:	4283      	cmp	r3, r0
 800596a:	d004      	beq.n	8005976 <__swbuf_r+0x62>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	07db      	lsls	r3, r3, #31
 8005970:	d506      	bpl.n	8005980 <__swbuf_r+0x6c>
 8005972:	2e0a      	cmp	r6, #10
 8005974:	d104      	bne.n	8005980 <__swbuf_r+0x6c>
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	f000 f923 	bl	8005bc4 <_fflush_r>
 800597e:	b988      	cbnz	r0, 80059a4 <__swbuf_r+0x90>
 8005980:	4638      	mov	r0, r7
 8005982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <__swbuf_r+0x9c>)
 8005986:	429c      	cmp	r4, r3
 8005988:	d101      	bne.n	800598e <__swbuf_r+0x7a>
 800598a:	68ac      	ldr	r4, [r5, #8]
 800598c:	e7cf      	b.n	800592e <__swbuf_r+0x1a>
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <__swbuf_r+0xa0>)
 8005990:	429c      	cmp	r4, r3
 8005992:	bf08      	it	eq
 8005994:	68ec      	ldreq	r4, [r5, #12]
 8005996:	e7ca      	b.n	800592e <__swbuf_r+0x1a>
 8005998:	4621      	mov	r1, r4
 800599a:	4628      	mov	r0, r5
 800599c:	f000 f81a 	bl	80059d4 <__swsetup_r>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d0cb      	beq.n	800593c <__swbuf_r+0x28>
 80059a4:	f04f 37ff 	mov.w	r7, #4294967295
 80059a8:	e7ea      	b.n	8005980 <__swbuf_r+0x6c>
 80059aa:	bf00      	nop
 80059ac:	080064ec 	.word	0x080064ec
 80059b0:	0800650c 	.word	0x0800650c
 80059b4:	080064cc 	.word	0x080064cc

080059b8 <__ascii_wctomb>:
 80059b8:	4603      	mov	r3, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	b141      	cbz	r1, 80059d0 <__ascii_wctomb+0x18>
 80059be:	2aff      	cmp	r2, #255	; 0xff
 80059c0:	d904      	bls.n	80059cc <__ascii_wctomb+0x14>
 80059c2:	228a      	movs	r2, #138	; 0x8a
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	4770      	bx	lr
 80059cc:	2001      	movs	r0, #1
 80059ce:	700a      	strb	r2, [r1, #0]
 80059d0:	4770      	bx	lr
	...

080059d4 <__swsetup_r>:
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <__swsetup_r+0xcc>)
 80059d6:	b570      	push	{r4, r5, r6, lr}
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	4606      	mov	r6, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	b125      	cbz	r5, 80059ea <__swsetup_r+0x16>
 80059e0:	69ab      	ldr	r3, [r5, #24]
 80059e2:	b913      	cbnz	r3, 80059ea <__swsetup_r+0x16>
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f981 	bl	8005cec <__sinit>
 80059ea:	4b2e      	ldr	r3, [pc, #184]	; (8005aa4 <__swsetup_r+0xd0>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d10f      	bne.n	8005a10 <__swsetup_r+0x3c>
 80059f0:	686c      	ldr	r4, [r5, #4]
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059f8:	0719      	lsls	r1, r3, #28
 80059fa:	d42c      	bmi.n	8005a56 <__swsetup_r+0x82>
 80059fc:	06dd      	lsls	r5, r3, #27
 80059fe:	d411      	bmi.n	8005a24 <__swsetup_r+0x50>
 8005a00:	2309      	movs	r3, #9
 8005a02:	6033      	str	r3, [r6, #0]
 8005a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	e03e      	b.n	8005a8e <__swsetup_r+0xba>
 8005a10:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <__swsetup_r+0xd4>)
 8005a12:	429c      	cmp	r4, r3
 8005a14:	d101      	bne.n	8005a1a <__swsetup_r+0x46>
 8005a16:	68ac      	ldr	r4, [r5, #8]
 8005a18:	e7eb      	b.n	80059f2 <__swsetup_r+0x1e>
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <__swsetup_r+0xd8>)
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	bf08      	it	eq
 8005a20:	68ec      	ldreq	r4, [r5, #12]
 8005a22:	e7e6      	b.n	80059f2 <__swsetup_r+0x1e>
 8005a24:	0758      	lsls	r0, r3, #29
 8005a26:	d512      	bpl.n	8005a4e <__swsetup_r+0x7a>
 8005a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a2a:	b141      	cbz	r1, 8005a3e <__swsetup_r+0x6a>
 8005a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d002      	beq.n	8005a3a <__swsetup_r+0x66>
 8005a34:	4630      	mov	r0, r6
 8005a36:	f7ff fb37 	bl	80050a8 <_free_r>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	2300      	movs	r3, #0
 8005a48:	6063      	str	r3, [r4, #4]
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f043 0308 	orr.w	r3, r3, #8
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	b94b      	cbnz	r3, 8005a6e <__swsetup_r+0x9a>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d003      	beq.n	8005a6e <__swsetup_r+0x9a>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f000 fa05 	bl	8005e78 <__smakebuf_r>
 8005a6e:	89a0      	ldrh	r0, [r4, #12]
 8005a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a74:	f010 0301 	ands.w	r3, r0, #1
 8005a78:	d00a      	beq.n	8005a90 <__swsetup_r+0xbc>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	6963      	ldr	r3, [r4, #20]
 8005a80:	425b      	negs	r3, r3
 8005a82:	61a3      	str	r3, [r4, #24]
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	b943      	cbnz	r3, 8005a9a <__swsetup_r+0xc6>
 8005a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a8c:	d1ba      	bne.n	8005a04 <__swsetup_r+0x30>
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	0781      	lsls	r1, r0, #30
 8005a92:	bf58      	it	pl
 8005a94:	6963      	ldrpl	r3, [r4, #20]
 8005a96:	60a3      	str	r3, [r4, #8]
 8005a98:	e7f4      	b.n	8005a84 <__swsetup_r+0xb0>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e7f7      	b.n	8005a8e <__swsetup_r+0xba>
 8005a9e:	bf00      	nop
 8005aa0:	2000000c 	.word	0x2000000c
 8005aa4:	080064ec 	.word	0x080064ec
 8005aa8:	0800650c 	.word	0x0800650c
 8005aac:	080064cc 	.word	0x080064cc

08005ab0 <abort>:
 8005ab0:	2006      	movs	r0, #6
 8005ab2:	b508      	push	{r3, lr}
 8005ab4:	f000 fa50 	bl	8005f58 <raise>
 8005ab8:	2001      	movs	r0, #1
 8005aba:	f7fb fc06 	bl	80012ca <_exit>
	...

08005ac0 <__sflush_r>:
 8005ac0:	898a      	ldrh	r2, [r1, #12]
 8005ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	0710      	lsls	r0, r2, #28
 8005ac8:	460c      	mov	r4, r1
 8005aca:	d457      	bmi.n	8005b7c <__sflush_r+0xbc>
 8005acc:	684b      	ldr	r3, [r1, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	dc04      	bgt.n	8005adc <__sflush_r+0x1c>
 8005ad2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dc01      	bgt.n	8005adc <__sflush_r+0x1c>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	d0fa      	beq.n	8005ad8 <__sflush_r+0x18>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ae8:	682f      	ldr	r7, [r5, #0]
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	d032      	beq.n	8005b54 <__sflush_r+0x94>
 8005aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	075a      	lsls	r2, r3, #29
 8005af4:	d505      	bpl.n	8005b02 <__sflush_r+0x42>
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	1ac0      	subs	r0, r0, r3
 8005afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005afc:	b10b      	cbz	r3, 8005b02 <__sflush_r+0x42>
 8005afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b00:	1ac0      	subs	r0, r0, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	4602      	mov	r2, r0
 8005b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b08:	4628      	mov	r0, r5
 8005b0a:	6a21      	ldr	r1, [r4, #32]
 8005b0c:	47b0      	blx	r6
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	d106      	bne.n	8005b22 <__sflush_r+0x62>
 8005b14:	6829      	ldr	r1, [r5, #0]
 8005b16:	291d      	cmp	r1, #29
 8005b18:	d82c      	bhi.n	8005b74 <__sflush_r+0xb4>
 8005b1a:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <__sflush_r+0x100>)
 8005b1c:	40ca      	lsrs	r2, r1
 8005b1e:	07d6      	lsls	r6, r2, #31
 8005b20:	d528      	bpl.n	8005b74 <__sflush_r+0xb4>
 8005b22:	2200      	movs	r2, #0
 8005b24:	6062      	str	r2, [r4, #4]
 8005b26:	6922      	ldr	r2, [r4, #16]
 8005b28:	04d9      	lsls	r1, r3, #19
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	d504      	bpl.n	8005b38 <__sflush_r+0x78>
 8005b2e:	1c42      	adds	r2, r0, #1
 8005b30:	d101      	bne.n	8005b36 <__sflush_r+0x76>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	b903      	cbnz	r3, 8005b38 <__sflush_r+0x78>
 8005b36:	6560      	str	r0, [r4, #84]	; 0x54
 8005b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3a:	602f      	str	r7, [r5, #0]
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	d0cb      	beq.n	8005ad8 <__sflush_r+0x18>
 8005b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d002      	beq.n	8005b4e <__sflush_r+0x8e>
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f7ff faad 	bl	80050a8 <_free_r>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	6360      	str	r0, [r4, #52]	; 0x34
 8005b52:	e7c2      	b.n	8005ada <__sflush_r+0x1a>
 8005b54:	6a21      	ldr	r1, [r4, #32]
 8005b56:	2301      	movs	r3, #1
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	1c41      	adds	r1, r0, #1
 8005b5e:	d1c7      	bne.n	8005af0 <__sflush_r+0x30>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0c4      	beq.n	8005af0 <__sflush_r+0x30>
 8005b66:	2b1d      	cmp	r3, #29
 8005b68:	d001      	beq.n	8005b6e <__sflush_r+0xae>
 8005b6a:	2b16      	cmp	r3, #22
 8005b6c:	d101      	bne.n	8005b72 <__sflush_r+0xb2>
 8005b6e:	602f      	str	r7, [r5, #0]
 8005b70:	e7b2      	b.n	8005ad8 <__sflush_r+0x18>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	e7ae      	b.n	8005ada <__sflush_r+0x1a>
 8005b7c:	690f      	ldr	r7, [r1, #16]
 8005b7e:	2f00      	cmp	r7, #0
 8005b80:	d0aa      	beq.n	8005ad8 <__sflush_r+0x18>
 8005b82:	0793      	lsls	r3, r2, #30
 8005b84:	bf18      	it	ne
 8005b86:	2300      	movne	r3, #0
 8005b88:	680e      	ldr	r6, [r1, #0]
 8005b8a:	bf08      	it	eq
 8005b8c:	694b      	ldreq	r3, [r1, #20]
 8005b8e:	1bf6      	subs	r6, r6, r7
 8005b90:	600f      	str	r7, [r1, #0]
 8005b92:	608b      	str	r3, [r1, #8]
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	dd9f      	ble.n	8005ad8 <__sflush_r+0x18>
 8005b98:	4633      	mov	r3, r6
 8005b9a:	463a      	mov	r2, r7
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	6a21      	ldr	r1, [r4, #32]
 8005ba0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005ba4:	47e0      	blx	ip
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	dc06      	bgt.n	8005bb8 <__sflush_r+0xf8>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	e790      	b.n	8005ada <__sflush_r+0x1a>
 8005bb8:	4407      	add	r7, r0
 8005bba:	1a36      	subs	r6, r6, r0
 8005bbc:	e7ea      	b.n	8005b94 <__sflush_r+0xd4>
 8005bbe:	bf00      	nop
 8005bc0:	20400001 	.word	0x20400001

08005bc4 <_fflush_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	690b      	ldr	r3, [r1, #16]
 8005bc8:	4605      	mov	r5, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	b913      	cbnz	r3, 8005bd4 <_fflush_r+0x10>
 8005bce:	2500      	movs	r5, #0
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	b118      	cbz	r0, 8005bde <_fflush_r+0x1a>
 8005bd6:	6983      	ldr	r3, [r0, #24]
 8005bd8:	b90b      	cbnz	r3, 8005bde <_fflush_r+0x1a>
 8005bda:	f000 f887 	bl	8005cec <__sinit>
 8005bde:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <_fflush_r+0x6c>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	d11b      	bne.n	8005c1c <_fflush_r+0x58>
 8005be4:	686c      	ldr	r4, [r5, #4]
 8005be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0ef      	beq.n	8005bce <_fflush_r+0xa>
 8005bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bf0:	07d0      	lsls	r0, r2, #31
 8005bf2:	d404      	bmi.n	8005bfe <_fflush_r+0x3a>
 8005bf4:	0599      	lsls	r1, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_fflush_r+0x3a>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfa:	f000 f915 	bl	8005e28 <__retarget_lock_acquire_recursive>
 8005bfe:	4628      	mov	r0, r5
 8005c00:	4621      	mov	r1, r4
 8005c02:	f7ff ff5d 	bl	8005ac0 <__sflush_r>
 8005c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c08:	4605      	mov	r5, r0
 8005c0a:	07da      	lsls	r2, r3, #31
 8005c0c:	d4e0      	bmi.n	8005bd0 <_fflush_r+0xc>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	059b      	lsls	r3, r3, #22
 8005c12:	d4dd      	bmi.n	8005bd0 <_fflush_r+0xc>
 8005c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c16:	f000 f908 	bl	8005e2a <__retarget_lock_release_recursive>
 8005c1a:	e7d9      	b.n	8005bd0 <_fflush_r+0xc>
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <_fflush_r+0x70>)
 8005c1e:	429c      	cmp	r4, r3
 8005c20:	d101      	bne.n	8005c26 <_fflush_r+0x62>
 8005c22:	68ac      	ldr	r4, [r5, #8]
 8005c24:	e7df      	b.n	8005be6 <_fflush_r+0x22>
 8005c26:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <_fflush_r+0x74>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	bf08      	it	eq
 8005c2c:	68ec      	ldreq	r4, [r5, #12]
 8005c2e:	e7da      	b.n	8005be6 <_fflush_r+0x22>
 8005c30:	080064ec 	.word	0x080064ec
 8005c34:	0800650c 	.word	0x0800650c
 8005c38:	080064cc 	.word	0x080064cc

08005c3c <std>:
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	4604      	mov	r4, r0
 8005c42:	e9c0 3300 	strd	r3, r3, [r0]
 8005c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c4a:	6083      	str	r3, [r0, #8]
 8005c4c:	8181      	strh	r1, [r0, #12]
 8005c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005c50:	81c2      	strh	r2, [r0, #14]
 8005c52:	6183      	str	r3, [r0, #24]
 8005c54:	4619      	mov	r1, r3
 8005c56:	2208      	movs	r2, #8
 8005c58:	305c      	adds	r0, #92	; 0x5c
 8005c5a:	f7fd fb65 	bl	8003328 <memset>
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <std+0x38>)
 8005c60:	6224      	str	r4, [r4, #32]
 8005c62:	6263      	str	r3, [r4, #36]	; 0x24
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <std+0x3c>)
 8005c66:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <std+0x40>)
 8005c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <std+0x44>)
 8005c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	08005f91 	.word	0x08005f91
 8005c78:	08005fb3 	.word	0x08005fb3
 8005c7c:	08005feb 	.word	0x08005feb
 8005c80:	0800600f 	.word	0x0800600f

08005c84 <_cleanup_r>:
 8005c84:	4901      	ldr	r1, [pc, #4]	; (8005c8c <_cleanup_r+0x8>)
 8005c86:	f000 b8af 	b.w	8005de8 <_fwalk_reent>
 8005c8a:	bf00      	nop
 8005c8c:	08005bc5 	.word	0x08005bc5

08005c90 <__sfmoreglue>:
 8005c90:	2268      	movs	r2, #104	; 0x68
 8005c92:	b570      	push	{r4, r5, r6, lr}
 8005c94:	1e4d      	subs	r5, r1, #1
 8005c96:	4355      	muls	r5, r2
 8005c98:	460e      	mov	r6, r1
 8005c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c9e:	f7ff fa6b 	bl	8005178 <_malloc_r>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	b140      	cbz	r0, 8005cb8 <__sfmoreglue+0x28>
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8005cac:	300c      	adds	r0, #12
 8005cae:	60a0      	str	r0, [r4, #8]
 8005cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cb4:	f7fd fb38 	bl	8003328 <memset>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	bd70      	pop	{r4, r5, r6, pc}

08005cbc <__sfp_lock_acquire>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__sfp_lock_acquire+0x8>)
 8005cbe:	f000 b8b3 	b.w	8005e28 <__retarget_lock_acquire_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	20000371 	.word	0x20000371

08005cc8 <__sfp_lock_release>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <__sfp_lock_release+0x8>)
 8005cca:	f000 b8ae 	b.w	8005e2a <__retarget_lock_release_recursive>
 8005cce:	bf00      	nop
 8005cd0:	20000371 	.word	0x20000371

08005cd4 <__sinit_lock_acquire>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__sinit_lock_acquire+0x8>)
 8005cd6:	f000 b8a7 	b.w	8005e28 <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000372 	.word	0x20000372

08005ce0 <__sinit_lock_release>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__sinit_lock_release+0x8>)
 8005ce2:	f000 b8a2 	b.w	8005e2a <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000372 	.word	0x20000372

08005cec <__sinit>:
 8005cec:	b510      	push	{r4, lr}
 8005cee:	4604      	mov	r4, r0
 8005cf0:	f7ff fff0 	bl	8005cd4 <__sinit_lock_acquire>
 8005cf4:	69a3      	ldr	r3, [r4, #24]
 8005cf6:	b11b      	cbz	r3, 8005d00 <__sinit+0x14>
 8005cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfc:	f7ff bff0 	b.w	8005ce0 <__sinit_lock_release>
 8005d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d04:	6523      	str	r3, [r4, #80]	; 0x50
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <__sinit+0x68>)
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <__sinit+0x6c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	bf08      	it	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	4620      	mov	r0, r4
 8005d16:	bf08      	it	eq
 8005d18:	61a3      	streq	r3, [r4, #24]
 8005d1a:	f000 f81f 	bl	8005d5c <__sfp>
 8005d1e:	6060      	str	r0, [r4, #4]
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f81b 	bl	8005d5c <__sfp>
 8005d26:	60a0      	str	r0, [r4, #8]
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 f817 	bl	8005d5c <__sfp>
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2104      	movs	r1, #4
 8005d32:	60e0      	str	r0, [r4, #12]
 8005d34:	6860      	ldr	r0, [r4, #4]
 8005d36:	f7ff ff81 	bl	8005c3c <std>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	2109      	movs	r1, #9
 8005d3e:	68a0      	ldr	r0, [r4, #8]
 8005d40:	f7ff ff7c 	bl	8005c3c <std>
 8005d44:	2202      	movs	r2, #2
 8005d46:	2112      	movs	r1, #18
 8005d48:	68e0      	ldr	r0, [r4, #12]
 8005d4a:	f7ff ff77 	bl	8005c3c <std>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	61a3      	str	r3, [r4, #24]
 8005d52:	e7d1      	b.n	8005cf8 <__sinit+0xc>
 8005d54:	08006154 	.word	0x08006154
 8005d58:	08005c85 	.word	0x08005c85

08005d5c <__sfp>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	4607      	mov	r7, r0
 8005d60:	f7ff ffac 	bl	8005cbc <__sfp_lock_acquire>
 8005d64:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <__sfp+0x84>)
 8005d66:	681e      	ldr	r6, [r3, #0]
 8005d68:	69b3      	ldr	r3, [r6, #24]
 8005d6a:	b913      	cbnz	r3, 8005d72 <__sfp+0x16>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff ffbd 	bl	8005cec <__sinit>
 8005d72:	3648      	adds	r6, #72	; 0x48
 8005d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	d503      	bpl.n	8005d84 <__sfp+0x28>
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	b30b      	cbz	r3, 8005dc4 <__sfp+0x68>
 8005d80:	6836      	ldr	r6, [r6, #0]
 8005d82:	e7f7      	b.n	8005d74 <__sfp+0x18>
 8005d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d88:	b9d5      	cbnz	r5, 8005dc0 <__sfp+0x64>
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <__sfp+0x88>)
 8005d8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d90:	60e3      	str	r3, [r4, #12]
 8005d92:	6665      	str	r5, [r4, #100]	; 0x64
 8005d94:	f000 f847 	bl	8005e26 <__retarget_lock_init_recursive>
 8005d98:	f7ff ff96 	bl	8005cc8 <__sfp_lock_release>
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	4629      	mov	r1, r5
 8005da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005da8:	6025      	str	r5, [r4, #0]
 8005daa:	61a5      	str	r5, [r4, #24]
 8005dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005db0:	f7fd faba 	bl	8003328 <memset>
 8005db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc0:	3468      	adds	r4, #104	; 0x68
 8005dc2:	e7d9      	b.n	8005d78 <__sfp+0x1c>
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	f7ff ff62 	bl	8005c90 <__sfmoreglue>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	6030      	str	r0, [r6, #0]
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d1d5      	bne.n	8005d80 <__sfp+0x24>
 8005dd4:	f7ff ff78 	bl	8005cc8 <__sfp_lock_release>
 8005dd8:	230c      	movs	r3, #12
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	e7ee      	b.n	8005dbc <__sfp+0x60>
 8005dde:	bf00      	nop
 8005de0:	08006154 	.word	0x08006154
 8005de4:	ffff0001 	.word	0xffff0001

08005de8 <_fwalk_reent>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4606      	mov	r6, r0
 8005dee:	4688      	mov	r8, r1
 8005df0:	2700      	movs	r7, #0
 8005df2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8005dfe:	d505      	bpl.n	8005e0c <_fwalk_reent+0x24>
 8005e00:	6824      	ldr	r4, [r4, #0]
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	d1f7      	bne.n	8005df6 <_fwalk_reent+0xe>
 8005e06:	4638      	mov	r0, r7
 8005e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0c:	89ab      	ldrh	r3, [r5, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d907      	bls.n	8005e22 <_fwalk_reent+0x3a>
 8005e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e16:	3301      	adds	r3, #1
 8005e18:	d003      	beq.n	8005e22 <_fwalk_reent+0x3a>
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	47c0      	blx	r8
 8005e20:	4307      	orrs	r7, r0
 8005e22:	3568      	adds	r5, #104	; 0x68
 8005e24:	e7e9      	b.n	8005dfa <_fwalk_reent+0x12>

08005e26 <__retarget_lock_init_recursive>:
 8005e26:	4770      	bx	lr

08005e28 <__retarget_lock_acquire_recursive>:
 8005e28:	4770      	bx	lr

08005e2a <__retarget_lock_release_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <__swhatbuf_r>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	460e      	mov	r6, r1
 8005e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e34:	4614      	mov	r4, r2
 8005e36:	2900      	cmp	r1, #0
 8005e38:	461d      	mov	r5, r3
 8005e3a:	b096      	sub	sp, #88	; 0x58
 8005e3c:	da08      	bge.n	8005e50 <__swhatbuf_r+0x24>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e44:	602a      	str	r2, [r5, #0]
 8005e46:	061a      	lsls	r2, r3, #24
 8005e48:	d410      	bmi.n	8005e6c <__swhatbuf_r+0x40>
 8005e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4e:	e00e      	b.n	8005e6e <__swhatbuf_r+0x42>
 8005e50:	466a      	mov	r2, sp
 8005e52:	f000 f903 	bl	800605c <_fstat_r>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	dbf1      	blt.n	8005e3e <__swhatbuf_r+0x12>
 8005e5a:	9a01      	ldr	r2, [sp, #4]
 8005e5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e64:	425a      	negs	r2, r3
 8005e66:	415a      	adcs	r2, r3
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	e7ee      	b.n	8005e4a <__swhatbuf_r+0x1e>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	2000      	movs	r0, #0
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	b016      	add	sp, #88	; 0x58
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e78 <__smakebuf_r>:
 8005e78:	898b      	ldrh	r3, [r1, #12]
 8005e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e7c:	079d      	lsls	r5, r3, #30
 8005e7e:	4606      	mov	r6, r0
 8005e80:	460c      	mov	r4, r1
 8005e82:	d507      	bpl.n	8005e94 <__smakebuf_r+0x1c>
 8005e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	6163      	str	r3, [r4, #20]
 8005e90:	b002      	add	sp, #8
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	466a      	mov	r2, sp
 8005e96:	ab01      	add	r3, sp, #4
 8005e98:	f7ff ffc8 	bl	8005e2c <__swhatbuf_r>
 8005e9c:	9900      	ldr	r1, [sp, #0]
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff f969 	bl	8005178 <_malloc_r>
 8005ea6:	b948      	cbnz	r0, 8005ebc <__smakebuf_r+0x44>
 8005ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eac:	059a      	lsls	r2, r3, #22
 8005eae:	d4ef      	bmi.n	8005e90 <__smakebuf_r+0x18>
 8005eb0:	f023 0303 	bic.w	r3, r3, #3
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	e7e3      	b.n	8005e84 <__smakebuf_r+0xc>
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <__smakebuf_r+0x7c>)
 8005ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	6020      	str	r0, [r4, #0]
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	6120      	str	r0, [r4, #16]
 8005ece:	6163      	str	r3, [r4, #20]
 8005ed0:	9b01      	ldr	r3, [sp, #4]
 8005ed2:	b15b      	cbz	r3, 8005eec <__smakebuf_r+0x74>
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eda:	f000 f8d1 	bl	8006080 <_isatty_r>
 8005ede:	b128      	cbz	r0, 8005eec <__smakebuf_r+0x74>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	89a0      	ldrh	r0, [r4, #12]
 8005eee:	4305      	orrs	r5, r0
 8005ef0:	81a5      	strh	r5, [r4, #12]
 8005ef2:	e7cd      	b.n	8005e90 <__smakebuf_r+0x18>
 8005ef4:	08005c85 	.word	0x08005c85

08005ef8 <_malloc_usable_size_r>:
 8005ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efc:	1f18      	subs	r0, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfbc      	itt	lt
 8005f02:	580b      	ldrlt	r3, [r1, r0]
 8005f04:	18c0      	addlt	r0, r0, r3
 8005f06:	4770      	bx	lr

08005f08 <_raise_r>:
 8005f08:	291f      	cmp	r1, #31
 8005f0a:	b538      	push	{r3, r4, r5, lr}
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	460d      	mov	r5, r1
 8005f10:	d904      	bls.n	8005f1c <_raise_r+0x14>
 8005f12:	2316      	movs	r3, #22
 8005f14:	6003      	str	r3, [r0, #0]
 8005f16:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f1e:	b112      	cbz	r2, 8005f26 <_raise_r+0x1e>
 8005f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f24:	b94b      	cbnz	r3, 8005f3a <_raise_r+0x32>
 8005f26:	4620      	mov	r0, r4
 8005f28:	f000 f830 	bl	8005f8c <_getpid_r>
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	4601      	mov	r1, r0
 8005f30:	4620      	mov	r0, r4
 8005f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f36:	f000 b817 	b.w	8005f68 <_kill_r>
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d00a      	beq.n	8005f54 <_raise_r+0x4c>
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	d103      	bne.n	8005f4a <_raise_r+0x42>
 8005f42:	2316      	movs	r3, #22
 8005f44:	6003      	str	r3, [r0, #0]
 8005f46:	2001      	movs	r0, #1
 8005f48:	e7e7      	b.n	8005f1a <_raise_r+0x12>
 8005f4a:	2400      	movs	r4, #0
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f52:	4798      	blx	r3
 8005f54:	2000      	movs	r0, #0
 8005f56:	e7e0      	b.n	8005f1a <_raise_r+0x12>

08005f58 <raise>:
 8005f58:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <raise+0xc>)
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f7ff bfd3 	b.w	8005f08 <_raise_r>
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c

08005f68 <_kill_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4d06      	ldr	r5, [pc, #24]	; (8005f88 <_kill_r+0x20>)
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	602b      	str	r3, [r5, #0]
 8005f76:	f7fb f998 	bl	80012aa <_kill>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	d102      	bne.n	8005f84 <_kill_r+0x1c>
 8005f7e:	682b      	ldr	r3, [r5, #0]
 8005f80:	b103      	cbz	r3, 8005f84 <_kill_r+0x1c>
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	2000036c 	.word	0x2000036c

08005f8c <_getpid_r>:
 8005f8c:	f7fb b986 	b.w	800129c <_getpid>

08005f90 <__sread>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	460c      	mov	r4, r1
 8005f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f98:	f000 f894 	bl	80060c4 <_read_r>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	bfab      	itete	ge
 8005fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8005fa4:	181b      	addge	r3, r3, r0
 8005fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005faa:	bfac      	ite	ge
 8005fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fae:	81a3      	strhlt	r3, [r4, #12]
 8005fb0:	bd10      	pop	{r4, pc}

08005fb2 <__swrite>:
 8005fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	898b      	ldrh	r3, [r1, #12]
 8005fba:	4605      	mov	r5, r0
 8005fbc:	05db      	lsls	r3, r3, #23
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	d505      	bpl.n	8005fd0 <__swrite+0x1e>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	f000 f868 	bl	80060a0 <_lseek_r>
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	4632      	mov	r2, r6
 8005fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	463b      	mov	r3, r7
 8005fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe6:	f000 b817 	b.w	8006018 <_write_r>

08005fea <__sseek>:
 8005fea:	b510      	push	{r4, lr}
 8005fec:	460c      	mov	r4, r1
 8005fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff2:	f000 f855 	bl	80060a0 <_lseek_r>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	bf15      	itete	ne
 8005ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006006:	81a3      	strheq	r3, [r4, #12]
 8006008:	bf18      	it	ne
 800600a:	81a3      	strhne	r3, [r4, #12]
 800600c:	bd10      	pop	{r4, pc}

0800600e <__sclose>:
 800600e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006012:	f000 b813 	b.w	800603c <_close_r>
	...

08006018 <_write_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	2200      	movs	r2, #0
 8006022:	4d05      	ldr	r5, [pc, #20]	; (8006038 <_write_r+0x20>)
 8006024:	602a      	str	r2, [r5, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	f7fb f976 	bl	8001318 <_write>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	d102      	bne.n	8006036 <_write_r+0x1e>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	b103      	cbz	r3, 8006036 <_write_r+0x1e>
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	2000036c 	.word	0x2000036c

0800603c <_close_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	2300      	movs	r3, #0
 8006040:	4d05      	ldr	r5, [pc, #20]	; (8006058 <_close_r+0x1c>)
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	f7fb f982 	bl	8001350 <_close>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_close_r+0x1a>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_close_r+0x1a>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	2000036c 	.word	0x2000036c

0800605c <_fstat_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	2300      	movs	r3, #0
 8006060:	4d06      	ldr	r5, [pc, #24]	; (800607c <_fstat_r+0x20>)
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	f7fb f97c 	bl	8001366 <_fstat>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	d102      	bne.n	8006078 <_fstat_r+0x1c>
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	b103      	cbz	r3, 8006078 <_fstat_r+0x1c>
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	bd38      	pop	{r3, r4, r5, pc}
 800607a:	bf00      	nop
 800607c:	2000036c 	.word	0x2000036c

08006080 <_isatty_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	2300      	movs	r3, #0
 8006084:	4d05      	ldr	r5, [pc, #20]	; (800609c <_isatty_r+0x1c>)
 8006086:	4604      	mov	r4, r0
 8006088:	4608      	mov	r0, r1
 800608a:	602b      	str	r3, [r5, #0]
 800608c:	f7fb f97a 	bl	8001384 <_isatty>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_isatty_r+0x1a>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	b103      	cbz	r3, 800609a <_isatty_r+0x1a>
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	2000036c 	.word	0x2000036c

080060a0 <_lseek_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	4611      	mov	r1, r2
 80060a8:	2200      	movs	r2, #0
 80060aa:	4d05      	ldr	r5, [pc, #20]	; (80060c0 <_lseek_r+0x20>)
 80060ac:	602a      	str	r2, [r5, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f7fb f972 	bl	8001398 <_lseek>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_lseek_r+0x1e>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	b103      	cbz	r3, 80060be <_lseek_r+0x1e>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	2000036c 	.word	0x2000036c

080060c4 <_read_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	2200      	movs	r2, #0
 80060ce:	4d05      	ldr	r5, [pc, #20]	; (80060e4 <_read_r+0x20>)
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fb f903 	bl	80012de <_read>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_read_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_read_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	2000036c 	.word	0x2000036c

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
