
CAN_F103_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f64  08002f64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f64  08002f64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08002fdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002fdc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089d9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166b  00000000  00000000  00028a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001628f  00000000  00000000  0002af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085c8  00000000  00000000  000411c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080526  00000000  00000000  0004978f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002198  00000000  00000000  000c9d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ed0 	.word	0x08002ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ed0 	.word	0x08002ed0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_CAN_RxFifo0MsgPendingCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000164:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000166:	4a14      	ldr	r2, [pc, #80]	; (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000168:	2100      	movs	r1, #0
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f000 fe31 	bl	8000dd2 <HAL_CAN_GetRxMessage>

	int j=0;
 8000170:	2300      	movs	r3, #0
 8000172:	60fb      	str	r3, [r7, #12]
	j = sprintf(message, "%s ", "Speed");
 8000174:	4a11      	ldr	r2, [pc, #68]	; (80001bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000176:	4912      	ldr	r1, [pc, #72]	; (80001c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000178:	4812      	ldr	r0, [pc, #72]	; (80001c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800017a:	f002 fa2f 	bl	80025dc <siprintf>
 800017e:	60f8      	str	r0, [r7, #12]
	j += sprintf(message, "%d \r\n", RxData[4]);
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000182:	791b      	ldrb	r3, [r3, #4]
 8000184:	461a      	mov	r2, r3
 8000186:	4910      	ldr	r1, [pc, #64]	; (80001c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000188:	480e      	ldr	r0, [pc, #56]	; (80001c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800018a:	f002 fa27 	bl	80025dc <siprintf>
 800018e:	4602      	mov	r2, r0
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	4413      	add	r3, r2
 8000194:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8000196:	480b      	ldr	r0, [pc, #44]	; (80001c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000198:	f7ff ffd8 	bl	800014c <strlen>
 800019c:	4603      	mov	r3, r0
 800019e:	b29a      	uxth	r2, r3
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	4908      	ldr	r1, [pc, #32]	; (80001c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80001a4:	4809      	ldr	r0, [pc, #36]	; (80001cc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80001a6:	f002 f867 	bl	8002278 <HAL_UART_Transmit>
}
 80001aa:	bf00      	nop
 80001ac:	3710      	adds	r7, #16
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000130 	.word	0x20000130
 80001b8:	20000114 	.word	0x20000114
 80001bc:	08002ee8 	.word	0x08002ee8
 80001c0:	08002ef0 	.word	0x08002ef0
 80001c4:	2000013c 	.word	0x2000013c
 80001c8:	08002ef4 	.word	0x08002ef4
 80001cc:	200000b4 	.word	0x200000b4

080001d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d6:	f000 fa9f 	bl	8000718 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001da:	f000 f84d 	bl	8000278 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001de:	f000 f90d 	bl	80003fc <MX_GPIO_Init>
	MX_CAN_Init();
 80001e2:	f000 f88f 	bl	8000304 <MX_CAN_Init>
	MX_USART1_UART_Init();
 80001e6:	f000 f8df 	bl	80003a8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 80001ea:	481f      	ldr	r0, [pc, #124]	; (8000268 <main+0x98>)
 80001ec:	f000 fcde 	bl	8000bac <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001f0:	2102      	movs	r1, #2
 80001f2:	481d      	ldr	r0, [pc, #116]	; (8000268 <main+0x98>)
 80001f4:	f000 ff0e 	bl	8001014 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 2;
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <main+0x9c>)
 80001fa:	2202      	movs	r2, #2
 80001fc:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80001fe:	4b1b      	ldr	r3, [pc, #108]	; (800026c <main+0x9c>)
 8000200:	2200      	movs	r2, #0
 8000202:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000204:	4b19      	ldr	r3, [pc, #100]	; (800026c <main+0x9c>)
 8000206:	2200      	movs	r2, #0
 8000208:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x000;
 800020a:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x9c>)
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]

	uint8_t reset[] = { 01, 82 };
 8000210:	f245 2301 	movw	r3, #20993	; 0x5201
 8000214:	81bb      	strh	r3, [r7, #12]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, reset, &TxMailbox);
 8000216:	f107 020c 	add.w	r2, r7, #12
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <main+0xa0>)
 800021c:	4913      	ldr	r1, [pc, #76]	; (800026c <main+0x9c>)
 800021e:	4812      	ldr	r0, [pc, #72]	; (8000268 <main+0x98>)
 8000220:	f000 fd08 	bl	8000c34 <HAL_CAN_AddTxMessage>
	uint8_t operationalmode[] = { 01, 01 };
 8000224:	f240 1301 	movw	r3, #257	; 0x101
 8000228:	813b      	strh	r3, [r7, #8]
	//uint8_t enablemotor[] = { 0x2B, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00 };// enable motor
	//2B 40 60 00 06 00 00 00
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, operationalmode, &TxMailbox);
 800022a:	f107 0208 	add.w	r2, r7, #8
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <main+0xa0>)
 8000230:	490e      	ldr	r1, [pc, #56]	; (800026c <main+0x9c>)
 8000232:	480d      	ldr	r0, [pc, #52]	; (8000268 <main+0x98>)
 8000234:	f000 fcfe 	bl	8000c34 <HAL_CAN_AddTxMessage>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		TxHeader.DLC = 8;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <main+0x9c>)
 800023a:	2208      	movs	r2, #8
 800023c:	611a      	str	r2, [r3, #16]
		TxHeader.StdId = 0x601;
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0x9c>)
 8000240:	f240 6201 	movw	r2, #1537	; 0x601
 8000244:	601a      	str	r2, [r3, #0]
		uint8_t speed[] = { 0x40, 0x6C, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00 };// set heart beat rate
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <main+0xa4>)
 8000248:	463b      	mov	r3, r7
 800024a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024e:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, speed, &TxMailbox);
 8000252:	463a      	mov	r2, r7
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <main+0xa0>)
 8000256:	4905      	ldr	r1, [pc, #20]	; (800026c <main+0x9c>)
 8000258:	4803      	ldr	r0, [pc, #12]	; (8000268 <main+0x98>)
 800025a:	f000 fceb 	bl	8000c34 <HAL_CAN_AddTxMessage>
		//HAL_UART_Transmit(&huart1, "Test\r\n", 8, 100);
		//printf("Test\r\n");
		HAL_Delay(1000);
 800025e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000262:	f000 fabb 	bl	80007dc <HAL_Delay>
	while (1) {
 8000266:	e7e7      	b.n	8000238 <main+0x68>
 8000268:	2000008c 	.word	0x2000008c
 800026c:	200000fc 	.word	0x200000fc
 8000270:	20000138 	.word	0x20000138
 8000274:	08002efc 	.word	0x08002efc

08000278 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 f9a0 	bl	80025cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029a:	2301      	movs	r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fb79 	bl	80019b8 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x58>
		Error_Handler();
 80002cc:	f000 f8b8 	bl	8000440 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fde6 	bl	8001ebc <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
		Error_Handler();
 80002f6:	f000 f8a3 	bl	8000440 <Error_Handler>
	}
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <MX_CAN_Init+0x9c>)
 800030c:	4a25      	ldr	r2, [pc, #148]	; (80003a4 <MX_CAN_Init+0xa0>)
 800030e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000312:	2209      	movs	r2, #9
 8000314:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <MX_CAN_Init+0x9c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000324:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000328:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800032a:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_CAN_Init+0x9c>)
 800032c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000330:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000334:	2200      	movs	r2, #0
 8000336:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_CAN_Init+0x9c>)
 800033a:	2200      	movs	r2, #0
 800033c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000340:	2200      	movs	r2, #0
 8000342:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000346:	2200      	movs	r2, #0
 8000348:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_CAN_Init+0x9c>)
 800034c:	2200      	movs	r2, #0
 800034e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000352:	2200      	movs	r2, #0
 8000354:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000356:	4812      	ldr	r0, [pc, #72]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000358:	f000 fa64 	bl	8000824 <HAL_CAN_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_CAN_Init+0x62>
		Error_Handler();
 8000362:	f000 f86d 	bl	8000440 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000366:	2301      	movs	r3, #1
 8000368:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;
 800036a:	230a      	movs	r3, #10
 800036c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000 << 5;
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x00 << 5;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000386:	2301      	movs	r3, #1
 8000388:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 800038a:	230d      	movs	r3, #13
 800038c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800038e:	463b      	mov	r3, r7
 8000390:	4619      	mov	r1, r3
 8000392:	4803      	ldr	r0, [pc, #12]	; (80003a0 <MX_CAN_Init+0x9c>)
 8000394:	f000 fb41 	bl	8000a1a <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3728      	adds	r7, #40	; 0x28
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000008c 	.word	0x2000008c
 80003a4:	40006400 	.word	0x40006400

080003a8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <MX_USART1_UART_Init+0x50>)
 80003b0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f001 fefa 	bl	80021d8 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003ea:	f000 f829 	bl	8000440 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000b4 	.word	0x200000b4
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_GPIO_Init+0x40>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <MX_GPIO_Init+0x40>)
 8000408:	f043 0320 	orr.w	r3, r3, #32
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_GPIO_Init+0x40>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0320 	and.w	r3, r3, #32
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_GPIO_Init+0x40>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a07      	ldr	r2, [pc, #28]	; (800043c <MX_GPIO_Init+0x40>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_GPIO_Init+0x40>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_MspInit+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x5c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_MspInit+0x60>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_MspInit+0x60>)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a20      	ldr	r2, [pc, #128]	; (800054c <HAL_CAN_MspInit+0x9c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d139      	bne.n	8000544 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <HAL_CAN_MspInit+0xa0>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a1e      	ldr	r2, [pc, #120]	; (8000550 <HAL_CAN_MspInit+0xa0>)
 80004d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004da:	61d3      	str	r3, [r2, #28]
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <HAL_CAN_MspInit+0xa0>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <HAL_CAN_MspInit+0xa0>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <HAL_CAN_MspInit+0xa0>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_CAN_MspInit+0xa0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	480f      	ldr	r0, [pc, #60]	; (8000554 <HAL_CAN_MspInit+0xa4>)
 8000516:	f001 f8d3 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800051a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_CAN_MspInit+0xa4>)
 8000530:	f001 f8c6 	bl	80016c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2014      	movs	r0, #20
 800053a:	f001 f88a 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800053e:	2014      	movs	r0, #20
 8000540:	f001 f8a3 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40006400 	.word	0x40006400
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <HAL_UART_MspInit+0x8c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d131      	bne.n	80005dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_UART_MspInit+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <HAL_UART_MspInit+0x90>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <HAL_UART_MspInit+0x94>)
 80005be:	f001 f87f 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_UART_MspInit+0x94>)
 80005d8:	f001 f872 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40013800 	.word	0x40013800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000636:	f000 f8b5 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000646:	f000 fd0a 	bl	800105e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f001 ff78 	bl	8002578 <__errno>
 8000688:	4603      	mov	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <_sbrk+0x64>)
 80006a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20002800 	.word	0x20002800
 80006b4:	00000400 	.word	0x00000400
 80006b8:	200001a0 	.word	0x200001a0
 80006bc:	200001b8 	.word	0x200001b8

080006c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006cc:	f7ff fff8 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d2:	490c      	ldr	r1, [pc, #48]	; (8000704 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d4:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006e8:	4c09      	ldr	r4, [pc, #36]	; (8000710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f6:	f001 ff45 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fd69 	bl	80001d0 <main>
  bx lr
 80006fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000708:	08002f6c 	.word	0x08002f6c
  ldr r2, =_sbss
 800070c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000710:	200001b8 	.word	0x200001b8

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 ff87 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	200f      	movs	r0, #15
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff fe8a 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 ff9f 	bl	80016a6 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 ff67 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000008 	.word	0x20000008
 80007c4:	200001a4 	.word	0x200001a4

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	200001a4 	.word	0x200001a4

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff fff0 	bl	80007c8 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffe0 	bl	80007c8 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008

08000824 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e0ed      	b.n	8000a12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d102      	bne.n	8000848 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe34 	bl	80004b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 0201 	orr.w	r2, r2, #1
 8000856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000858:	f7ff ffb6 	bl	80007c8 <HAL_GetTick>
 800085c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800085e:	e012      	b.n	8000886 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000860:	f7ff ffb2 	bl	80007c8 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d90b      	bls.n	8000886 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2205      	movs	r2, #5
 800087e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e0c5      	b.n	8000a12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0e5      	beq.n	8000860 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f022 0202 	bic.w	r2, r2, #2
 80008a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008a4:	f7ff ff90 	bl	80007c8 <HAL_GetTick>
 80008a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008aa:	e012      	b.n	80008d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008ac:	f7ff ff8c 	bl	80007c8 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b0a      	cmp	r3, #10
 80008b8:	d90b      	bls.n	80008d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2205      	movs	r2, #5
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e09f      	b.n	8000a12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e5      	bne.n	80008ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7e1b      	ldrb	r3, [r3, #24]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	e007      	b.n	800090a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7e5b      	ldrb	r3, [r3, #25]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d108      	bne.n	8000924 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e007      	b.n	8000934 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000932:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7e9b      	ldrb	r3, [r3, #26]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d108      	bne.n	800094e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 0220 	orr.w	r2, r2, #32
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	e007      	b.n	800095e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0220 	bic.w	r2, r2, #32
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7edb      	ldrb	r3, [r3, #27]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d108      	bne.n	8000978 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0210 	bic.w	r2, r2, #16
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e007      	b.n	8000988 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f042 0210 	orr.w	r2, r2, #16
 8000986:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7f1b      	ldrb	r3, [r3, #28]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d108      	bne.n	80009a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f042 0208 	orr.w	r2, r2, #8
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e007      	b.n	80009b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0208 	bic.w	r2, r2, #8
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7f5b      	ldrb	r3, [r3, #29]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d108      	bne.n	80009cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f042 0204 	orr.w	r2, r2, #4
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e007      	b.n	80009dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0204 	bic.w	r2, r2, #4
 80009da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	ea42 0103 	orr.w	r1, r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b087      	sub	sp, #28
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a32:	7cfb      	ldrb	r3, [r7, #19]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d003      	beq.n	8000a40 <HAL_CAN_ConfigFilter+0x26>
 8000a38:	7cfb      	ldrb	r3, [r7, #19]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	f040 80aa 	bne.w	8000b94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a46:	f043 0201 	orr.w	r2, r3, #1
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f003 031f 	and.w	r3, r3, #31
 8000a58:	2201      	movs	r2, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d123      	bne.n	8000ac2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	401a      	ands	r2, r3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3248      	adds	r2, #72	; 0x48
 8000aa2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ab6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ab8:	6979      	ldr	r1, [r7, #20]
 8000aba:	3348      	adds	r3, #72	; 0x48
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d122      	bne.n	8000b10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3248      	adds	r2, #72	; 0x48
 8000af0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b06:	6979      	ldr	r1, [r7, #20]
 8000b08:	3348      	adds	r3, #72	; 0x48
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b2a:	e007      	b.n	8000b3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d109      	bne.n	8000b58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	431a      	orrs	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d107      	bne.n	8000b80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b86:	f023 0201 	bic.w	r2, r3, #1
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e006      	b.n	8000ba2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
  }
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d12e      	bne.n	8000c1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0201 	bic.w	r2, r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000bd8:	f7ff fdf6 	bl	80007c8 <HAL_GetTick>
 8000bdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bde:	e012      	b.n	8000c06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000be0:	f7ff fdf2 	bl	80007c8 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b0a      	cmp	r3, #10
 8000bec:	d90b      	bls.n	8000c06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e012      	b.n	8000c2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1e5      	bne.n	8000be0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e006      	b.n	8000c2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
  }
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c52:	7ffb      	ldrb	r3, [r7, #31]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d003      	beq.n	8000c60 <HAL_CAN_AddTxMessage+0x2c>
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	f040 80ad 	bne.w	8000dba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10a      	bne.n	8000c80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8095 	beq.w	8000daa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	0e1b      	lsrs	r3, r3, #24
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10d      	bne.n	8000cb8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ca6:	68f9      	ldr	r1, [r7, #12]
 8000ca8:	6809      	ldr	r1, [r1, #0]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3318      	adds	r3, #24
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	440b      	add	r3, r1
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e00f      	b.n	8000cd8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc8:	68f9      	ldr	r1, [r7, #12]
 8000cca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ccc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3318      	adds	r3, #24
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	440b      	add	r3, r1
 8000cd6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3318      	adds	r3, #24
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3304      	adds	r3, #4
 8000cea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	7d1b      	ldrb	r3, [r3, #20]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d111      	bne.n	8000d18 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3318      	adds	r3, #24
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	4413      	add	r3, r2
 8000d00:	3304      	adds	r3, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	6811      	ldr	r1, [r2, #0]
 8000d08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3318      	adds	r3, #24
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	440b      	add	r3, r1
 8000d14:	3304      	adds	r3, #4
 8000d16:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3307      	adds	r3, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	061a      	lsls	r2, r3, #24
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3306      	adds	r3, #6
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	041b      	lsls	r3, r3, #16
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3305      	adds	r3, #5
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	4313      	orrs	r3, r2
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	3204      	adds	r2, #4
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6811      	ldr	r1, [r2, #0]
 8000d40:	ea43 0200 	orr.w	r2, r3, r0
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	440b      	add	r3, r1
 8000d4a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3303      	adds	r3, #3
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	061a      	lsls	r2, r3, #24
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	4610      	mov	r0, r2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	6811      	ldr	r1, [r2, #0]
 8000d76:	ea43 0200 	orr.w	r2, r3, r0
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	440b      	add	r3, r1
 8000d80:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3318      	adds	r3, #24
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	6811      	ldr	r1, [r2, #0]
 8000d98:	f043 0201 	orr.w	r2, r3, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3318      	adds	r3, #24
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	440b      	add	r3, r1
 8000da4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e00e      	b.n	8000dc8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e006      	b.n	8000dc8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
  }
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3724      	adds	r7, #36	; 0x24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b087      	sub	sp, #28
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d003      	beq.n	8000df6 <HAL_CAN_GetRxMessage+0x24>
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	f040 8103 	bne.w	8000ffc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10e      	bne.n	8000e1a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0f7      	b.n	800100a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d107      	bne.n	8000e38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0e8      	b.n	800100a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	331b      	adds	r3, #27
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4413      	add	r3, r2
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0204 	and.w	r2, r3, #4
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10c      	bne.n	8000e70 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	331b      	adds	r3, #27
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0d5b      	lsrs	r3, r3, #21
 8000e66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	331b      	adds	r3, #27
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0202 	and.w	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	331b      	adds	r3, #27
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	331b      	adds	r3, #27
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	3304      	adds	r3, #4
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 020f 	and.w	r2, r3, #15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	331b      	adds	r3, #27
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	331b      	adds	r3, #27
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	3304      	adds	r3, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0a1a      	lsrs	r2, r3, #8
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0c1a      	lsrs	r2, r3, #16
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e1a      	lsrs	r2, r3, #24
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3303      	adds	r3, #3
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0a1a      	lsrs	r2, r3, #8
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3305      	adds	r3, #5
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1a      	lsrs	r2, r3, #16
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3306      	adds	r3, #6
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0e1a      	lsrs	r2, r3, #24
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	3307      	adds	r3, #7
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0220 	orr.w	r2, r2, #32
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0220 	orr.w	r2, r2, #32
 8000ff6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e006      	b.n	800100a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001024:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d002      	beq.n	8001032 <HAL_CAN_ActivateNotification+0x1e>
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d109      	bne.n	8001046 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6959      	ldr	r1, [r3, #20]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e006      	b.n	8001054 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
  }
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b08a      	sub	sp, #40	; 0x28
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d07c      	beq.n	800119e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d023      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2201      	movs	r2, #1
 80010b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f983 	bl	80013cc <HAL_CAN_TxMailbox0CompleteCallback>
 80010c6:	e016      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
 80010da:	e00c      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	e002      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f986 	bl	8001402 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d024      	beq.n	800114a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f962 	bl	80013de <HAL_CAN_TxMailbox1CompleteCallback>
 800111a:	e016      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	e00c      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
 8001142:	e002      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f965 	bl	8001414 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d024      	beq.n	800119e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f941 	bl	80013f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800116e:	e016      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	e00c      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
 8001196:	e002      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f944 	bl	8001426 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2210      	movs	r2, #16
 80011c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f92a 	bl	8001438 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7fe ffad 	bl	800015c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2208      	movs	r2, #8
 8001240:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f90a 	bl	800145c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f8f2 	bl	800144a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00b      	beq.n	8001288 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2210      	movs	r2, #16
 8001280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f8f3 	bl	800146e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f8eb 	bl	8001480 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d07b      	beq.n	80013ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d072      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001318:	2b00      	cmp	r3, #0
 800131a:	d043      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d03e      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800132c:	2b60      	cmp	r3, #96	; 0x60
 800132e:	d02b      	beq.n	8001388 <HAL_CAN_IRQHandler+0x32a>
 8001330:	2b60      	cmp	r3, #96	; 0x60
 8001332:	d82e      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 8001334:	2b50      	cmp	r3, #80	; 0x50
 8001336:	d022      	beq.n	800137e <HAL_CAN_IRQHandler+0x320>
 8001338:	2b50      	cmp	r3, #80	; 0x50
 800133a:	d82a      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 800133c:	2b40      	cmp	r3, #64	; 0x40
 800133e:	d019      	beq.n	8001374 <HAL_CAN_IRQHandler+0x316>
 8001340:	2b40      	cmp	r3, #64	; 0x40
 8001342:	d826      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 8001344:	2b30      	cmp	r3, #48	; 0x30
 8001346:	d010      	beq.n	800136a <HAL_CAN_IRQHandler+0x30c>
 8001348:	2b30      	cmp	r3, #48	; 0x30
 800134a:	d822      	bhi.n	8001392 <HAL_CAN_IRQHandler+0x334>
 800134c:	2b10      	cmp	r3, #16
 800134e:	d002      	beq.n	8001356 <HAL_CAN_IRQHandler+0x2f8>
 8001350:	2b20      	cmp	r3, #32
 8001352:	d005      	beq.n	8001360 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001354:	e01d      	b.n	8001392 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800135e:	e019      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001368:	e014      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001372:	e00f      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800137c:	e00a      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001386:	e005      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001390:	e000      	b.n	8001394 <HAL_CAN_IRQHandler+0x336>
            break;
 8001392:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2204      	movs	r2, #4
 80013aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f867 	bl	8001492 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4906      	ldr	r1, [pc, #24]	; (800153c <__NVIC_EnableIRQ+0x34>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff90 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff2d 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff42 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff90 	bl	8001594 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5f 	bl	8001540 <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff35 	bl	8001508 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e161      	b.n	8001998 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8150 	bne.w	8001992 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a97      	ldr	r2, [pc, #604]	; (8001954 <HAL_GPIO_Init+0x294>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4a95      	ldr	r2, [pc, #596]	; (8001954 <HAL_GPIO_Init+0x294>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4a95      	ldr	r2, [pc, #596]	; (8001958 <HAL_GPIO_Init+0x298>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a93      	ldr	r2, [pc, #588]	; (8001958 <HAL_GPIO_Init+0x298>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a93      	ldr	r2, [pc, #588]	; (800195c <HAL_GPIO_Init+0x29c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a91      	ldr	r2, [pc, #580]	; (800195c <HAL_GPIO_Init+0x29c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a91      	ldr	r2, [pc, #580]	; (8001960 <HAL_GPIO_Init+0x2a0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a8f      	ldr	r2, [pc, #572]	; (8001960 <HAL_GPIO_Init+0x2a0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a8f      	ldr	r2, [pc, #572]	; (8001964 <HAL_GPIO_Init+0x2a4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a8d      	ldr	r2, [pc, #564]	; (8001964 <HAL_GPIO_Init+0x2a4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a76      	ldr	r2, [pc, #472]	; (8001968 <HAL_GPIO_Init+0x2a8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a9 	beq.w	8001992 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_GPIO_Init+0x2ac>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x2ac>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_GPIO_Init+0x2ac>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a45      	ldr	r2, [pc, #276]	; (8001970 <HAL_GPIO_Init+0x2b0>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3d      	ldr	r2, [pc, #244]	; (8001974 <HAL_GPIO_Init+0x2b4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1dc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3b      	ldr	r2, [pc, #236]	; (800197c <HAL_GPIO_Init+0x2bc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001894:	2302      	movs	r3, #2
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 8001898:	2303      	movs	r3, #3
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 80018a0:	2300      	movs	r3, #0
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b2:	492f      	ldr	r1, [pc, #188]	; (8001970 <HAL_GPIO_Init+0x2b0>)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	492b      	ldr	r1, [pc, #172]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4927      	ldr	r1, [pc, #156]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	4921      	ldr	r1, [pc, #132]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	491d      	ldr	r1, [pc, #116]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 800190c:	4013      	ands	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4917      	ldr	r1, [pc, #92]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4913      	ldr	r1, [pc, #76]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01f      	beq.n	8001984 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	490d      	ldr	r1, [pc, #52]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e01f      	b.n	8001992 <HAL_GPIO_Init+0x2d2>
 8001952:	bf00      	nop
 8001954:	10320000 	.word	0x10320000
 8001958:	10310000 	.word	0x10310000
 800195c:	10220000 	.word	0x10220000
 8001960:	10210000 	.word	0x10210000
 8001964:	10120000 	.word	0x10120000
 8001968:	10110000 	.word	0x10110000
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000
 8001974:	40010800 	.word	0x40010800
 8001978:	40010c00 	.word	0x40010c00
 800197c:	40011000 	.word	0x40011000
 8001980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_GPIO_Init+0x2f4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	43db      	mvns	r3, r3
 800198c:	4909      	ldr	r1, [pc, #36]	; (80019b4 <HAL_GPIO_Init+0x2f4>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f47f ae96 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	372c      	adds	r7, #44	; 0x2c
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e272      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8087 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d00c      	beq.n	80019fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e4:	4b8f      	ldr	r3, [pc, #572]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d112      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5e>
 80019f0:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d10b      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d06c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x12c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d168      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e24c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x76>
 8001a20:	4b80      	ldr	r3, [pc, #512]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7f      	ldr	r2, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e02e      	b.n	8001a8c <HAL_RCC_OscConfig+0xd4>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x98>
 8001a36:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7a      	ldr	r2, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a77      	ldr	r2, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e01d      	b.n	8001a8c <HAL_RCC_OscConfig+0xd4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0xbc>
 8001a5a:	4b72      	ldr	r3, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a71      	ldr	r2, [pc, #452]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0xd4>
 8001a74:	4b6b      	ldr	r3, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6a      	ldr	r2, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a67      	ldr	r2, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7fe fe98 	bl	80007c8 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7fe fe94 	bl	80007c8 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e200      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0xe4>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7fe fe84 	bl	80007c8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7fe fe80 	bl	80007c8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1ec      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x10c>
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x18c>
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x176>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1c0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4939      	ldr	r1, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7fe fe39 	bl	80007c8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7fe fe35 	bl	80007c8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1a1      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7fe fe18 	bl	80007c8 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7fe fe14 	bl	80007c8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e180      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03a      	beq.n	8001c3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d019      	beq.n	8001c02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7fe fdf8 	bl	80007c8 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7fe fdf4 	bl	80007c8 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e160      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f000 face 	bl	800219c <RCC_Delay>
 8001c00:	e01c      	b.n	8001c3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7fe fdde 	bl	80007c8 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0e:	e00f      	b.n	8001c30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7fe fdda 	bl	80007c8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e146      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	42420000 	.word	0x42420000
 8001c2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e9      	bne.n	8001c10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a6 	beq.w	8001d96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4e:	4b8b      	ldr	r3, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10d      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a87      	ldr	r2, [pc, #540]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c82:	4b7f      	ldr	r3, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x4c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7e      	ldr	r2, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x4c8>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7fe fd9b 	bl	80007c8 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7fe fd97 	bl	80007c8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b64      	cmp	r3, #100	; 0x64
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e103      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x4c8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x312>
 8001cbc:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e02d      	b.n	8001d26 <HAL_RCC_OscConfig+0x36e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x334>
 8001cd2:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	e01c      	b.n	8001d26 <HAL_RCC_OscConfig+0x36e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d10c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x356>
 8001cf4:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a60      	ldr	r2, [pc, #384]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a5d      	ldr	r2, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	e00b      	b.n	8001d26 <HAL_RCC_OscConfig+0x36e>
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a5a      	ldr	r2, [pc, #360]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d015      	beq.n	8001d5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe fd4b 	bl	80007c8 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7fe fd47 	bl	80007c8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0b1      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ee      	beq.n	8001d36 <HAL_RCC_OscConfig+0x37e>
 8001d58:	e014      	b.n	8001d84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fd35 	bl	80007c8 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe fd31 	bl	80007c8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e09b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ee      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d105      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8087 	beq.w	8001eae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d061      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d146      	bne.n	8001e42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x4cc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe fd05 	bl	80007c8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7fe fd01 	bl	80007c8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e06d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4921      	ldr	r1, [pc, #132]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a19      	ldr	r1, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fcd5 	bl	80007c8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7fe fcd1 	bl	80007c8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e03d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46a>
 8001e40:	e035      	b.n	8001eae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7fe fcbe 	bl	80007c8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fcba 	bl	80007c8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e026      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x498>
 8001e6e:	e01e      	b.n	8001eae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e019      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x500>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0d0      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d910      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b67      	ldr	r3, [pc, #412]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 0207 	bic.w	r2, r3, #7
 8001ee6:	4965      	ldr	r1, [pc, #404]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d040      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d115      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e073      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06b      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4936      	ldr	r1, [pc, #216]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fc0c 	bl	80007c8 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7fe fc08 	bl	80007c8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e053      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d210      	bcs.n	800200c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f821 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1cc>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1d0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fb6a 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000
 8002084:	08002f04 	.word	0x08002f04
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x30>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x36>
 80020be:	e027      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c2:	613b      	str	r3, [r7, #16]
      break;
 80020c4:	e027      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_RCC_GetSysClockFreq+0x94>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0c5b      	lsrs	r3, r3, #17
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f2:	fb03 f202 	mul.w	r2, r3, r2
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e004      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	613b      	str	r3, [r7, #16]
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	693b      	ldr	r3, [r7, #16]
}
 8002118:	4618      	mov	r0, r3
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	007a1200 	.word	0x007a1200
 800212c:	08002f1c 	.word	0x08002f1c
 8002130:	08002f2c 	.word	0x08002f2c
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08002f14 	.word	0x08002f14

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08002f14 	.word	0x08002f14

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000000 	.word	0x20000000
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e042      	b.n	8002270 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe f9aa 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f91d 	bl	800245c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b20      	cmp	r3, #32
 8002296:	d16d      	bne.n	8002374 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_UART_Transmit+0x2c>
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e066      	b.n	8002376 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2221      	movs	r2, #33	; 0x21
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022b6:	f7fe fa87 	bl	80007c8 <HAL_GetTick>
 80022ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d0:	d108      	bne.n	80022e4 <HAL_UART_Transmit+0x6c>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d104      	bne.n	80022e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	e003      	b.n	80022ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022ec:	e02a      	b.n	8002344 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f840 	bl	800237e <UART_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e036      	b.n	8002376 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800231c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3302      	adds	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e007      	b.n	8002336 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3301      	adds	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1cf      	bne.n	80022ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2140      	movs	r1, #64	; 0x40
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f810 	bl	800237e <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e006      	b.n	8002376 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b090      	sub	sp, #64	; 0x40
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238e:	e050      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002396:	d04c      	beq.n	8002432 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0x30>
 800239e:	f7fe fa13 	bl	80007c8 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d241      	bcs.n	8002432 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	330c      	adds	r3, #12
 80023cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ce:	637a      	str	r2, [r7, #52]	; 0x34
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e5      	bne.n	80023ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3314      	adds	r3, #20
 80023e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	613b      	str	r3, [r7, #16]
   return(result);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3314      	adds	r3, #20
 8002400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002402:	623a      	str	r2, [r7, #32]
 8002404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002406:	69f9      	ldr	r1, [r7, #28]
 8002408:	6a3a      	ldr	r2, [r7, #32]
 800240a:	e841 2300 	strex	r3, r2, [r1]
 800240e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e5      	bne.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e00f      	b.n	8002452 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	429a      	cmp	r2, r3
 800244e:	d09f      	beq.n	8002390 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3740      	adds	r7, #64	; 0x40
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002496:	f023 030c 	bic.w	r3, r3, #12
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <UART_SetConfig+0x114>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d103      	bne.n	80024cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024c4:	f7ff fe56 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	e002      	b.n	80024d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024cc:	f7ff fe3e 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 80024d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009a      	lsls	r2, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <UART_SetConfig+0x118>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	0119      	lsls	r1, r3, #4
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009a      	lsls	r2, r3, #2
 80024fc:	441a      	add	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fbb2 f2f3 	udiv	r2, r2, r3
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <UART_SetConfig+0x118>)
 800250a:	fba3 0302 	umull	r0, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2064      	movs	r0, #100	; 0x64
 8002512:	fb00 f303 	mul.w	r3, r0, r3
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	3332      	adds	r3, #50	; 0x32
 800251c:	4a15      	ldr	r2, [pc, #84]	; (8002574 <UART_SetConfig+0x118>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002528:	4419      	add	r1, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	441a      	add	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <UART_SetConfig+0x118>)
 8002542:	fba3 0302 	umull	r0, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2064      	movs	r0, #100	; 0x64
 800254a:	fb00 f303 	mul.w	r3, r0, r3
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	3332      	adds	r3, #50	; 0x32
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <UART_SetConfig+0x118>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	440a      	add	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013800 	.word	0x40013800
 8002574:	51eb851f 	.word	0x51eb851f

08002578 <__errno>:
 8002578:	4b01      	ldr	r3, [pc, #4]	; (8002580 <__errno+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	2000000c 	.word	0x2000000c

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	2600      	movs	r6, #0
 8002588:	4d0c      	ldr	r5, [pc, #48]	; (80025bc <__libc_init_array+0x38>)
 800258a:	4c0d      	ldr	r4, [pc, #52]	; (80025c0 <__libc_init_array+0x3c>)
 800258c:	1b64      	subs	r4, r4, r5
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	42a6      	cmp	r6, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	f000 fc9c 	bl	8002ed0 <_init>
 8002598:	2600      	movs	r6, #0
 800259a:	4d0a      	ldr	r5, [pc, #40]	; (80025c4 <__libc_init_array+0x40>)
 800259c:	4c0a      	ldr	r4, [pc, #40]	; (80025c8 <__libc_init_array+0x44>)
 800259e:	1b64      	subs	r4, r4, r5
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	42a6      	cmp	r6, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ac:	4798      	blx	r3
 80025ae:	3601      	adds	r6, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b6:	4798      	blx	r3
 80025b8:	3601      	adds	r6, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	08002f64 	.word	0x08002f64
 80025c0:	08002f64 	.word	0x08002f64
 80025c4:	08002f64 	.word	0x08002f64
 80025c8:	08002f68 	.word	0x08002f68

080025cc <memset>:
 80025cc:	4603      	mov	r3, r0
 80025ce:	4402      	add	r2, r0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <memset+0xa>
 80025d4:	4770      	bx	lr
 80025d6:	f803 1b01 	strb.w	r1, [r3], #1
 80025da:	e7f9      	b.n	80025d0 <memset+0x4>

080025dc <siprintf>:
 80025dc:	b40e      	push	{r1, r2, r3}
 80025de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025e2:	b500      	push	{lr}
 80025e4:	b09c      	sub	sp, #112	; 0x70
 80025e6:	ab1d      	add	r3, sp, #116	; 0x74
 80025e8:	9002      	str	r0, [sp, #8]
 80025ea:	9006      	str	r0, [sp, #24]
 80025ec:	9107      	str	r1, [sp, #28]
 80025ee:	9104      	str	r1, [sp, #16]
 80025f0:	4808      	ldr	r0, [pc, #32]	; (8002614 <siprintf+0x38>)
 80025f2:	4909      	ldr	r1, [pc, #36]	; (8002618 <siprintf+0x3c>)
 80025f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80025f8:	9105      	str	r1, [sp, #20]
 80025fa:	6800      	ldr	r0, [r0, #0]
 80025fc:	a902      	add	r1, sp, #8
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	f000 f868 	bl	80026d4 <_svfiprintf_r>
 8002604:	2200      	movs	r2, #0
 8002606:	9b02      	ldr	r3, [sp, #8]
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	b01c      	add	sp, #112	; 0x70
 800260c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002610:	b003      	add	sp, #12
 8002612:	4770      	bx	lr
 8002614:	2000000c 	.word	0x2000000c
 8002618:	ffff0208 	.word	0xffff0208

0800261c <__ssputs_r>:
 800261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002620:	688e      	ldr	r6, [r1, #8]
 8002622:	4682      	mov	sl, r0
 8002624:	429e      	cmp	r6, r3
 8002626:	460c      	mov	r4, r1
 8002628:	4690      	mov	r8, r2
 800262a:	461f      	mov	r7, r3
 800262c:	d838      	bhi.n	80026a0 <__ssputs_r+0x84>
 800262e:	898a      	ldrh	r2, [r1, #12]
 8002630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002634:	d032      	beq.n	800269c <__ssputs_r+0x80>
 8002636:	6825      	ldr	r5, [r4, #0]
 8002638:	6909      	ldr	r1, [r1, #16]
 800263a:	3301      	adds	r3, #1
 800263c:	eba5 0901 	sub.w	r9, r5, r1
 8002640:	6965      	ldr	r5, [r4, #20]
 8002642:	444b      	add	r3, r9
 8002644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800264c:	106d      	asrs	r5, r5, #1
 800264e:	429d      	cmp	r5, r3
 8002650:	bf38      	it	cc
 8002652:	461d      	movcc	r5, r3
 8002654:	0553      	lsls	r3, r2, #21
 8002656:	d531      	bpl.n	80026bc <__ssputs_r+0xa0>
 8002658:	4629      	mov	r1, r5
 800265a:	f000 fb6f 	bl	8002d3c <_malloc_r>
 800265e:	4606      	mov	r6, r0
 8002660:	b950      	cbnz	r0, 8002678 <__ssputs_r+0x5c>
 8002662:	230c      	movs	r3, #12
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f8ca 3000 	str.w	r3, [sl]
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002672:	81a3      	strh	r3, [r4, #12]
 8002674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002678:	464a      	mov	r2, r9
 800267a:	6921      	ldr	r1, [r4, #16]
 800267c:	f000 face 	bl	8002c1c <memcpy>
 8002680:	89a3      	ldrh	r3, [r4, #12]
 8002682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268a:	81a3      	strh	r3, [r4, #12]
 800268c:	6126      	str	r6, [r4, #16]
 800268e:	444e      	add	r6, r9
 8002690:	6026      	str	r6, [r4, #0]
 8002692:	463e      	mov	r6, r7
 8002694:	6165      	str	r5, [r4, #20]
 8002696:	eba5 0509 	sub.w	r5, r5, r9
 800269a:	60a5      	str	r5, [r4, #8]
 800269c:	42be      	cmp	r6, r7
 800269e:	d900      	bls.n	80026a2 <__ssputs_r+0x86>
 80026a0:	463e      	mov	r6, r7
 80026a2:	4632      	mov	r2, r6
 80026a4:	4641      	mov	r1, r8
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	f000 fac6 	bl	8002c38 <memmove>
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	2000      	movs	r0, #0
 80026b0:	1b9b      	subs	r3, r3, r6
 80026b2:	60a3      	str	r3, [r4, #8]
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	4433      	add	r3, r6
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	e7db      	b.n	8002674 <__ssputs_r+0x58>
 80026bc:	462a      	mov	r2, r5
 80026be:	f000 fbb1 	bl	8002e24 <_realloc_r>
 80026c2:	4606      	mov	r6, r0
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d1e1      	bne.n	800268c <__ssputs_r+0x70>
 80026c8:	4650      	mov	r0, sl
 80026ca:	6921      	ldr	r1, [r4, #16]
 80026cc:	f000 face 	bl	8002c6c <_free_r>
 80026d0:	e7c7      	b.n	8002662 <__ssputs_r+0x46>
	...

080026d4 <_svfiprintf_r>:
 80026d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d8:	4698      	mov	r8, r3
 80026da:	898b      	ldrh	r3, [r1, #12]
 80026dc:	4607      	mov	r7, r0
 80026de:	061b      	lsls	r3, r3, #24
 80026e0:	460d      	mov	r5, r1
 80026e2:	4614      	mov	r4, r2
 80026e4:	b09d      	sub	sp, #116	; 0x74
 80026e6:	d50e      	bpl.n	8002706 <_svfiprintf_r+0x32>
 80026e8:	690b      	ldr	r3, [r1, #16]
 80026ea:	b963      	cbnz	r3, 8002706 <_svfiprintf_r+0x32>
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	f000 fb25 	bl	8002d3c <_malloc_r>
 80026f2:	6028      	str	r0, [r5, #0]
 80026f4:	6128      	str	r0, [r5, #16]
 80026f6:	b920      	cbnz	r0, 8002702 <_svfiprintf_r+0x2e>
 80026f8:	230c      	movs	r3, #12
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	e0d1      	b.n	80028a6 <_svfiprintf_r+0x1d2>
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	616b      	str	r3, [r5, #20]
 8002706:	2300      	movs	r3, #0
 8002708:	9309      	str	r3, [sp, #36]	; 0x24
 800270a:	2320      	movs	r3, #32
 800270c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002710:	2330      	movs	r3, #48	; 0x30
 8002712:	f04f 0901 	mov.w	r9, #1
 8002716:	f8cd 800c 	str.w	r8, [sp, #12]
 800271a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80028c0 <_svfiprintf_r+0x1ec>
 800271e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002722:	4623      	mov	r3, r4
 8002724:	469a      	mov	sl, r3
 8002726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800272a:	b10a      	cbz	r2, 8002730 <_svfiprintf_r+0x5c>
 800272c:	2a25      	cmp	r2, #37	; 0x25
 800272e:	d1f9      	bne.n	8002724 <_svfiprintf_r+0x50>
 8002730:	ebba 0b04 	subs.w	fp, sl, r4
 8002734:	d00b      	beq.n	800274e <_svfiprintf_r+0x7a>
 8002736:	465b      	mov	r3, fp
 8002738:	4622      	mov	r2, r4
 800273a:	4629      	mov	r1, r5
 800273c:	4638      	mov	r0, r7
 800273e:	f7ff ff6d 	bl	800261c <__ssputs_r>
 8002742:	3001      	adds	r0, #1
 8002744:	f000 80aa 	beq.w	800289c <_svfiprintf_r+0x1c8>
 8002748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800274a:	445a      	add	r2, fp
 800274c:	9209      	str	r2, [sp, #36]	; 0x24
 800274e:	f89a 3000 	ldrb.w	r3, [sl]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a2 	beq.w	800289c <_svfiprintf_r+0x1c8>
 8002758:	2300      	movs	r3, #0
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002762:	f10a 0a01 	add.w	sl, sl, #1
 8002766:	9304      	str	r3, [sp, #16]
 8002768:	9307      	str	r3, [sp, #28]
 800276a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800276e:	931a      	str	r3, [sp, #104]	; 0x68
 8002770:	4654      	mov	r4, sl
 8002772:	2205      	movs	r2, #5
 8002774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002778:	4851      	ldr	r0, [pc, #324]	; (80028c0 <_svfiprintf_r+0x1ec>)
 800277a:	f000 fa41 	bl	8002c00 <memchr>
 800277e:	9a04      	ldr	r2, [sp, #16]
 8002780:	b9d8      	cbnz	r0, 80027ba <_svfiprintf_r+0xe6>
 8002782:	06d0      	lsls	r0, r2, #27
 8002784:	bf44      	itt	mi
 8002786:	2320      	movmi	r3, #32
 8002788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800278c:	0711      	lsls	r1, r2, #28
 800278e:	bf44      	itt	mi
 8002790:	232b      	movmi	r3, #43	; 0x2b
 8002792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002796:	f89a 3000 	ldrb.w	r3, [sl]
 800279a:	2b2a      	cmp	r3, #42	; 0x2a
 800279c:	d015      	beq.n	80027ca <_svfiprintf_r+0xf6>
 800279e:	4654      	mov	r4, sl
 80027a0:	2000      	movs	r0, #0
 80027a2:	f04f 0c0a 	mov.w	ip, #10
 80027a6:	9a07      	ldr	r2, [sp, #28]
 80027a8:	4621      	mov	r1, r4
 80027aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027ae:	3b30      	subs	r3, #48	; 0x30
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	d94e      	bls.n	8002852 <_svfiprintf_r+0x17e>
 80027b4:	b1b0      	cbz	r0, 80027e4 <_svfiprintf_r+0x110>
 80027b6:	9207      	str	r2, [sp, #28]
 80027b8:	e014      	b.n	80027e4 <_svfiprintf_r+0x110>
 80027ba:	eba0 0308 	sub.w	r3, r0, r8
 80027be:	fa09 f303 	lsl.w	r3, r9, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	46a2      	mov	sl, r4
 80027c6:	9304      	str	r3, [sp, #16]
 80027c8:	e7d2      	b.n	8002770 <_svfiprintf_r+0x9c>
 80027ca:	9b03      	ldr	r3, [sp, #12]
 80027cc:	1d19      	adds	r1, r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	9103      	str	r1, [sp, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bfbb      	ittet	lt
 80027d6:	425b      	neglt	r3, r3
 80027d8:	f042 0202 	orrlt.w	r2, r2, #2
 80027dc:	9307      	strge	r3, [sp, #28]
 80027de:	9307      	strlt	r3, [sp, #28]
 80027e0:	bfb8      	it	lt
 80027e2:	9204      	strlt	r2, [sp, #16]
 80027e4:	7823      	ldrb	r3, [r4, #0]
 80027e6:	2b2e      	cmp	r3, #46	; 0x2e
 80027e8:	d10c      	bne.n	8002804 <_svfiprintf_r+0x130>
 80027ea:	7863      	ldrb	r3, [r4, #1]
 80027ec:	2b2a      	cmp	r3, #42	; 0x2a
 80027ee:	d135      	bne.n	800285c <_svfiprintf_r+0x188>
 80027f0:	9b03      	ldr	r3, [sp, #12]
 80027f2:	3402      	adds	r4, #2
 80027f4:	1d1a      	adds	r2, r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	9203      	str	r2, [sp, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bfb8      	it	lt
 80027fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002802:	9305      	str	r3, [sp, #20]
 8002804:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80028c4 <_svfiprintf_r+0x1f0>
 8002808:	2203      	movs	r2, #3
 800280a:	4650      	mov	r0, sl
 800280c:	7821      	ldrb	r1, [r4, #0]
 800280e:	f000 f9f7 	bl	8002c00 <memchr>
 8002812:	b140      	cbz	r0, 8002826 <_svfiprintf_r+0x152>
 8002814:	2340      	movs	r3, #64	; 0x40
 8002816:	eba0 000a 	sub.w	r0, r0, sl
 800281a:	fa03 f000 	lsl.w	r0, r3, r0
 800281e:	9b04      	ldr	r3, [sp, #16]
 8002820:	3401      	adds	r4, #1
 8002822:	4303      	orrs	r3, r0
 8002824:	9304      	str	r3, [sp, #16]
 8002826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282a:	2206      	movs	r2, #6
 800282c:	4826      	ldr	r0, [pc, #152]	; (80028c8 <_svfiprintf_r+0x1f4>)
 800282e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002832:	f000 f9e5 	bl	8002c00 <memchr>
 8002836:	2800      	cmp	r0, #0
 8002838:	d038      	beq.n	80028ac <_svfiprintf_r+0x1d8>
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <_svfiprintf_r+0x1f8>)
 800283c:	bb1b      	cbnz	r3, 8002886 <_svfiprintf_r+0x1b2>
 800283e:	9b03      	ldr	r3, [sp, #12]
 8002840:	3307      	adds	r3, #7
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	3308      	adds	r3, #8
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800284c:	4433      	add	r3, r6
 800284e:	9309      	str	r3, [sp, #36]	; 0x24
 8002850:	e767      	b.n	8002722 <_svfiprintf_r+0x4e>
 8002852:	460c      	mov	r4, r1
 8002854:	2001      	movs	r0, #1
 8002856:	fb0c 3202 	mla	r2, ip, r2, r3
 800285a:	e7a5      	b.n	80027a8 <_svfiprintf_r+0xd4>
 800285c:	2300      	movs	r3, #0
 800285e:	f04f 0c0a 	mov.w	ip, #10
 8002862:	4619      	mov	r1, r3
 8002864:	3401      	adds	r4, #1
 8002866:	9305      	str	r3, [sp, #20]
 8002868:	4620      	mov	r0, r4
 800286a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800286e:	3a30      	subs	r2, #48	; 0x30
 8002870:	2a09      	cmp	r2, #9
 8002872:	d903      	bls.n	800287c <_svfiprintf_r+0x1a8>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0c5      	beq.n	8002804 <_svfiprintf_r+0x130>
 8002878:	9105      	str	r1, [sp, #20]
 800287a:	e7c3      	b.n	8002804 <_svfiprintf_r+0x130>
 800287c:	4604      	mov	r4, r0
 800287e:	2301      	movs	r3, #1
 8002880:	fb0c 2101 	mla	r1, ip, r1, r2
 8002884:	e7f0      	b.n	8002868 <_svfiprintf_r+0x194>
 8002886:	ab03      	add	r3, sp, #12
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	462a      	mov	r2, r5
 800288c:	4638      	mov	r0, r7
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_svfiprintf_r+0x1fc>)
 8002890:	a904      	add	r1, sp, #16
 8002892:	f3af 8000 	nop.w
 8002896:	1c42      	adds	r2, r0, #1
 8002898:	4606      	mov	r6, r0
 800289a:	d1d6      	bne.n	800284a <_svfiprintf_r+0x176>
 800289c:	89ab      	ldrh	r3, [r5, #12]
 800289e:	065b      	lsls	r3, r3, #25
 80028a0:	f53f af2c 	bmi.w	80026fc <_svfiprintf_r+0x28>
 80028a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028a6:	b01d      	add	sp, #116	; 0x74
 80028a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ac:	ab03      	add	r3, sp, #12
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	462a      	mov	r2, r5
 80028b2:	4638      	mov	r0, r7
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <_svfiprintf_r+0x1fc>)
 80028b6:	a904      	add	r1, sp, #16
 80028b8:	f000 f87c 	bl	80029b4 <_printf_i>
 80028bc:	e7eb      	b.n	8002896 <_svfiprintf_r+0x1c2>
 80028be:	bf00      	nop
 80028c0:	08002f2e 	.word	0x08002f2e
 80028c4:	08002f34 	.word	0x08002f34
 80028c8:	08002f38 	.word	0x08002f38
 80028cc:	00000000 	.word	0x00000000
 80028d0:	0800261d 	.word	0x0800261d

080028d4 <_printf_common>:
 80028d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	4616      	mov	r6, r2
 80028da:	4699      	mov	r9, r3
 80028dc:	688a      	ldr	r2, [r1, #8]
 80028de:	690b      	ldr	r3, [r1, #16]
 80028e0:	4607      	mov	r7, r0
 80028e2:	4293      	cmp	r3, r2
 80028e4:	bfb8      	it	lt
 80028e6:	4613      	movlt	r3, r2
 80028e8:	6033      	str	r3, [r6, #0]
 80028ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028ee:	460c      	mov	r4, r1
 80028f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028f4:	b10a      	cbz	r2, 80028fa <_printf_common+0x26>
 80028f6:	3301      	adds	r3, #1
 80028f8:	6033      	str	r3, [r6, #0]
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	0699      	lsls	r1, r3, #26
 80028fe:	bf42      	ittt	mi
 8002900:	6833      	ldrmi	r3, [r6, #0]
 8002902:	3302      	addmi	r3, #2
 8002904:	6033      	strmi	r3, [r6, #0]
 8002906:	6825      	ldr	r5, [r4, #0]
 8002908:	f015 0506 	ands.w	r5, r5, #6
 800290c:	d106      	bne.n	800291c <_printf_common+0x48>
 800290e:	f104 0a19 	add.w	sl, r4, #25
 8002912:	68e3      	ldr	r3, [r4, #12]
 8002914:	6832      	ldr	r2, [r6, #0]
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	42ab      	cmp	r3, r5
 800291a:	dc28      	bgt.n	800296e <_printf_common+0x9a>
 800291c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002920:	1e13      	subs	r3, r2, #0
 8002922:	6822      	ldr	r2, [r4, #0]
 8002924:	bf18      	it	ne
 8002926:	2301      	movne	r3, #1
 8002928:	0692      	lsls	r2, r2, #26
 800292a:	d42d      	bmi.n	8002988 <_printf_common+0xb4>
 800292c:	4649      	mov	r1, r9
 800292e:	4638      	mov	r0, r7
 8002930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002934:	47c0      	blx	r8
 8002936:	3001      	adds	r0, #1
 8002938:	d020      	beq.n	800297c <_printf_common+0xa8>
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	68e5      	ldr	r5, [r4, #12]
 800293e:	f003 0306 	and.w	r3, r3, #6
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf18      	it	ne
 8002946:	2500      	movne	r5, #0
 8002948:	6832      	ldr	r2, [r6, #0]
 800294a:	f04f 0600 	mov.w	r6, #0
 800294e:	68a3      	ldr	r3, [r4, #8]
 8002950:	bf08      	it	eq
 8002952:	1aad      	subeq	r5, r5, r2
 8002954:	6922      	ldr	r2, [r4, #16]
 8002956:	bf08      	it	eq
 8002958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800295c:	4293      	cmp	r3, r2
 800295e:	bfc4      	itt	gt
 8002960:	1a9b      	subgt	r3, r3, r2
 8002962:	18ed      	addgt	r5, r5, r3
 8002964:	341a      	adds	r4, #26
 8002966:	42b5      	cmp	r5, r6
 8002968:	d11a      	bne.n	80029a0 <_printf_common+0xcc>
 800296a:	2000      	movs	r0, #0
 800296c:	e008      	b.n	8002980 <_printf_common+0xac>
 800296e:	2301      	movs	r3, #1
 8002970:	4652      	mov	r2, sl
 8002972:	4649      	mov	r1, r9
 8002974:	4638      	mov	r0, r7
 8002976:	47c0      	blx	r8
 8002978:	3001      	adds	r0, #1
 800297a:	d103      	bne.n	8002984 <_printf_common+0xb0>
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002984:	3501      	adds	r5, #1
 8002986:	e7c4      	b.n	8002912 <_printf_common+0x3e>
 8002988:	2030      	movs	r0, #48	; 0x30
 800298a:	18e1      	adds	r1, r4, r3
 800298c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002996:	4422      	add	r2, r4
 8002998:	3302      	adds	r3, #2
 800299a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800299e:	e7c5      	b.n	800292c <_printf_common+0x58>
 80029a0:	2301      	movs	r3, #1
 80029a2:	4622      	mov	r2, r4
 80029a4:	4649      	mov	r1, r9
 80029a6:	4638      	mov	r0, r7
 80029a8:	47c0      	blx	r8
 80029aa:	3001      	adds	r0, #1
 80029ac:	d0e6      	beq.n	800297c <_printf_common+0xa8>
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7d9      	b.n	8002966 <_printf_common+0x92>
	...

080029b4 <_printf_i>:
 80029b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029b8:	7e0f      	ldrb	r7, [r1, #24]
 80029ba:	4691      	mov	r9, r2
 80029bc:	2f78      	cmp	r7, #120	; 0x78
 80029be:	4680      	mov	r8, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	469a      	mov	sl, r3
 80029c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029ca:	d807      	bhi.n	80029dc <_printf_i+0x28>
 80029cc:	2f62      	cmp	r7, #98	; 0x62
 80029ce:	d80a      	bhi.n	80029e6 <_printf_i+0x32>
 80029d0:	2f00      	cmp	r7, #0
 80029d2:	f000 80d9 	beq.w	8002b88 <_printf_i+0x1d4>
 80029d6:	2f58      	cmp	r7, #88	; 0x58
 80029d8:	f000 80a4 	beq.w	8002b24 <_printf_i+0x170>
 80029dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029e4:	e03a      	b.n	8002a5c <_printf_i+0xa8>
 80029e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029ea:	2b15      	cmp	r3, #21
 80029ec:	d8f6      	bhi.n	80029dc <_printf_i+0x28>
 80029ee:	a101      	add	r1, pc, #4	; (adr r1, 80029f4 <_printf_i+0x40>)
 80029f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029f4:	08002a4d 	.word	0x08002a4d
 80029f8:	08002a61 	.word	0x08002a61
 80029fc:	080029dd 	.word	0x080029dd
 8002a00:	080029dd 	.word	0x080029dd
 8002a04:	080029dd 	.word	0x080029dd
 8002a08:	080029dd 	.word	0x080029dd
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	080029dd 	.word	0x080029dd
 8002a14:	080029dd 	.word	0x080029dd
 8002a18:	080029dd 	.word	0x080029dd
 8002a1c:	080029dd 	.word	0x080029dd
 8002a20:	08002b6f 	.word	0x08002b6f
 8002a24:	08002a91 	.word	0x08002a91
 8002a28:	08002b51 	.word	0x08002b51
 8002a2c:	080029dd 	.word	0x080029dd
 8002a30:	080029dd 	.word	0x080029dd
 8002a34:	08002b91 	.word	0x08002b91
 8002a38:	080029dd 	.word	0x080029dd
 8002a3c:	08002a91 	.word	0x08002a91
 8002a40:	080029dd 	.word	0x080029dd
 8002a44:	080029dd 	.word	0x080029dd
 8002a48:	08002b59 	.word	0x08002b59
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	1d1a      	adds	r2, r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	602a      	str	r2, [r5, #0]
 8002a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0a4      	b.n	8002baa <_printf_i+0x1f6>
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	6829      	ldr	r1, [r5, #0]
 8002a64:	0606      	lsls	r6, r0, #24
 8002a66:	f101 0304 	add.w	r3, r1, #4
 8002a6a:	d50a      	bpl.n	8002a82 <_printf_i+0xce>
 8002a6c:	680e      	ldr	r6, [r1, #0]
 8002a6e:	602b      	str	r3, [r5, #0]
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	da03      	bge.n	8002a7c <_printf_i+0xc8>
 8002a74:	232d      	movs	r3, #45	; 0x2d
 8002a76:	4276      	negs	r6, r6
 8002a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a7c:	230a      	movs	r3, #10
 8002a7e:	485e      	ldr	r0, [pc, #376]	; (8002bf8 <_printf_i+0x244>)
 8002a80:	e019      	b.n	8002ab6 <_printf_i+0x102>
 8002a82:	680e      	ldr	r6, [r1, #0]
 8002a84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a88:	602b      	str	r3, [r5, #0]
 8002a8a:	bf18      	it	ne
 8002a8c:	b236      	sxthne	r6, r6
 8002a8e:	e7ef      	b.n	8002a70 <_printf_i+0xbc>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	6820      	ldr	r0, [r4, #0]
 8002a94:	1d19      	adds	r1, r3, #4
 8002a96:	6029      	str	r1, [r5, #0]
 8002a98:	0601      	lsls	r1, r0, #24
 8002a9a:	d501      	bpl.n	8002aa0 <_printf_i+0xec>
 8002a9c:	681e      	ldr	r6, [r3, #0]
 8002a9e:	e002      	b.n	8002aa6 <_printf_i+0xf2>
 8002aa0:	0646      	lsls	r6, r0, #25
 8002aa2:	d5fb      	bpl.n	8002a9c <_printf_i+0xe8>
 8002aa4:	881e      	ldrh	r6, [r3, #0]
 8002aa6:	2f6f      	cmp	r7, #111	; 0x6f
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2308      	moveq	r3, #8
 8002aac:	230a      	movne	r3, #10
 8002aae:	4852      	ldr	r0, [pc, #328]	; (8002bf8 <_printf_i+0x244>)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ab6:	6865      	ldr	r5, [r4, #4]
 8002ab8:	2d00      	cmp	r5, #0
 8002aba:	bfa8      	it	ge
 8002abc:	6821      	ldrge	r1, [r4, #0]
 8002abe:	60a5      	str	r5, [r4, #8]
 8002ac0:	bfa4      	itt	ge
 8002ac2:	f021 0104 	bicge.w	r1, r1, #4
 8002ac6:	6021      	strge	r1, [r4, #0]
 8002ac8:	b90e      	cbnz	r6, 8002ace <_printf_i+0x11a>
 8002aca:	2d00      	cmp	r5, #0
 8002acc:	d04d      	beq.n	8002b6a <_printf_i+0x1b6>
 8002ace:	4615      	mov	r5, r2
 8002ad0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ad4:	fb03 6711 	mls	r7, r3, r1, r6
 8002ad8:	5dc7      	ldrb	r7, [r0, r7]
 8002ada:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ade:	4637      	mov	r7, r6
 8002ae0:	42bb      	cmp	r3, r7
 8002ae2:	460e      	mov	r6, r1
 8002ae4:	d9f4      	bls.n	8002ad0 <_printf_i+0x11c>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d10b      	bne.n	8002b02 <_printf_i+0x14e>
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	07de      	lsls	r6, r3, #31
 8002aee:	d508      	bpl.n	8002b02 <_printf_i+0x14e>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	6861      	ldr	r1, [r4, #4]
 8002af4:	4299      	cmp	r1, r3
 8002af6:	bfde      	ittt	le
 8002af8:	2330      	movle	r3, #48	; 0x30
 8002afa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002afe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b02:	1b52      	subs	r2, r2, r5
 8002b04:	6122      	str	r2, [r4, #16]
 8002b06:	464b      	mov	r3, r9
 8002b08:	4621      	mov	r1, r4
 8002b0a:	4640      	mov	r0, r8
 8002b0c:	f8cd a000 	str.w	sl, [sp]
 8002b10:	aa03      	add	r2, sp, #12
 8002b12:	f7ff fedf 	bl	80028d4 <_printf_common>
 8002b16:	3001      	adds	r0, #1
 8002b18:	d14c      	bne.n	8002bb4 <_printf_i+0x200>
 8002b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1e:	b004      	add	sp, #16
 8002b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b24:	4834      	ldr	r0, [pc, #208]	; (8002bf8 <_printf_i+0x244>)
 8002b26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b2a:	6829      	ldr	r1, [r5, #0]
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b32:	6029      	str	r1, [r5, #0]
 8002b34:	061d      	lsls	r5, r3, #24
 8002b36:	d514      	bpl.n	8002b62 <_printf_i+0x1ae>
 8002b38:	07df      	lsls	r7, r3, #31
 8002b3a:	bf44      	itt	mi
 8002b3c:	f043 0320 	orrmi.w	r3, r3, #32
 8002b40:	6023      	strmi	r3, [r4, #0]
 8002b42:	b91e      	cbnz	r6, 8002b4c <_printf_i+0x198>
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	f023 0320 	bic.w	r3, r3, #32
 8002b4a:	6023      	str	r3, [r4, #0]
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	e7af      	b.n	8002ab0 <_printf_i+0xfc>
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	f043 0320 	orr.w	r3, r3, #32
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	2378      	movs	r3, #120	; 0x78
 8002b5a:	4828      	ldr	r0, [pc, #160]	; (8002bfc <_printf_i+0x248>)
 8002b5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b60:	e7e3      	b.n	8002b2a <_printf_i+0x176>
 8002b62:	0659      	lsls	r1, r3, #25
 8002b64:	bf48      	it	mi
 8002b66:	b2b6      	uxthmi	r6, r6
 8002b68:	e7e6      	b.n	8002b38 <_printf_i+0x184>
 8002b6a:	4615      	mov	r5, r2
 8002b6c:	e7bb      	b.n	8002ae6 <_printf_i+0x132>
 8002b6e:	682b      	ldr	r3, [r5, #0]
 8002b70:	6826      	ldr	r6, [r4, #0]
 8002b72:	1d18      	adds	r0, r3, #4
 8002b74:	6961      	ldr	r1, [r4, #20]
 8002b76:	6028      	str	r0, [r5, #0]
 8002b78:	0635      	lsls	r5, r6, #24
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	d501      	bpl.n	8002b82 <_printf_i+0x1ce>
 8002b7e:	6019      	str	r1, [r3, #0]
 8002b80:	e002      	b.n	8002b88 <_printf_i+0x1d4>
 8002b82:	0670      	lsls	r0, r6, #25
 8002b84:	d5fb      	bpl.n	8002b7e <_printf_i+0x1ca>
 8002b86:	8019      	strh	r1, [r3, #0]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	6123      	str	r3, [r4, #16]
 8002b8e:	e7ba      	b.n	8002b06 <_printf_i+0x152>
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	1d1a      	adds	r2, r3, #4
 8002b96:	602a      	str	r2, [r5, #0]
 8002b98:	681d      	ldr	r5, [r3, #0]
 8002b9a:	6862      	ldr	r2, [r4, #4]
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f000 f82f 	bl	8002c00 <memchr>
 8002ba2:	b108      	cbz	r0, 8002ba8 <_printf_i+0x1f4>
 8002ba4:	1b40      	subs	r0, r0, r5
 8002ba6:	6060      	str	r0, [r4, #4]
 8002ba8:	6863      	ldr	r3, [r4, #4]
 8002baa:	6123      	str	r3, [r4, #16]
 8002bac:	2300      	movs	r3, #0
 8002bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb2:	e7a8      	b.n	8002b06 <_printf_i+0x152>
 8002bb4:	462a      	mov	r2, r5
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4640      	mov	r0, r8
 8002bba:	6923      	ldr	r3, [r4, #16]
 8002bbc:	47d0      	blx	sl
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	d0ab      	beq.n	8002b1a <_printf_i+0x166>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	079b      	lsls	r3, r3, #30
 8002bc6:	d413      	bmi.n	8002bf0 <_printf_i+0x23c>
 8002bc8:	68e0      	ldr	r0, [r4, #12]
 8002bca:	9b03      	ldr	r3, [sp, #12]
 8002bcc:	4298      	cmp	r0, r3
 8002bce:	bfb8      	it	lt
 8002bd0:	4618      	movlt	r0, r3
 8002bd2:	e7a4      	b.n	8002b1e <_printf_i+0x16a>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	4632      	mov	r2, r6
 8002bd8:	4649      	mov	r1, r9
 8002bda:	4640      	mov	r0, r8
 8002bdc:	47d0      	blx	sl
 8002bde:	3001      	adds	r0, #1
 8002be0:	d09b      	beq.n	8002b1a <_printf_i+0x166>
 8002be2:	3501      	adds	r5, #1
 8002be4:	68e3      	ldr	r3, [r4, #12]
 8002be6:	9903      	ldr	r1, [sp, #12]
 8002be8:	1a5b      	subs	r3, r3, r1
 8002bea:	42ab      	cmp	r3, r5
 8002bec:	dcf2      	bgt.n	8002bd4 <_printf_i+0x220>
 8002bee:	e7eb      	b.n	8002bc8 <_printf_i+0x214>
 8002bf0:	2500      	movs	r5, #0
 8002bf2:	f104 0619 	add.w	r6, r4, #25
 8002bf6:	e7f5      	b.n	8002be4 <_printf_i+0x230>
 8002bf8:	08002f3f 	.word	0x08002f3f
 8002bfc:	08002f50 	.word	0x08002f50

08002c00 <memchr>:
 8002c00:	4603      	mov	r3, r0
 8002c02:	b510      	push	{r4, lr}
 8002c04:	b2c9      	uxtb	r1, r1
 8002c06:	4402      	add	r2, r0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	d101      	bne.n	8002c12 <memchr+0x12>
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e003      	b.n	8002c1a <memchr+0x1a>
 8002c12:	7804      	ldrb	r4, [r0, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	428c      	cmp	r4, r1
 8002c18:	d1f6      	bne.n	8002c08 <memchr+0x8>
 8002c1a:	bd10      	pop	{r4, pc}

08002c1c <memcpy>:
 8002c1c:	440a      	add	r2, r1
 8002c1e:	4291      	cmp	r1, r2
 8002c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c24:	d100      	bne.n	8002c28 <memcpy+0xc>
 8002c26:	4770      	bx	lr
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c2e:	4291      	cmp	r1, r2
 8002c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c34:	d1f9      	bne.n	8002c2a <memcpy+0xe>
 8002c36:	bd10      	pop	{r4, pc}

08002c38 <memmove>:
 8002c38:	4288      	cmp	r0, r1
 8002c3a:	b510      	push	{r4, lr}
 8002c3c:	eb01 0402 	add.w	r4, r1, r2
 8002c40:	d902      	bls.n	8002c48 <memmove+0x10>
 8002c42:	4284      	cmp	r4, r0
 8002c44:	4623      	mov	r3, r4
 8002c46:	d807      	bhi.n	8002c58 <memmove+0x20>
 8002c48:	1e43      	subs	r3, r0, #1
 8002c4a:	42a1      	cmp	r1, r4
 8002c4c:	d008      	beq.n	8002c60 <memmove+0x28>
 8002c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c56:	e7f8      	b.n	8002c4a <memmove+0x12>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4402      	add	r2, r0
 8002c5c:	428a      	cmp	r2, r1
 8002c5e:	d100      	bne.n	8002c62 <memmove+0x2a>
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c6a:	e7f7      	b.n	8002c5c <memmove+0x24>

08002c6c <_free_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4605      	mov	r5, r0
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d040      	beq.n	8002cf6 <_free_r+0x8a>
 8002c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c78:	1f0c      	subs	r4, r1, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bfb8      	it	lt
 8002c7e:	18e4      	addlt	r4, r4, r3
 8002c80:	f000 f910 	bl	8002ea4 <__malloc_lock>
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <_free_r+0x8c>)
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	b933      	cbnz	r3, 8002c98 <_free_r+0x2c>
 8002c8a:	6063      	str	r3, [r4, #4]
 8002c8c:	6014      	str	r4, [r2, #0]
 8002c8e:	4628      	mov	r0, r5
 8002c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c94:	f000 b90c 	b.w	8002eb0 <__malloc_unlock>
 8002c98:	42a3      	cmp	r3, r4
 8002c9a:	d908      	bls.n	8002cae <_free_r+0x42>
 8002c9c:	6820      	ldr	r0, [r4, #0]
 8002c9e:	1821      	adds	r1, r4, r0
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	bf01      	itttt	eq
 8002ca4:	6819      	ldreq	r1, [r3, #0]
 8002ca6:	685b      	ldreq	r3, [r3, #4]
 8002ca8:	1809      	addeq	r1, r1, r0
 8002caa:	6021      	streq	r1, [r4, #0]
 8002cac:	e7ed      	b.n	8002c8a <_free_r+0x1e>
 8002cae:	461a      	mov	r2, r3
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	b10b      	cbz	r3, 8002cb8 <_free_r+0x4c>
 8002cb4:	42a3      	cmp	r3, r4
 8002cb6:	d9fa      	bls.n	8002cae <_free_r+0x42>
 8002cb8:	6811      	ldr	r1, [r2, #0]
 8002cba:	1850      	adds	r0, r2, r1
 8002cbc:	42a0      	cmp	r0, r4
 8002cbe:	d10b      	bne.n	8002cd8 <_free_r+0x6c>
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	4401      	add	r1, r0
 8002cc4:	1850      	adds	r0, r2, r1
 8002cc6:	4283      	cmp	r3, r0
 8002cc8:	6011      	str	r1, [r2, #0]
 8002cca:	d1e0      	bne.n	8002c8e <_free_r+0x22>
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4401      	add	r1, r0
 8002cd2:	6011      	str	r1, [r2, #0]
 8002cd4:	6053      	str	r3, [r2, #4]
 8002cd6:	e7da      	b.n	8002c8e <_free_r+0x22>
 8002cd8:	d902      	bls.n	8002ce0 <_free_r+0x74>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	e7d6      	b.n	8002c8e <_free_r+0x22>
 8002ce0:	6820      	ldr	r0, [r4, #0]
 8002ce2:	1821      	adds	r1, r4, r0
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	bf01      	itttt	eq
 8002ce8:	6819      	ldreq	r1, [r3, #0]
 8002cea:	685b      	ldreq	r3, [r3, #4]
 8002cec:	1809      	addeq	r1, r1, r0
 8002cee:	6021      	streq	r1, [r4, #0]
 8002cf0:	6063      	str	r3, [r4, #4]
 8002cf2:	6054      	str	r4, [r2, #4]
 8002cf4:	e7cb      	b.n	8002c8e <_free_r+0x22>
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	200001a8 	.word	0x200001a8

08002cfc <sbrk_aligned>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	4e0e      	ldr	r6, [pc, #56]	; (8002d38 <sbrk_aligned+0x3c>)
 8002d00:	460c      	mov	r4, r1
 8002d02:	6831      	ldr	r1, [r6, #0]
 8002d04:	4605      	mov	r5, r0
 8002d06:	b911      	cbnz	r1, 8002d0e <sbrk_aligned+0x12>
 8002d08:	f000 f8bc 	bl	8002e84 <_sbrk_r>
 8002d0c:	6030      	str	r0, [r6, #0]
 8002d0e:	4621      	mov	r1, r4
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 f8b7 	bl	8002e84 <_sbrk_r>
 8002d16:	1c43      	adds	r3, r0, #1
 8002d18:	d00a      	beq.n	8002d30 <sbrk_aligned+0x34>
 8002d1a:	1cc4      	adds	r4, r0, #3
 8002d1c:	f024 0403 	bic.w	r4, r4, #3
 8002d20:	42a0      	cmp	r0, r4
 8002d22:	d007      	beq.n	8002d34 <sbrk_aligned+0x38>
 8002d24:	1a21      	subs	r1, r4, r0
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 f8ac 	bl	8002e84 <_sbrk_r>
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	d101      	bne.n	8002d34 <sbrk_aligned+0x38>
 8002d30:	f04f 34ff 	mov.w	r4, #4294967295
 8002d34:	4620      	mov	r0, r4
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	200001ac 	.word	0x200001ac

08002d3c <_malloc_r>:
 8002d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d40:	1ccd      	adds	r5, r1, #3
 8002d42:	f025 0503 	bic.w	r5, r5, #3
 8002d46:	3508      	adds	r5, #8
 8002d48:	2d0c      	cmp	r5, #12
 8002d4a:	bf38      	it	cc
 8002d4c:	250c      	movcc	r5, #12
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	4607      	mov	r7, r0
 8002d52:	db01      	blt.n	8002d58 <_malloc_r+0x1c>
 8002d54:	42a9      	cmp	r1, r5
 8002d56:	d905      	bls.n	8002d64 <_malloc_r+0x28>
 8002d58:	230c      	movs	r3, #12
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4630      	mov	r0, r6
 8002d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d64:	4e2e      	ldr	r6, [pc, #184]	; (8002e20 <_malloc_r+0xe4>)
 8002d66:	f000 f89d 	bl	8002ea4 <__malloc_lock>
 8002d6a:	6833      	ldr	r3, [r6, #0]
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	bb34      	cbnz	r4, 8002dbe <_malloc_r+0x82>
 8002d70:	4629      	mov	r1, r5
 8002d72:	4638      	mov	r0, r7
 8002d74:	f7ff ffc2 	bl	8002cfc <sbrk_aligned>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	d14d      	bne.n	8002e1a <_malloc_r+0xde>
 8002d7e:	6834      	ldr	r4, [r6, #0]
 8002d80:	4626      	mov	r6, r4
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	d140      	bne.n	8002e08 <_malloc_r+0xcc>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	4631      	mov	r1, r6
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	eb04 0803 	add.w	r8, r4, r3
 8002d90:	f000 f878 	bl	8002e84 <_sbrk_r>
 8002d94:	4580      	cmp	r8, r0
 8002d96:	d13a      	bne.n	8002e0e <_malloc_r+0xd2>
 8002d98:	6821      	ldr	r1, [r4, #0]
 8002d9a:	3503      	adds	r5, #3
 8002d9c:	1a6d      	subs	r5, r5, r1
 8002d9e:	f025 0503 	bic.w	r5, r5, #3
 8002da2:	3508      	adds	r5, #8
 8002da4:	2d0c      	cmp	r5, #12
 8002da6:	bf38      	it	cc
 8002da8:	250c      	movcc	r5, #12
 8002daa:	4638      	mov	r0, r7
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7ff ffa5 	bl	8002cfc <sbrk_aligned>
 8002db2:	3001      	adds	r0, #1
 8002db4:	d02b      	beq.n	8002e0e <_malloc_r+0xd2>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	442b      	add	r3, r5
 8002dba:	6023      	str	r3, [r4, #0]
 8002dbc:	e00e      	b.n	8002ddc <_malloc_r+0xa0>
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	1b52      	subs	r2, r2, r5
 8002dc2:	d41e      	bmi.n	8002e02 <_malloc_r+0xc6>
 8002dc4:	2a0b      	cmp	r2, #11
 8002dc6:	d916      	bls.n	8002df6 <_malloc_r+0xba>
 8002dc8:	1961      	adds	r1, r4, r5
 8002dca:	42a3      	cmp	r3, r4
 8002dcc:	6025      	str	r5, [r4, #0]
 8002dce:	bf18      	it	ne
 8002dd0:	6059      	strne	r1, [r3, #4]
 8002dd2:	6863      	ldr	r3, [r4, #4]
 8002dd4:	bf08      	it	eq
 8002dd6:	6031      	streq	r1, [r6, #0]
 8002dd8:	5162      	str	r2, [r4, r5]
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	4638      	mov	r0, r7
 8002dde:	f104 060b 	add.w	r6, r4, #11
 8002de2:	f000 f865 	bl	8002eb0 <__malloc_unlock>
 8002de6:	f026 0607 	bic.w	r6, r6, #7
 8002dea:	1d23      	adds	r3, r4, #4
 8002dec:	1af2      	subs	r2, r6, r3
 8002dee:	d0b6      	beq.n	8002d5e <_malloc_r+0x22>
 8002df0:	1b9b      	subs	r3, r3, r6
 8002df2:	50a3      	str	r3, [r4, r2]
 8002df4:	e7b3      	b.n	8002d5e <_malloc_r+0x22>
 8002df6:	6862      	ldr	r2, [r4, #4]
 8002df8:	42a3      	cmp	r3, r4
 8002dfa:	bf0c      	ite	eq
 8002dfc:	6032      	streq	r2, [r6, #0]
 8002dfe:	605a      	strne	r2, [r3, #4]
 8002e00:	e7ec      	b.n	8002ddc <_malloc_r+0xa0>
 8002e02:	4623      	mov	r3, r4
 8002e04:	6864      	ldr	r4, [r4, #4]
 8002e06:	e7b2      	b.n	8002d6e <_malloc_r+0x32>
 8002e08:	4634      	mov	r4, r6
 8002e0a:	6876      	ldr	r6, [r6, #4]
 8002e0c:	e7b9      	b.n	8002d82 <_malloc_r+0x46>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	4638      	mov	r0, r7
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	f000 f84c 	bl	8002eb0 <__malloc_unlock>
 8002e18:	e7a1      	b.n	8002d5e <_malloc_r+0x22>
 8002e1a:	6025      	str	r5, [r4, #0]
 8002e1c:	e7de      	b.n	8002ddc <_malloc_r+0xa0>
 8002e1e:	bf00      	nop
 8002e20:	200001a8 	.word	0x200001a8

08002e24 <_realloc_r>:
 8002e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e28:	4680      	mov	r8, r0
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	460e      	mov	r6, r1
 8002e2e:	b921      	cbnz	r1, 8002e3a <_realloc_r+0x16>
 8002e30:	4611      	mov	r1, r2
 8002e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e36:	f7ff bf81 	b.w	8002d3c <_malloc_r>
 8002e3a:	b92a      	cbnz	r2, 8002e48 <_realloc_r+0x24>
 8002e3c:	f7ff ff16 	bl	8002c6c <_free_r>
 8002e40:	4625      	mov	r5, r4
 8002e42:	4628      	mov	r0, r5
 8002e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e48:	f000 f838 	bl	8002ebc <_malloc_usable_size_r>
 8002e4c:	4284      	cmp	r4, r0
 8002e4e:	4607      	mov	r7, r0
 8002e50:	d802      	bhi.n	8002e58 <_realloc_r+0x34>
 8002e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e56:	d812      	bhi.n	8002e7e <_realloc_r+0x5a>
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4640      	mov	r0, r8
 8002e5c:	f7ff ff6e 	bl	8002d3c <_malloc_r>
 8002e60:	4605      	mov	r5, r0
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d0ed      	beq.n	8002e42 <_realloc_r+0x1e>
 8002e66:	42bc      	cmp	r4, r7
 8002e68:	4622      	mov	r2, r4
 8002e6a:	4631      	mov	r1, r6
 8002e6c:	bf28      	it	cs
 8002e6e:	463a      	movcs	r2, r7
 8002e70:	f7ff fed4 	bl	8002c1c <memcpy>
 8002e74:	4631      	mov	r1, r6
 8002e76:	4640      	mov	r0, r8
 8002e78:	f7ff fef8 	bl	8002c6c <_free_r>
 8002e7c:	e7e1      	b.n	8002e42 <_realloc_r+0x1e>
 8002e7e:	4635      	mov	r5, r6
 8002e80:	e7df      	b.n	8002e42 <_realloc_r+0x1e>
	...

08002e84 <_sbrk_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	2300      	movs	r3, #0
 8002e88:	4d05      	ldr	r5, [pc, #20]	; (8002ea0 <_sbrk_r+0x1c>)
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	f7fd fbe0 	bl	8000654 <_sbrk>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d102      	bne.n	8002e9e <_sbrk_r+0x1a>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	b103      	cbz	r3, 8002e9e <_sbrk_r+0x1a>
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ea0:	200001b0 	.word	0x200001b0

08002ea4 <__malloc_lock>:
 8002ea4:	4801      	ldr	r0, [pc, #4]	; (8002eac <__malloc_lock+0x8>)
 8002ea6:	f000 b811 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 8002eaa:	bf00      	nop
 8002eac:	200001b4 	.word	0x200001b4

08002eb0 <__malloc_unlock>:
 8002eb0:	4801      	ldr	r0, [pc, #4]	; (8002eb8 <__malloc_unlock+0x8>)
 8002eb2:	f000 b80c 	b.w	8002ece <__retarget_lock_release_recursive>
 8002eb6:	bf00      	nop
 8002eb8:	200001b4 	.word	0x200001b4

08002ebc <_malloc_usable_size_r>:
 8002ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec0:	1f18      	subs	r0, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bfbc      	itt	lt
 8002ec6:	580b      	ldrlt	r3, [r1, r0]
 8002ec8:	18c0      	addlt	r0, r0, r3
 8002eca:	4770      	bx	lr

08002ecc <__retarget_lock_acquire_recursive>:
 8002ecc:	4770      	bx	lr

08002ece <__retarget_lock_release_recursive>:
 8002ece:	4770      	bx	lr

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
