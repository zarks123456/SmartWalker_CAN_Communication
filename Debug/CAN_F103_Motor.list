
CAN_F103_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08006680  08006680  00016680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006b0c  08006b0c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b0c  08006b0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  08006cf8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006cf8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a436  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c73  00000000  00000000  0002a63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a47  00000000  00000000  0002d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099f4  00000000  00000000  00046dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849bb  00000000  00000000  000507b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d516e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034fc  00000000  00000000  000d51c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006668 	.word	0x08006668

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006668 	.word	0x08006668

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_f2iz>:
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eb4:	d30f      	bcc.n	8000ed6 <__aeabi_f2iz+0x2a>
 8000eb6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ebe:	d90d      	bls.n	8000edc <__aeabi_f2iz+0x30>
 8000ec0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ecc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed0:	bf18      	it	ne
 8000ed2:	4240      	negne	r0, r0
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr
 8000edc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ee0:	d101      	bne.n	8000ee6 <__aeabi_f2iz+0x3a>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	d105      	bne.n	8000ef2 <__aeabi_f2iz+0x46>
 8000ee6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eea:	bf08      	it	eq
 8000eec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ef0:	4770      	bx	lr
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN13CANServoMotorC1Eh>:
#include "CANServoMotor.h"

CANServoMotor::CANServoMotor(uint8_t id) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
	motorID = id;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <_ZN13CANServoMotorD1Ev>:

CANServoMotor::~CANServoMotor() {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	// Destructor implementation (if required)
}
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <_ZN13CANServoMotor5ResetEv>:

void CANServoMotor::Reset() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	txHeader.DLC = 2;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	649a      	str	r2, [r3, #72]	; 0x48
	txHeader.IDE = CAN_ID_STD;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
	txHeader.RTR = CAN_RTR_DATA;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
	txHeader.StdId = static_cast<uint32_t>(COBID::NMT);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38

	uint8_t reset[] = { 82, motorID };
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	81bb      	strh	r3, [r7, #12]
 8000f50:	2352      	movs	r3, #82	; 0x52
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f5a:	737b      	strb	r3, [r7, #13]
	HAL_CAN_AddTxMessage(this->hcan, &txHeader, reset, &txMailbox);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	f107 020c 	add.w	r2, r7, #12
 8000f6e:	f000 ffcd 	bl	8001f0c <HAL_CAN_AddTxMessage>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZN13CANServoMotor4InitEP19__CAN_HandleTypeDef>:

void CANServoMotor::Init(CAN_HandleTypeDef *hcan) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	this->hcan = hcan;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <_ZN13CANServoMotor12StartCommandEv>:

void CANServoMotor::StartCommand() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	txHeader.DLC = 2;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	649a      	str	r2, [r3, #72]	; 0x48
	txHeader.IDE = CAN_ID_STD;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
	txHeader.RTR = CAN_RTR_DATA;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	645a      	str	r2, [r3, #68]	; 0x44
	txHeader.StdId = static_cast<uint32_t>(COBID::NMT);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38

	uint8_t operationalmode[] = { 01, motorID };
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	81bb      	strh	r3, [r7, #12]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	733b      	strb	r3, [r7, #12]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fc2:	737b      	strb	r3, [r7, #13]
	HAL_CAN_AddTxMessage(hcan, &txHeader, operationalmode, &txMailbox);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3350      	adds	r3, #80	; 0x50
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	f000 ff99 	bl	8001f0c <HAL_CAN_AddTxMessage>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_ZN13CANServoMotor11GetVelocityEv>:



void CANServoMotor::GetVelocity() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	txHeader.DLC = 8;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2208      	movs	r2, #8
 8000ff0:	649a      	str	r2, [r3, #72]	; 0x48
	txHeader.StdId = 0x601;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f240 6201 	movw	r2, #1537	; 0x601
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t lspeed[] = { 0x40, 0x6C, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00 };
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <_ZN13CANServoMotor11GetVelocityEv+0x68>)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001004:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(hcan, &txHeader, lspeed, &txMailbox);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3350      	adds	r3, #80	; 0x50
 8001016:	f107 0210 	add.w	r2, r7, #16
 800101a:	f000 ff77 	bl	8001f0c <HAL_CAN_AddTxMessage>
	uint8_t rspeed[] = { 0x40, 0x6C, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00 };
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <_ZN13CANServoMotor11GetVelocityEv+0x68>)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(hcan, &txHeader, rspeed, &txMailbox);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3350      	adds	r3, #80	; 0x50
 800103a:	f107 0208 	add.w	r2, r7, #8
 800103e:	f000 ff65 	bl	8001f0c <HAL_CAN_AddTxMessage>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08006680 	.word	0x08006680

08001050 <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef>:

CANServoMotor::Data CANServoMotor::ParseData(uint8_t *rxData,
		CAN_RxHeaderTypeDef &rxHeader) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	Data parseData;
	uint16_t registrarAddress = (static_cast<uint16_t>(rxData[2]) << 8)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3302      	adds	r3, #2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	021b      	lsls	r3, r3, #8
			| rxData[1];
 8001066:	b21a      	sxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3301      	adds	r3, #1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
	uint16_t registrarAddress = (static_cast<uint16_t>(rxData[2]) << 8)
 8001074:	82fb      	strh	r3, [r7, #22]

	switch (registrarAddress){
 8001076:	8afb      	ldrh	r3, [r7, #22]
 8001078:	f246 026c 	movw	r2, #24684	; 0x606c
 800107c:	4293      	cmp	r3, r2
 800107e:	d10f      	bne.n	80010a0 <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef+0x50>
	case 0x606C:
		parseData.Error=this->parseVelocity(rxData, parseData.leftValue, parseData.rightValue);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f103 010c 	add.w	r1, r3, #12
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f103 0208 	add.w	r2, r3, #8
 800108c:	460b      	mov	r3, r1
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f000 f80d 	bl	80010b0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	711a      	strb	r2, [r3, #4]
		break;
 800109e:	bf00      	nop
	}
	// Check if the data length is valid (less than or equal to 7, considering RxData[0] is the data length)

	parseData.Address=registrarAddress;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8afa      	ldrh	r2, [r7, #22]
 80010a4:	80da      	strh	r2, [r3, #6]
	return parseData;
 80010a6:	bf00      	nop
}
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_>:

bool CANServoMotor::parseVelocity(uint8_t *rxData, int &leftVelocity,
		int &rightVelocity) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
	if (rxData[0] == 0x43) {
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b43      	cmp	r3, #67	; 0x43
 80010c4:	d15d      	bne.n	8001182 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xd2>
		switch (rxData[3]){
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3303      	adds	r3, #3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x26>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d020      	beq.n	8001116 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x66>
 80010d4:	e03f      	b.n	8001156 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xa6>
			case 0x01:
				this->LeftVelocity= ((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	3307      	adds	r3, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	061a      	lsls	r2, r3, #24
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3306      	adds	r3, #6
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	431a      	orrs	r2, r3
				| (rxData[5] << 8) | rxData[4])*0.1;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3305      	adds	r3, #5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	4313      	orrs	r3, r2
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	3204      	adds	r2, #4
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa36 	bl	800056c <__aeabi_i2d>
 8001100:	a327      	add	r3, pc, #156	; (adr r3, 80011a0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xf0>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa9b 	bl	8000640 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
				this->LeftVelocity= ((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001114:	e02c      	b.n	8001170 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xc0>
			case 0x02:
				this->RightVelocity=((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3307      	adds	r3, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	061a      	lsls	r2, r3, #24
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3306      	adds	r3, #6
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	431a      	orrs	r2, r3
						| (rxData[5] << 8) | rxData[4])*0.1;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3305      	adds	r3, #5
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	4313      	orrs	r3, r2
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	3204      	adds	r2, #4
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	4313      	orrs	r3, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa16 	bl	800056c <__aeabi_i2d>
 8001140:	a317      	add	r3, pc, #92	; (adr r3, 80011a0 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xf0>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7b 	bl	8000640 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
				this->RightVelocity=((static_cast<int32_t>(rxData[7]) << 24) | (rxData[6] << 16)
 800114e:	68f9      	ldr	r1, [r7, #12]
 8001150:	e9c1 2302 	strd	r2, r3, [r1, #8]
				break;
 8001154:	e00c      	b.n	8001170 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xc0>
			default:
				this->LeftVelocity=888;
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xf8>)
 800115e:	e9c1 2300 	strd	r2, r3, [r1]
				this->RightVelocity=888;
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xf8>)
 800116a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				break;
 800116e:	bf00      	nop
		}
		leftVelocity=999;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001176:	601a      	str	r2, [r3, #0]
		rightVelocity=999;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e007      	b.n	8001192 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xe2>
	} else {
		// Invalid data length, set default values
		leftVelocity = 999;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001188:	601a      	str	r2, [r3, #0]
		rightVelocity = 999;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001190:	601a      	str	r2, [r3, #0]
	}
}
 8001192:	bf00      	nop
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f3af 8000 	nop.w
 80011a0:	9999999a 	.word	0x9999999a
 80011a4:	3fb99999 	.word	0x3fb99999
 80011a8:	408bc000 	.word	0x408bc000

080011ac <_ZN13CANServoMotor4StopEv>:
	HAL_CAN_AddTxMessage(hcan, &txHeader, enable1, &txMailbox);
	HAL_CAN_AddTxMessage(hcan, &txHeader, enable2, &txMailbox);
	HAL_CAN_AddTxMessage(hcan, &txHeader, enable3, &txMailbox);
}

void CANServoMotor::Stop(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	txHeader.DLC = 8;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2208      	movs	r2, #8
 80011b8:	649a      	str	r2, [r3, #72]	; 0x48
	txHeader.IDE = CAN_ID_STD;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
	txHeader.RTR = CAN_RTR_DATA;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
	txHeader.StdId = 0x601;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f240 6201 	movw	r2, #1537	; 0x601
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t stopMotor[] = { 0x2B, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <_ZN13CANServoMotor4StopEv+0x50>)
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d8:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(hcan, &txHeader, stopMotor, &txMailbox);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3350      	adds	r3, #80	; 0x50
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f000 fe8d 	bl	8001f0c <HAL_CAN_AddTxMessage>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	080066d8 	.word	0x080066d8

08001200 <_Z14floatToTwoIntsfPiS_>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void floatToTwoInts(float floatValue, int *integerPart, int *fractionalPart) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
    *integerPart = (int)floatValue;
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff fe4d 	bl	8000eac <__aeabi_f2iz>
 8001212:	4602      	mov	r2, r0
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	601a      	str	r2, [r3, #0]
    *fractionalPart = (int)((floatValue - *integerPart) * 100); // Assuming two decimal places
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fdf1 	bl	8000e04 <__aeabi_i2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fd36 	bl	8000c98 <__aeabi_fsub>
 800122c:	4603      	mov	r3, r0
 800122e:	4907      	ldr	r1, [pc, #28]	; (800124c <_Z14floatToTwoIntsfPiS_+0x4c>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ff95 	bl	8000160 <__aeabi_fmul>
 8001236:	4603      	mov	r3, r0
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe37 	bl	8000eac <__aeabi_f2iz>
 800123e:	4602      	mov	r2, r0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	42c80000 	.word	0x42c80000

08001250 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800125a:	4a35      	ldr	r2, [pc, #212]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800125c:	2100      	movs	r1, #0
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f000 ff23 	bl	80020aa <HAL_CAN_GetRxMessage>

	canData=controller.ParseData(RxData, RxHeader);
 8001264:	4c33      	ldr	r4, [pc, #204]	; (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001266:	4638      	mov	r0, r7
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800126a:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800126c:	4932      	ldr	r1, [pc, #200]	; (8001338 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 800126e:	f7ff feef 	bl	8001050 <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef>
 8001272:	463b      	mov	r3, r7
 8001274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int j = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
	int integerPart, fractionalPart;
	floatToTwoInts(controller.LeftVelocity, &integerPart, &fractionalPart);
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fcb2 	bl	8000bf0 <__aeabi_d2f>
 800128c:	f107 021c 	add.w	r2, r7, #28
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff ffb3 	bl	8001200 <_Z14floatToTwoIntsfPiS_>

	j = sprintf(message, "%x ", canData.Address);
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800129c:	88db      	ldrh	r3, [r3, #6]
 800129e:	461a      	mov	r2, r3
 80012a0:	4926      	ldr	r1, [pc, #152]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80012a2:	4827      	ldr	r0, [pc, #156]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80012a4:	f002 ff66 	bl	8004174 <siprintf>
 80012a8:	6278      	str	r0, [r7, #36]	; 0x24
	j += sprintf(message+j,  "%d.%02d ", integerPart, fractionalPart);
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80012ae:	1898      	adds	r0, r3, r2
 80012b0:	6a3a      	ldr	r2, [r7, #32]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4923      	ldr	r1, [pc, #140]	; (8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80012b6:	f002 ff5d 	bl	8004174 <siprintf>
 80012ba:	4602      	mov	r2, r0
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	4413      	add	r3, r2
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
	j += sprintf(message + j, "%.2f ", controller.RightVelocity);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80012c6:	1898      	adds	r0, r3, r2
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80012ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012ce:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80012d0:	f002 ff50 	bl	8004174 <siprintf>
 80012d4:	4602      	mov	r2, r0
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	4413      	add	r3, r2
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
	j += sprintf(message + j, "%d ", canData.leftValue);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80012e0:	4413      	add	r3, r2
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80012e4:	6892      	ldr	r2, [r2, #8]
 80012e6:	4919      	ldr	r1, [pc, #100]	; (800134c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 ff43 	bl	8004174 <siprintf>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	4413      	add	r3, r2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
	j += sprintf(message + j, "%d \r\n", canData.rightValue);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80012fa:	4413      	add	r3, r2
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80012fe:	68d2      	ldr	r2, [r2, #12]
 8001300:	4913      	ldr	r1, [pc, #76]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001302:	4618      	mov	r0, r3
 8001304:	f002 ff36 	bl	8004174 <siprintf>
 8001308:	4602      	mov	r2, r0
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	4413      	add	r3, r2
 800130e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 100);
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001312:	f7fe ff1d 	bl	8000150 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	4908      	ldr	r1, [pc, #32]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8001320:	f002 f916 	bl	8003550 <HAL_UART_Transmit>
}
 8001324:	bf00      	nop
 8001326:	372c      	adds	r7, #44	; 0x2c
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	200002f4 	.word	0x200002f4
 8001330:	200002d8 	.word	0x200002d8
 8001334:	200002c8 	.word	0x200002c8
 8001338:	20000270 	.word	0x20000270
 800133c:	080066e0 	.word	0x080066e0
 8001340:	200002fc 	.word	0x200002fc
 8001344:	080066e4 	.word	0x080066e4
 8001348:	080066f0 	.word	0x080066f0
 800134c:	080066f8 	.word	0x080066f8
 8001350:	080066fc 	.word	0x080066fc
 8001354:	20000224 	.word	0x20000224

08001358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800135c:	f000 fb48 	bl	80019f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001360:	f000 f826 	bl	80013b0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001364:	f000 f8fa 	bl	800155c <_ZL12MX_GPIO_Initv>
	MX_CAN_Init();
 8001368:	f000 f872 	bl	8001450 <_ZL11MX_CAN_Initv>
	MX_USART1_UART_Init();
 800136c:	f000 f8c8 	bl	8001500 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <main+0x50>)
 8001372:	f000 fd87 	bl	8001e84 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001376:	2102      	movs	r1, #2
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <main+0x50>)
 800137a:	f000 ffb7 	bl	80022ec <HAL_CAN_ActivateNotification>

	controller.Init(&hcan);
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <main+0x50>)
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <main+0x54>)
 8001382:	f7ff fdfa 	bl	8000f7a <_ZN13CANServoMotor4InitEP19__CAN_HandleTypeDef>
	controller.Reset();
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <main+0x54>)
 8001388:	f7ff fdd0 	bl	8000f2c <_ZN13CANServoMotor5ResetEv>
	controller.StartCommand();
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <main+0x54>)
 800138e:	f7ff fe01 	bl	8000f94 <_ZN13CANServoMotor12StartCommandEv>
	controller.Stop();
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <main+0x54>)
 8001394:	f7ff ff0a 	bl	80011ac <_ZN13CANServoMotor4StopEv>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		controller.GetVelocity();
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <main+0x54>)
 800139a:	f7ff fe23 	bl	8000fe4 <_ZN13CANServoMotor11GetVelocityEv>
//		HAL_CAN_AddTxMessage(&hcan, &TxHeader, rspeed, &TxMailbox);

		//HAL_UART_Transmit(&huart1, "Test\r\n", 8, 100);
		//printf("Test\r\n");

		HAL_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fb88 	bl	8001ab4 <HAL_Delay>
		controller.GetVelocity();
 80013a4:	e7f8      	b.n	8001398 <main+0x40>
 80013a6:	bf00      	nop
 80013a8:	200001fc 	.word	0x200001fc
 80013ac:	20000270 	.word	0x20000270

080013b0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b090      	sub	sp, #64	; 0x40
 80013b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	2228      	movs	r2, #40	; 0x28
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fa70 	bl	80038a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fc49 	bl	8002c90 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 800140e:	f000 f8c7 	bl	80015a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2302      	movs	r3, #2
 8001418:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2102      	movs	r1, #2
 800142c:	4618      	mov	r0, r3
 800142e:	f001 feb1 	bl	8003194 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8001442:	f000 f8ad 	bl	80015a0 <Error_Handler>
	}
}
 8001446:	bf00      	nop
 8001448:	3740      	adds	r7, #64	; 0x40
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <_ZL11MX_CAN_Initv>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001458:	4a28      	ldr	r2, [pc, #160]	; (80014fc <_ZL11MX_CAN_Initv+0xac>)
 800145a:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 800145e:	2209      	movs	r2, #9
 8001460:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001470:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001474:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001478:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800147c:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80014a2:	4815      	ldr	r0, [pc, #84]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 80014a4:	f000 fb2a 	bl	8001afc <HAL_CAN_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <_ZL11MX_CAN_Initv+0x6c>
		Error_Handler();
 80014b8:	f000 f872 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;
 80014c0:	230a      	movs	r3, #10
 80014c2:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000 << 5;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x00 << 5;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014dc:	2301      	movs	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 80014e0:	230d      	movs	r3, #13
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <_ZL11MX_CAN_Initv+0xa8>)
 80014ea:	f000 fc02 	bl	8001cf2 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200001fc 	.word	0x200001fc
 80014fc:	40006400 	.word	0x40006400

08001500 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001508:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001538:	f001 ffba 	bl	80034b0 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf14      	ite	ne
 8001542:	2301      	movne	r3, #1
 8001544:	2300      	moveq	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 800154c:	f000 f828 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000224 	.word	0x20000224
 8001558:	40013800 	.word	0x40013800

0800155c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <_ZL12MX_GPIO_Initv+0x40>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a0d      	ldr	r2, [pc, #52]	; (800159c <_ZL12MX_GPIO_Initv+0x40>)
 8001568:	f043 0320 	orr.w	r3, r3, #32
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_ZL12MX_GPIO_Initv+0x40>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <_ZL12MX_GPIO_Initv+0x40>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <_ZL12MX_GPIO_Initv+0x40>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <_ZL12MX_GPIO_Initv+0x40>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000

080015a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <_Z41__static_initialization_and_destruction_0ii+0x22>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d103      	bne.n	80015ce <_Z41__static_initialization_and_destruction_0ii+0x22>
CANServoMotor controller(1);
 80015c6:	2101      	movs	r1, #1
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80015ca:	f7ff fc95 	bl	8000ef8 <_ZN13CANServoMotorC1Eh>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015da:	4293      	cmp	r3, r2
 80015dc:	d102      	bne.n	80015e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80015e0:	f7ff fc9a 	bl	8000f18 <_ZN13CANServoMotorD1Ev>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000270 	.word	0x20000270

080015f0 <_GLOBAL__sub_I_hcan>:
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff ffd7 	bl	80015ac <_Z41__static_initialization_and_destruction_0ii>
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_GLOBAL__sub_D_hcan>:
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
 8001604:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ffcf 	bl	80015ac <_Z41__static_initialization_and_destruction_0ii>
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_MspInit+0x5c>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_MspInit+0x5c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_MspInit+0x5c>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_MspInit+0x5c>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_MspInit+0x60>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_MspInit+0x60>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
	if (hcan->Instance == CAN1) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_CAN_MspInit+0x9c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d139      	bne.n	8001708 <HAL_CAN_MspInit+0x94>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_CAN_MspInit+0xa0>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_CAN_MspInit+0xa0>)
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_CAN_MspInit+0xa0>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_CAN_MspInit+0xa0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_CAN_MspInit+0xa0>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_CAN_MspInit+0xa0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
		/**CAN GPIO Configuration
		 PA11     ------> CAN_RX
		 PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	480f      	ldr	r0, [pc, #60]	; (8001718 <HAL_CAN_MspInit+0xa4>)
 80016da:	f001 f95d 	bl	8002998 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_CAN_MspInit+0xa4>)
 80016f4:	f001 f950 	bl	8002998 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2014      	movs	r0, #20
 80016fe:	f001 f914 	bl	800292a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001702:	2014      	movs	r0, #20
 8001704:	f001 f92d 	bl	8002962 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}

}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40006400 	.word	0x40006400
 8001714:	40021000 	.word	0x40021000
 8001718:	40010800 	.word	0x40010800

0800171c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d131      	bne.n	80017a0 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_UART_MspInit+0x90>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <HAL_UART_MspInit+0x90>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_UART_MspInit+0x90>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_UART_MspInit+0x90>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_UART_MspInit+0x90>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_UART_MspInit+0x90>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001770:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <HAL_UART_MspInit+0x94>)
 8001782:	f001 f909 	bl	8002998 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_UART_MspInit+0x94>)
 800179c:	f001 f8fc 	bl	8002998 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800

080017b4 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80017fa:	f000 f93f 	bl	8001a7c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800180a:	f000 fd94 	bl	8002336 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001fc 	.word	0x200001fc

08001818 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <_kill>:

int _kill(int pid, int sig) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001830:	f002 f80e 	bl	8003850 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	2216      	movs	r2, #22
 8001838:	601a      	str	r2, [r3, #0]
	return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_exit>:

void _exit(int status) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800184e:	f04f 31ff 	mov.w	r1, #4294967295
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffe7 	bl	8001826 <_kill>
	while (1) {
 8001858:	e7fe      	b.n	8001858 <_exit+0x12>

0800185a <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e00a      	b.n	8001882 <_read+0x28>
		*ptr++ = __io_getchar();
 800186c:	f3af 8000 	nop.w
 8001870:	4601      	mov	r1, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	b2ca      	uxtb	r2, r1
 800187a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbf0      	blt.n	800186c <_read+0x12>
	}

	return len;
 800188a:	687b      	ldr	r3, [r7, #4]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e009      	b.n	80018ba <_write+0x26>
		__io_putchar(*ptr++);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	60ba      	str	r2, [r7, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf1      	blt.n	80018a6 <_write+0x12>
	}
	return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_close>:

int _close(int file) {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
	return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <_isatty>:

int _isatty(int file) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
		errno = ENOMEM;
 800195c:	f001 ff78 	bl	8003850 <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20002800 	.word	0x20002800
 800198c:	00000400 	.word	0x00000400
 8001990:	20000330 	.word	0x20000330
 8001994:	20000348 	.word	0x20000348

08001998 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff fff8 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019aa:	490c      	ldr	r1, [pc, #48]	; (80019dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c0:	4c09      	ldr	r4, [pc, #36]	; (80019e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f001 ff45 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d2:	f7ff fcc1 	bl	8001358 <main>
  bx lr
 80019d6:	4770      	bx	lr
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019e0:	08006b1c 	.word	0x08006b1c
  ldr r2, =_sbss
 80019e4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019e8:	20000348 	.word	0x20000348

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x28>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x28>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 ff87 	bl	8002914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fe00 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 ff9f 	bl	800297e <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 ff67 	bl	800292a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x1c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x20>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_IncTick+0x20>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000334 	.word	0x20000334

08001aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <HAL_GetTick+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000334 	.word	0x20000334

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffe0 	bl	8001aa0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0ed      	b.n	8001cea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fdaa 	bl	8001674 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b30:	f7ff ffb6 	bl	8001aa0 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b36:	e012      	b.n	8001b5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b38:	f7ff ffb2 	bl	8001aa0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d90b      	bls.n	8001b5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2205      	movs	r2, #5
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0c5      	b.n	8001cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0e5      	beq.n	8001b38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0202 	bic.w	r2, r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b7c:	f7ff ff90 	bl	8001aa0 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b82:	e012      	b.n	8001baa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b84:	f7ff ff8c 	bl	8001aa0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d90b      	bls.n	8001baa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e09f      	b.n	8001cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e5      	bne.n	8001b84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7e5b      	ldrb	r3, [r3, #25]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e9b      	ldrb	r3, [r3, #26]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0220 	bic.w	r2, r2, #32
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7edb      	ldrb	r3, [r3, #27]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e007      	b.n	8001c60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0210 	orr.w	r2, r2, #16
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7f1b      	ldrb	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0208 	orr.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0208 	bic.w	r2, r2, #8
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7f5b      	ldrb	r3, [r3, #29]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0204 	orr.w	r2, r2, #4
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e007      	b.n	8001cb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	ea42 0103 	orr.w	r1, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d003      	beq.n	8001d18 <HAL_CAN_ConfigFilter+0x26>
 8001d10:	7cfb      	ldrb	r3, [r7, #19]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	f040 80aa 	bne.w	8001e6c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2201      	movs	r2, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d123      	bne.n	8001d9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3248      	adds	r2, #72	; 0x48
 8001d7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d90:	6979      	ldr	r1, [r7, #20]
 8001d92:	3348      	adds	r3, #72	; 0x48
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d122      	bne.n	8001de8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3248      	adds	r2, #72	; 0x48
 8001dc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ddc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dde:	6979      	ldr	r1, [r7, #20]
 8001de0:	3348      	adds	r3, #72	; 0x48
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e2e:	e007      	b.n	8001e40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e5e:	f023 0201 	bic.w	r2, r3, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e006      	b.n	8001e7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d12e      	bne.n	8001ef6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fdf6 	bl	8001aa0 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eb6:	e012      	b.n	8001ede <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb8:	f7ff fdf2 	bl	8001aa0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b0a      	cmp	r3, #10
 8001ec4:	d90b      	bls.n	8001ede <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e012      	b.n	8001f04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e5      	bne.n	8001eb8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e006      	b.n	8001f04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
  }
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d003      	beq.n	8001f38 <HAL_CAN_AddTxMessage+0x2c>
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	f040 80ad 	bne.w	8002092 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8095 	beq.w	8002082 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	0e1b      	lsrs	r3, r3, #24
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f62:	2201      	movs	r2, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	6809      	ldr	r1, [r1, #0]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3318      	adds	r3, #24
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	440b      	add	r3, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001fa4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3318      	adds	r3, #24
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	440b      	add	r3, r1
 8001fae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3318      	adds	r3, #24
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	7d1b      	ldrb	r3, [r3, #20]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d111      	bne.n	8001ff0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3318      	adds	r3, #24
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	6811      	ldr	r1, [r2, #0]
 8001fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3318      	adds	r3, #24
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	440b      	add	r3, r1
 8001fec:	3304      	adds	r3, #4
 8001fee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3307      	adds	r3, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	061a      	lsls	r2, r3, #24
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3305      	adds	r3, #5
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4313      	orrs	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	3204      	adds	r2, #4
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	4610      	mov	r0, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	6811      	ldr	r1, [r2, #0]
 8002018:	ea43 0200 	orr.w	r2, r3, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	440b      	add	r3, r1
 8002022:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002026:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3303      	adds	r3, #3
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	061a      	lsls	r2, r3, #24
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3302      	adds	r3, #2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3301      	adds	r3, #1
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	4313      	orrs	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	4610      	mov	r0, r2
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6811      	ldr	r1, [r2, #0]
 800204e:	ea43 0200 	orr.w	r2, r3, r0
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	440b      	add	r3, r1
 8002058:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800205c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3318      	adds	r3, #24
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4413      	add	r3, r2
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	6811      	ldr	r1, [r2, #0]
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3318      	adds	r3, #24
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	440b      	add	r3, r1
 800207c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e00e      	b.n	80020a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e006      	b.n	80020a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3724      	adds	r7, #36	; 0x24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d003      	beq.n	80020ce <HAL_CAN_GetRxMessage+0x24>
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f040 8103 	bne.w	80022d4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10e      	bne.n	80020f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0f7      	b.n	80022e2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0e8      	b.n	80022e2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	331b      	adds	r3, #27
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0204 	and.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	331b      	adds	r3, #27
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e00b      	b.n	8002160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331b      	adds	r3, #27
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	08db      	lsrs	r3, r3, #3
 8002158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	331b      	adds	r3, #27
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0202 	and.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	331b      	adds	r3, #27
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2208      	movs	r2, #8
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	e00b      	b.n	80021ae <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	331b      	adds	r3, #27
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	331b      	adds	r3, #27
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	331b      	adds	r3, #27
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	3304      	adds	r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0a1a      	lsrs	r2, r3, #8
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0c1a      	lsrs	r2, r3, #16
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3302      	adds	r3, #2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e1a      	lsrs	r2, r3, #24
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3303      	adds	r3, #3
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3304      	adds	r3, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0a1a      	lsrs	r2, r3, #8
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3305      	adds	r3, #5
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0c1a      	lsrs	r2, r3, #16
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3306      	adds	r3, #6
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e1a      	lsrs	r2, r3, #24
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	3307      	adds	r3, #7
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e007      	b.n	80022d0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e006      	b.n	80022e2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d002      	beq.n	800230a <HAL_CAN_ActivateNotification+0x1e>
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d109      	bne.n	800231e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6959      	ldr	r1, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e006      	b.n	800232c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b08a      	sub	sp, #40	; 0x28
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d07c      	beq.n	8002476 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d023      	beq.n	80023ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f983 	bl	80026a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800239e:	e016      	b.n	80023ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	e00c      	b.n	80023ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e002      	b.n	80023ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f986 	bl	80026da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d024      	beq.n	8002422 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f962 	bl	80026b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80023f2:	e016      	b.n	8002422 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e00c      	b.n	8002422 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	e002      	b.n	8002422 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f965 	bl	80026ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d024      	beq.n	8002476 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002434:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f941 	bl	80026c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002446:	e016      	b.n	8002476 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	e00c      	b.n	8002476 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	e002      	b.n	8002476 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f944 	bl	80026fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002490:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2210      	movs	r2, #16
 8002498:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2208      	movs	r2, #8
 80024b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f92a 	bl	8002710 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fe febb 	bl	8001250 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2208      	movs	r2, #8
 8002518:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f90a 	bl	8002734 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f8f2 	bl	8002722 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8f3 	bl	8002746 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2208      	movs	r2, #8
 800257a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8eb 	bl	8002758 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d07b      	beq.n	8002684 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d072      	beq.n	800267c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d043      	beq.n	800267c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03e      	beq.n	800267c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002604:	2b60      	cmp	r3, #96	; 0x60
 8002606:	d02b      	beq.n	8002660 <HAL_CAN_IRQHandler+0x32a>
 8002608:	2b60      	cmp	r3, #96	; 0x60
 800260a:	d82e      	bhi.n	800266a <HAL_CAN_IRQHandler+0x334>
 800260c:	2b50      	cmp	r3, #80	; 0x50
 800260e:	d022      	beq.n	8002656 <HAL_CAN_IRQHandler+0x320>
 8002610:	2b50      	cmp	r3, #80	; 0x50
 8002612:	d82a      	bhi.n	800266a <HAL_CAN_IRQHandler+0x334>
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d019      	beq.n	800264c <HAL_CAN_IRQHandler+0x316>
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d826      	bhi.n	800266a <HAL_CAN_IRQHandler+0x334>
 800261c:	2b30      	cmp	r3, #48	; 0x30
 800261e:	d010      	beq.n	8002642 <HAL_CAN_IRQHandler+0x30c>
 8002620:	2b30      	cmp	r3, #48	; 0x30
 8002622:	d822      	bhi.n	800266a <HAL_CAN_IRQHandler+0x334>
 8002624:	2b10      	cmp	r3, #16
 8002626:	d002      	beq.n	800262e <HAL_CAN_IRQHandler+0x2f8>
 8002628:	2b20      	cmp	r3, #32
 800262a:	d005      	beq.n	8002638 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800262c:	e01d      	b.n	800266a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002636:	e019      	b.n	800266c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f043 0310 	orr.w	r3, r3, #16
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002640:	e014      	b.n	800266c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800264a:	e00f      	b.n	800266c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002654:	e00a      	b.n	800266c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800265e:	e005      	b.n	800266c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002668:	e000      	b.n	800266c <HAL_CAN_IRQHandler+0x336>
            break;
 800266a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800267a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2204      	movs	r2, #4
 8002682:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f867 	bl	800276a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	; 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4906      	ldr	r1, [pc, #24]	; (8002814 <__NVIC_EnableIRQ+0x34>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e0:	d301      	bcc.n	80028e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <SysTick_Config+0x40>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ee:	210f      	movs	r1, #15
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f7ff ff90 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SysTick_Config+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SysTick_Config+0x40>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff2d 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800293c:	f7ff ff42 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f7ff ff90 	bl	800286c <NVIC_EncodePriority>
 800294c:	4602      	mov	r2, r0
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff5f 	bl	8002818 <__NVIC_SetPriority>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff35 	bl	80027e0 <__NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffa2 	bl	80028d0 <SysTick_Config>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b08b      	sub	sp, #44	; 0x2c
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	e161      	b.n	8002c70 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029ac:	2201      	movs	r2, #1
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 8150 	bne.w	8002c6a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a97      	ldr	r2, [pc, #604]	; (8002c2c <HAL_GPIO_Init+0x294>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d05e      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029d4:	4a95      	ldr	r2, [pc, #596]	; (8002c2c <HAL_GPIO_Init+0x294>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d875      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029da:	4a95      	ldr	r2, [pc, #596]	; (8002c30 <HAL_GPIO_Init+0x298>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d058      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029e0:	4a93      	ldr	r2, [pc, #588]	; (8002c30 <HAL_GPIO_Init+0x298>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d86f      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029e6:	4a93      	ldr	r2, [pc, #588]	; (8002c34 <HAL_GPIO_Init+0x29c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d052      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029ec:	4a91      	ldr	r2, [pc, #580]	; (8002c34 <HAL_GPIO_Init+0x29c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d869      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029f2:	4a91      	ldr	r2, [pc, #580]	; (8002c38 <HAL_GPIO_Init+0x2a0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04c      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 80029f8:	4a8f      	ldr	r2, [pc, #572]	; (8002c38 <HAL_GPIO_Init+0x2a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d863      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 80029fe:	4a8f      	ldr	r2, [pc, #572]	; (8002c3c <HAL_GPIO_Init+0x2a4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d046      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
 8002a04:	4a8d      	ldr	r2, [pc, #564]	; (8002c3c <HAL_GPIO_Init+0x2a4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d85d      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d82a      	bhi.n	8002a64 <HAL_GPIO_Init+0xcc>
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d859      	bhi.n	8002ac6 <HAL_GPIO_Init+0x12e>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_GPIO_Init+0x80>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a93 	.word	0x08002a93
 8002a1c:	08002a6d 	.word	0x08002a6d
 8002a20:	08002a7f 	.word	0x08002a7f
 8002a24:	08002ac1 	.word	0x08002ac1
 8002a28:	08002ac7 	.word	0x08002ac7
 8002a2c:	08002ac7 	.word	0x08002ac7
 8002a30:	08002ac7 	.word	0x08002ac7
 8002a34:	08002ac7 	.word	0x08002ac7
 8002a38:	08002ac7 	.word	0x08002ac7
 8002a3c:	08002ac7 	.word	0x08002ac7
 8002a40:	08002ac7 	.word	0x08002ac7
 8002a44:	08002ac7 	.word	0x08002ac7
 8002a48:	08002ac7 	.word	0x08002ac7
 8002a4c:	08002ac7 	.word	0x08002ac7
 8002a50:	08002ac7 	.word	0x08002ac7
 8002a54:	08002ac7 	.word	0x08002ac7
 8002a58:	08002ac7 	.word	0x08002ac7
 8002a5c:	08002a75 	.word	0x08002a75
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	4a76      	ldr	r2, [pc, #472]	; (8002c40 <HAL_GPIO_Init+0x2a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a6a:	e02c      	b.n	8002ac6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e029      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	623b      	str	r3, [r7, #32]
          break;
 8002a7c:	e024      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	3308      	adds	r3, #8
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e01f      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	623b      	str	r3, [r7, #32]
          break;
 8002a90:	e01a      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	623b      	str	r3, [r7, #32]
          break;
 8002a9e:	e013      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	611a      	str	r2, [r3, #16]
          break;
 8002ab2:	e009      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	615a      	str	r2, [r3, #20]
          break;
 8002abe:	e003      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x130>
          break;
 8002ac6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	d801      	bhi.n	8002ad2 <HAL_GPIO_Init+0x13a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	e001      	b.n	8002ad6 <HAL_GPIO_Init+0x13e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d802      	bhi.n	8002ae4 <HAL_GPIO_Init+0x14c>
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	e002      	b.n	8002aea <HAL_GPIO_Init+0x152>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	3b08      	subs	r3, #8
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	210f      	movs	r1, #15
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	431a      	orrs	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80a9 	beq.w	8002c6a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a49      	ldr	r2, [pc, #292]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_GPIO_Init+0x2ac>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b30:	4a45      	ldr	r2, [pc, #276]	; (8002c48 <HAL_GPIO_Init+0x2b0>)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3d      	ldr	r2, [pc, #244]	; (8002c4c <HAL_GPIO_Init+0x2b4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00d      	beq.n	8002b78 <HAL_GPIO_Init+0x1e0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3c      	ldr	r2, [pc, #240]	; (8002c50 <HAL_GPIO_Init+0x2b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <HAL_GPIO_Init+0x1dc>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <HAL_GPIO_Init+0x2bc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_GPIO_Init+0x1d8>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_Init+0x1e2>
 8002b70:	2303      	movs	r3, #3
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x1e2>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_Init+0x1e2>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b8a:	492f      	ldr	r1, [pc, #188]	; (8002c48 <HAL_GPIO_Init+0x2b0>)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	492b      	ldr	r1, [pc, #172]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb2:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4927      	ldr	r1, [pc, #156]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4921      	ldr	r1, [pc, #132]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	491d      	ldr	r1, [pc, #116]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4917      	ldr	r1, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4913      	ldr	r1, [pc, #76]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01f      	beq.n	8002c5c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	490d      	ldr	r1, [pc, #52]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
 8002c28:	e01f      	b.n	8002c6a <HAL_GPIO_Init+0x2d2>
 8002c2a:	bf00      	nop
 8002c2c:	10320000 	.word	0x10320000
 8002c30:	10310000 	.word	0x10310000
 8002c34:	10220000 	.word	0x10220000
 8002c38:	10210000 	.word	0x10210000
 8002c3c:	10120000 	.word	0x10120000
 8002c40:	10110000 	.word	0x10110000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40010800 	.word	0x40010800
 8002c50:	40010c00 	.word	0x40010c00
 8002c54:	40011000 	.word	0x40011000
 8002c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_GPIO_Init+0x2f4>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	4909      	ldr	r1, [pc, #36]	; (8002c8c <HAL_GPIO_Init+0x2f4>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f ae96 	bne.w	80029ac <HAL_GPIO_Init+0x14>
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	372c      	adds	r7, #44	; 0x2c
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40010400 	.word	0x40010400

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e272      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8087 	beq.w	8002dbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb0:	4b92      	ldr	r3, [pc, #584]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d00c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cbc:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d112      	bne.n	8002cee <HAL_RCC_OscConfig+0x5e>
 8002cc8:	4b8c      	ldr	r3, [pc, #560]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd6:	4b89      	ldr	r3, [pc, #548]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d06c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x12c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d168      	bne.n	8002dbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e24c      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x76>
 8002cf8:	4b80      	ldr	r3, [pc, #512]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a7f      	ldr	r2, [pc, #508]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	e02e      	b.n	8002d64 <HAL_RCC_OscConfig+0xd4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x98>
 8002d0e:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7a      	ldr	r2, [pc, #488]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b78      	ldr	r3, [pc, #480]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a77      	ldr	r2, [pc, #476]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0xd4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0xbc>
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a71      	ldr	r2, [pc, #452]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6e      	ldr	r2, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0xd4>
 8002d4c:	4b6b      	ldr	r3, [pc, #428]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6a      	ldr	r2, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a67      	ldr	r2, [pc, #412]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fe98 	bl	8001aa0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fe94 	bl	8001aa0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e200      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0xe4>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe fe84 	bl	8001aa0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fe80 	bl	8001aa0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1ec      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x10c>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d063      	beq.n	8002e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dca:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dd6:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d11c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x18c>
 8002de2:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d116      	bne.n	8002e1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x176>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1c0      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4939      	ldr	r1, [pc, #228]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	e03a      	b.n	8002e92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d020      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fe39 	bl	8001aa0 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e32:	f7fe fe35 	bl	8001aa0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1a1      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4927      	ldr	r1, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fe18 	bl	8001aa0 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe fe14 	bl	8001aa0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e180      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03a      	beq.n	8002f14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d019      	beq.n	8002eda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eac:	f7fe fdf8 	bl	8001aa0 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fdf4 	bl	8001aa0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e160      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f000 face 	bl	8003474 <RCC_Delay>
 8002ed8:	e01c      	b.n	8002f14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_OscConfig+0x274>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fdde 	bl	8001aa0 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee6:	e00f      	b.n	8002f08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fdda 	bl	8001aa0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d908      	bls.n	8002f08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e146      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	42420000 	.word	0x42420000
 8002f04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b92      	ldr	r3, [pc, #584]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e9      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80a6 	beq.w	800306e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10d      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a87      	ldr	r2, [pc, #540]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b82      	ldr	r3, [pc, #520]	; (8003158 <HAL_RCC_OscConfig+0x4c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5a:	4b7f      	ldr	r3, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0x4c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7e      	ldr	r2, [pc, #504]	; (8003158 <HAL_RCC_OscConfig+0x4c8>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f66:	f7fe fd9b 	bl	8001aa0 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7fe fd97 	bl	8001aa0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e103      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x4c8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x312>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	e02d      	b.n	8002ffe <HAL_RCC_OscConfig+0x36e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x334>
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a66      	ldr	r2, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	e01c      	b.n	8002ffe <HAL_RCC_OscConfig+0x36e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x356>
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a60      	ldr	r2, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0x36e>
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a5a      	ldr	r2, [pc, #360]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	4b58      	ldr	r3, [pc, #352]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a57      	ldr	r2, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d015      	beq.n	8003032 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fe fd4b 	bl	8001aa0 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fd47 	bl	8001aa0 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0b1      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCC_OscConfig+0x37e>
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe fd35 	bl	8001aa0 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe fd31 	bl	8001aa0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e09b      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8087 	beq.w	8003186 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d061      	beq.n	8003148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d146      	bne.n	800311a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCC_OscConfig+0x4cc>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fe fd05 	bl	8001aa0 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fd01 	bl	8001aa0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e06d      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d108      	bne.n	80030d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4921      	ldr	r1, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a19      	ldr	r1, [r3, #32]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	430b      	orrs	r3, r1
 80030e6:	491b      	ldr	r1, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fe fcd5 	bl	8001aa0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fcd1 	bl	8001aa0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e03d      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x46a>
 8003118:	e035      	b.n	8003186 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_OscConfig+0x4cc>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fcbe 	bl	8001aa0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fcba 	bl	8001aa0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e026      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x498>
 8003146:	e01e      	b.n	8003186 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e019      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x500>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	429a      	cmp	r2, r3
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000

08003194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0d0      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d910      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 0207 	bic.w	r2, r3, #7
 80031be:	4965      	ldr	r1, [pc, #404]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b8      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d020      	beq.n	8003226 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003212:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	494d      	ldr	r1, [pc, #308]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d040      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d115      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07f      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e073      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06b      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4936      	ldr	r1, [pc, #216]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe fc0c 	bl	8001aa0 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fe fc08 	bl	8001aa0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e053      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d210      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	4922      	ldr	r1, [pc, #136]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e032      	b.n	800334a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4916      	ldr	r1, [pc, #88]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003322:	f000 f821 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003326:	4602      	mov	r2, r0
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	490a      	ldr	r1, [pc, #40]	; (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	5ccb      	ldrb	r3, [r1, r3]
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1cc>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1d0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fb6a 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40022000 	.word	0x40022000
 8003358:	40021000 	.word	0x40021000
 800335c:	08006704 	.word	0x08006704
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004

08003368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x30>
 8003392:	2b08      	cmp	r3, #8
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x36>
 8003396:	e027      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_GetSysClockFreq+0x98>)
 800339a:	613b      	str	r3, [r7, #16]
      break;
 800339c:	e027      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	0c9b      	lsrs	r3, r3, #18
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d010      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_GetSysClockFreq+0x94>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	0c5b      	lsrs	r3, r3, #17
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	4a11      	ldr	r2, [pc, #68]	; (8003408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	e004      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_GetSysClockFreq+0xa4>)
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	613b      	str	r3, [r7, #16]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ea:	613b      	str	r3, [r7, #16]
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	693b      	ldr	r3, [r7, #16]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	007a1200 	.word	0x007a1200
 8003404:	0800671c 	.word	0x0800671c
 8003408:	0800672c 	.word	0x0800672c
 800340c:	003d0900 	.word	0x003d0900

08003410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003414:	4b02      	ldr	r3, [pc, #8]	; (8003420 <HAL_RCC_GetHCLKFreq+0x10>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff2 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08006714 	.word	0x08006714

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffde 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	0adb      	lsrs	r3, r3, #11
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	08006714 	.word	0x08006714

08003474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <RCC_Delay+0x34>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <RCC_Delay+0x38>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0a5b      	lsrs	r3, r3, #9
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003490:	bf00      	nop
  }
  while (Delay --);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f9      	bne.n	8003490 <RCC_Delay+0x1c>
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	20000000 	.word	0x20000000
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e042      	b.n	8003548 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe f920 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f91d 	bl	8003734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d16d      	bne.n	800364c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x2c>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e066      	b.n	800364e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fe fa87 	bl	8001aa0 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d108      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e003      	b.n	80035c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c4:	e02a      	b.n	800361c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f840 	bl	8003656 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e036      	b.n	800364e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3302      	adds	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e007      	b.n	800360e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1cf      	bne.n	80035c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f810 	bl	8003656 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b090      	sub	sp, #64	; 0x40
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003666:	e050      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d04c      	beq.n	800370a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x30>
 8003676:	f7fe fa13 	bl	8001aa0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003682:	429a      	cmp	r2, r3
 8003684:	d241      	bcs.n	800370a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a6:	637a      	str	r2, [r7, #52]	; 0x34
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e5      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3314      	adds	r3, #20
 80036c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036da:	623a      	str	r2, [r7, #32]
 80036dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	69f9      	ldr	r1, [r7, #28]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e5      	bne.n	80036ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e00f      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	429a      	cmp	r2, r3
 8003726:	d09f      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3740      	adds	r7, #64	; 0x40
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800376e:	f023 030c 	bic.w	r3, r3, #12
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	430b      	orrs	r3, r1
 800377a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2c      	ldr	r2, [pc, #176]	; (8003848 <UART_SetConfig+0x114>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d103      	bne.n	80037a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7ff fe56 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	e002      	b.n	80037aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7ff fe3e 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	4a22      	ldr	r2, [pc, #136]	; (800384c <UART_SetConfig+0x118>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	0119      	lsls	r1, r3, #4
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <UART_SetConfig+0x118>)
 80037e2:	fba3 0302 	umull	r0, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2064      	movs	r0, #100	; 0x64
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <UART_SetConfig+0x118>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003800:	4419      	add	r1, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009a      	lsls	r2, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	fbb2 f2f3 	udiv	r2, r2, r3
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <UART_SetConfig+0x118>)
 800381a:	fba3 0302 	umull	r0, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2064      	movs	r0, #100	; 0x64
 8003822:	fb00 f303 	mul.w	r3, r0, r3
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	3332      	adds	r3, #50	; 0x32
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <UART_SetConfig+0x118>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	440a      	add	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40013800 	.word	0x40013800
 800384c:	51eb851f 	.word	0x51eb851f

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	2600      	movs	r6, #0
 8003860:	4d0c      	ldr	r5, [pc, #48]	; (8003894 <__libc_init_array+0x38>)
 8003862:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003864:	1b64      	subs	r4, r4, r5
 8003866:	10a4      	asrs	r4, r4, #2
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	f002 fefc 	bl	8006668 <_init>
 8003870:	2600      	movs	r6, #0
 8003872:	4d0a      	ldr	r5, [pc, #40]	; (800389c <__libc_init_array+0x40>)
 8003874:	4c0a      	ldr	r4, [pc, #40]	; (80038a0 <__libc_init_array+0x44>)
 8003876:	1b64      	subs	r4, r4, r5
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08006b0c 	.word	0x08006b0c
 8003898:	08006b0c 	.word	0x08006b0c
 800389c:	08006b0c 	.word	0x08006b0c
 80038a0:	08006b14 	.word	0x08006b14

080038a4 <memset>:
 80038a4:	4603      	mov	r3, r0
 80038a6:	4402      	add	r2, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	f803 1b01 	strb.w	r1, [r3], #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <__cvt>:
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ba:	461f      	mov	r7, r3
 80038bc:	bfbb      	ittet	lt
 80038be:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80038c2:	461f      	movlt	r7, r3
 80038c4:	2300      	movge	r3, #0
 80038c6:	232d      	movlt	r3, #45	; 0x2d
 80038c8:	b088      	sub	sp, #32
 80038ca:	4614      	mov	r4, r2
 80038cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80038ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80038d0:	7013      	strb	r3, [r2, #0]
 80038d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80038d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80038d8:	f023 0820 	bic.w	r8, r3, #32
 80038dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038e0:	d005      	beq.n	80038ee <__cvt+0x3a>
 80038e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80038e6:	d100      	bne.n	80038ea <__cvt+0x36>
 80038e8:	3501      	adds	r5, #1
 80038ea:	2302      	movs	r3, #2
 80038ec:	e000      	b.n	80038f0 <__cvt+0x3c>
 80038ee:	2303      	movs	r3, #3
 80038f0:	aa07      	add	r2, sp, #28
 80038f2:	9204      	str	r2, [sp, #16]
 80038f4:	aa06      	add	r2, sp, #24
 80038f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80038fa:	e9cd 3500 	strd	r3, r5, [sp]
 80038fe:	4622      	mov	r2, r4
 8003900:	463b      	mov	r3, r7
 8003902:	f000 fce5 	bl	80042d0 <_dtoa_r>
 8003906:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800390a:	4606      	mov	r6, r0
 800390c:	d102      	bne.n	8003914 <__cvt+0x60>
 800390e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003910:	07db      	lsls	r3, r3, #31
 8003912:	d522      	bpl.n	800395a <__cvt+0xa6>
 8003914:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003918:	eb06 0905 	add.w	r9, r6, r5
 800391c:	d110      	bne.n	8003940 <__cvt+0x8c>
 800391e:	7833      	ldrb	r3, [r6, #0]
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d10a      	bne.n	800393a <__cvt+0x86>
 8003924:	2200      	movs	r2, #0
 8003926:	2300      	movs	r3, #0
 8003928:	4620      	mov	r0, r4
 800392a:	4639      	mov	r1, r7
 800392c:	f7fd f8f0 	bl	8000b10 <__aeabi_dcmpeq>
 8003930:	b918      	cbnz	r0, 800393a <__cvt+0x86>
 8003932:	f1c5 0501 	rsb	r5, r5, #1
 8003936:	f8ca 5000 	str.w	r5, [sl]
 800393a:	f8da 3000 	ldr.w	r3, [sl]
 800393e:	4499      	add	r9, r3
 8003940:	2200      	movs	r2, #0
 8003942:	2300      	movs	r3, #0
 8003944:	4620      	mov	r0, r4
 8003946:	4639      	mov	r1, r7
 8003948:	f7fd f8e2 	bl	8000b10 <__aeabi_dcmpeq>
 800394c:	b108      	cbz	r0, 8003952 <__cvt+0x9e>
 800394e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003952:	2230      	movs	r2, #48	; 0x30
 8003954:	9b07      	ldr	r3, [sp, #28]
 8003956:	454b      	cmp	r3, r9
 8003958:	d307      	bcc.n	800396a <__cvt+0xb6>
 800395a:	4630      	mov	r0, r6
 800395c:	9b07      	ldr	r3, [sp, #28]
 800395e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003960:	1b9b      	subs	r3, r3, r6
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	b008      	add	sp, #32
 8003966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	9107      	str	r1, [sp, #28]
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e7f0      	b.n	8003954 <__cvt+0xa0>

08003972 <__exponent>:
 8003972:	4603      	mov	r3, r0
 8003974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003976:	2900      	cmp	r1, #0
 8003978:	f803 2b02 	strb.w	r2, [r3], #2
 800397c:	bfb6      	itet	lt
 800397e:	222d      	movlt	r2, #45	; 0x2d
 8003980:	222b      	movge	r2, #43	; 0x2b
 8003982:	4249      	neglt	r1, r1
 8003984:	2909      	cmp	r1, #9
 8003986:	7042      	strb	r2, [r0, #1]
 8003988:	dd2b      	ble.n	80039e2 <__exponent+0x70>
 800398a:	f10d 0407 	add.w	r4, sp, #7
 800398e:	46a4      	mov	ip, r4
 8003990:	270a      	movs	r7, #10
 8003992:	fb91 f6f7 	sdiv	r6, r1, r7
 8003996:	460a      	mov	r2, r1
 8003998:	46a6      	mov	lr, r4
 800399a:	fb07 1516 	mls	r5, r7, r6, r1
 800399e:	2a63      	cmp	r2, #99	; 0x63
 80039a0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80039a4:	4631      	mov	r1, r6
 80039a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80039aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039ae:	dcf0      	bgt.n	8003992 <__exponent+0x20>
 80039b0:	3130      	adds	r1, #48	; 0x30
 80039b2:	f1ae 0502 	sub.w	r5, lr, #2
 80039b6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039ba:	4629      	mov	r1, r5
 80039bc:	1c44      	adds	r4, r0, #1
 80039be:	4561      	cmp	r1, ip
 80039c0:	d30a      	bcc.n	80039d8 <__exponent+0x66>
 80039c2:	f10d 0209 	add.w	r2, sp, #9
 80039c6:	eba2 020e 	sub.w	r2, r2, lr
 80039ca:	4565      	cmp	r5, ip
 80039cc:	bf88      	it	hi
 80039ce:	2200      	movhi	r2, #0
 80039d0:	4413      	add	r3, r2
 80039d2:	1a18      	subs	r0, r3, r0
 80039d4:	b003      	add	sp, #12
 80039d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039dc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80039e0:	e7ed      	b.n	80039be <__exponent+0x4c>
 80039e2:	2330      	movs	r3, #48	; 0x30
 80039e4:	3130      	adds	r1, #48	; 0x30
 80039e6:	7083      	strb	r3, [r0, #2]
 80039e8:	70c1      	strb	r1, [r0, #3]
 80039ea:	1d03      	adds	r3, r0, #4
 80039ec:	e7f1      	b.n	80039d2 <__exponent+0x60>
	...

080039f0 <_printf_float>:
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	b091      	sub	sp, #68	; 0x44
 80039f6:	460c      	mov	r4, r1
 80039f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80039fc:	4616      	mov	r6, r2
 80039fe:	461f      	mov	r7, r3
 8003a00:	4605      	mov	r5, r0
 8003a02:	f001 fa53 	bl	8004eac <_localeconv_r>
 8003a06:	6803      	ldr	r3, [r0, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0c:	f7fc fba0 	bl	8000150 <strlen>
 8003a10:	2300      	movs	r3, #0
 8003a12:	930e      	str	r3, [sp, #56]	; 0x38
 8003a14:	f8d8 3000 	ldr.w	r3, [r8]
 8003a18:	900a      	str	r0, [sp, #40]	; 0x28
 8003a1a:	3307      	adds	r3, #7
 8003a1c:	f023 0307 	bic.w	r3, r3, #7
 8003a20:	f103 0208 	add.w	r2, r3, #8
 8003a24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003a28:	f8d4 b000 	ldr.w	fp, [r4]
 8003a2c:	f8c8 2000 	str.w	r2, [r8]
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003a3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295
 8003a46:	4640      	mov	r0, r8
 8003a48:	4b9c      	ldr	r3, [pc, #624]	; (8003cbc <_printf_float+0x2cc>)
 8003a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a4c:	f7fd f892 	bl	8000b74 <__aeabi_dcmpun>
 8003a50:	bb70      	cbnz	r0, 8003ab0 <_printf_float+0xc0>
 8003a52:	f04f 32ff 	mov.w	r2, #4294967295
 8003a56:	4640      	mov	r0, r8
 8003a58:	4b98      	ldr	r3, [pc, #608]	; (8003cbc <_printf_float+0x2cc>)
 8003a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a5c:	f7fd f86c 	bl	8000b38 <__aeabi_dcmple>
 8003a60:	bb30      	cbnz	r0, 8003ab0 <_printf_float+0xc0>
 8003a62:	2200      	movs	r2, #0
 8003a64:	2300      	movs	r3, #0
 8003a66:	4640      	mov	r0, r8
 8003a68:	4651      	mov	r1, sl
 8003a6a:	f7fd f85b 	bl	8000b24 <__aeabi_dcmplt>
 8003a6e:	b110      	cbz	r0, 8003a76 <_printf_float+0x86>
 8003a70:	232d      	movs	r3, #45	; 0x2d
 8003a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a76:	4b92      	ldr	r3, [pc, #584]	; (8003cc0 <_printf_float+0x2d0>)
 8003a78:	4892      	ldr	r0, [pc, #584]	; (8003cc4 <_printf_float+0x2d4>)
 8003a7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a7e:	bf94      	ite	ls
 8003a80:	4698      	movls	r8, r3
 8003a82:	4680      	movhi	r8, r0
 8003a84:	2303      	movs	r3, #3
 8003a86:	f04f 0a00 	mov.w	sl, #0
 8003a8a:	6123      	str	r3, [r4, #16]
 8003a8c:	f02b 0304 	bic.w	r3, fp, #4
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	4633      	mov	r3, r6
 8003a94:	4621      	mov	r1, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	9700      	str	r7, [sp, #0]
 8003a9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a9c:	f000 f9d4 	bl	8003e48 <_printf_common>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	f040 8090 	bne.w	8003bc6 <_printf_float+0x1d6>
 8003aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aaa:	b011      	add	sp, #68	; 0x44
 8003aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	4653      	mov	r3, sl
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	f7fd f85c 	bl	8000b74 <__aeabi_dcmpun>
 8003abc:	b148      	cbz	r0, 8003ad2 <_printf_float+0xe2>
 8003abe:	f1ba 0f00 	cmp.w	sl, #0
 8003ac2:	bfb8      	it	lt
 8003ac4:	232d      	movlt	r3, #45	; 0x2d
 8003ac6:	4880      	ldr	r0, [pc, #512]	; (8003cc8 <_printf_float+0x2d8>)
 8003ac8:	bfb8      	it	lt
 8003aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ace:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <_printf_float+0x2dc>)
 8003ad0:	e7d3      	b.n	8003a7a <_printf_float+0x8a>
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	d142      	bne.n	8003b62 <_printf_float+0x172>
 8003adc:	2306      	movs	r3, #6
 8003ade:	6063      	str	r3, [r4, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	9206      	str	r2, [sp, #24]
 8003ae4:	aa0e      	add	r2, sp, #56	; 0x38
 8003ae6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003aea:	aa0d      	add	r2, sp, #52	; 0x34
 8003aec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003af0:	9203      	str	r2, [sp, #12]
 8003af2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003af6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	4642      	mov	r2, r8
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4628      	mov	r0, r5
 8003b04:	4653      	mov	r3, sl
 8003b06:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b08:	f7ff fed4 	bl	80038b4 <__cvt>
 8003b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b0e:	4680      	mov	r8, r0
 8003b10:	2947      	cmp	r1, #71	; 0x47
 8003b12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b14:	d108      	bne.n	8003b28 <_printf_float+0x138>
 8003b16:	1cc8      	adds	r0, r1, #3
 8003b18:	db02      	blt.n	8003b20 <_printf_float+0x130>
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	dd40      	ble.n	8003ba2 <_printf_float+0x1b2>
 8003b20:	f1a9 0902 	sub.w	r9, r9, #2
 8003b24:	fa5f f989 	uxtb.w	r9, r9
 8003b28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b2c:	d81f      	bhi.n	8003b6e <_printf_float+0x17e>
 8003b2e:	464a      	mov	r2, r9
 8003b30:	3901      	subs	r1, #1
 8003b32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b36:	910d      	str	r1, [sp, #52]	; 0x34
 8003b38:	f7ff ff1b 	bl	8003972 <__exponent>
 8003b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b3e:	4682      	mov	sl, r0
 8003b40:	1813      	adds	r3, r2, r0
 8003b42:	2a01      	cmp	r2, #1
 8003b44:	6123      	str	r3, [r4, #16]
 8003b46:	dc02      	bgt.n	8003b4e <_printf_float+0x15e>
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	07d2      	lsls	r2, r2, #31
 8003b4c:	d501      	bpl.n	8003b52 <_printf_float+0x162>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6123      	str	r3, [r4, #16]
 8003b52:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d09b      	beq.n	8003a92 <_printf_float+0xa2>
 8003b5a:	232d      	movs	r3, #45	; 0x2d
 8003b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b60:	e797      	b.n	8003a92 <_printf_float+0xa2>
 8003b62:	2947      	cmp	r1, #71	; 0x47
 8003b64:	d1bc      	bne.n	8003ae0 <_printf_float+0xf0>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ba      	bne.n	8003ae0 <_printf_float+0xf0>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7b7      	b.n	8003ade <_printf_float+0xee>
 8003b6e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b72:	d118      	bne.n	8003ba6 <_printf_float+0x1b6>
 8003b74:	2900      	cmp	r1, #0
 8003b76:	6863      	ldr	r3, [r4, #4]
 8003b78:	dd0b      	ble.n	8003b92 <_printf_float+0x1a2>
 8003b7a:	6121      	str	r1, [r4, #16]
 8003b7c:	b913      	cbnz	r3, 8003b84 <_printf_float+0x194>
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	07d0      	lsls	r0, r2, #31
 8003b82:	d502      	bpl.n	8003b8a <_printf_float+0x19a>
 8003b84:	3301      	adds	r3, #1
 8003b86:	440b      	add	r3, r1
 8003b88:	6123      	str	r3, [r4, #16]
 8003b8a:	f04f 0a00 	mov.w	sl, #0
 8003b8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b90:	e7df      	b.n	8003b52 <_printf_float+0x162>
 8003b92:	b913      	cbnz	r3, 8003b9a <_printf_float+0x1aa>
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	07d2      	lsls	r2, r2, #31
 8003b98:	d501      	bpl.n	8003b9e <_printf_float+0x1ae>
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	e7f4      	b.n	8003b88 <_printf_float+0x198>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e7f2      	b.n	8003b88 <_printf_float+0x198>
 8003ba2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	db05      	blt.n	8003bb8 <_printf_float+0x1c8>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	6121      	str	r1, [r4, #16]
 8003bb0:	07d8      	lsls	r0, r3, #31
 8003bb2:	d5ea      	bpl.n	8003b8a <_printf_float+0x19a>
 8003bb4:	1c4b      	adds	r3, r1, #1
 8003bb6:	e7e7      	b.n	8003b88 <_printf_float+0x198>
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	bfcc      	ite	gt
 8003bbc:	2201      	movgt	r2, #1
 8003bbe:	f1c1 0202 	rsble	r2, r1, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	e7e0      	b.n	8003b88 <_printf_float+0x198>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	055a      	lsls	r2, r3, #21
 8003bca:	d407      	bmi.n	8003bdc <_printf_float+0x1ec>
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	4642      	mov	r2, r8
 8003bd0:	4631      	mov	r1, r6
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	47b8      	blx	r7
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d12b      	bne.n	8003c32 <_printf_float+0x242>
 8003bda:	e764      	b.n	8003aa6 <_printf_float+0xb6>
 8003bdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003be0:	f240 80dd 	bls.w	8003d9e <_printf_float+0x3ae>
 8003be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003be8:	2200      	movs	r2, #0
 8003bea:	2300      	movs	r3, #0
 8003bec:	f7fc ff90 	bl	8000b10 <__aeabi_dcmpeq>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d033      	beq.n	8003c5c <_printf_float+0x26c>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <_printf_float+0x2e0>)
 8003bfc:	47b8      	blx	r7
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f43f af51 	beq.w	8003aa6 <_printf_float+0xb6>
 8003c04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	db02      	blt.n	8003c12 <_printf_float+0x222>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	07d8      	lsls	r0, r3, #31
 8003c10:	d50f      	bpl.n	8003c32 <_printf_float+0x242>
 8003c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c16:	4631      	mov	r1, r6
 8003c18:	4628      	mov	r0, r5
 8003c1a:	47b8      	blx	r7
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	f43f af42 	beq.w	8003aa6 <_printf_float+0xb6>
 8003c22:	f04f 0800 	mov.w	r8, #0
 8003c26:	f104 091a 	add.w	r9, r4, #26
 8003c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	4543      	cmp	r3, r8
 8003c30:	dc09      	bgt.n	8003c46 <_printf_float+0x256>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	079b      	lsls	r3, r3, #30
 8003c36:	f100 8102 	bmi.w	8003e3e <_printf_float+0x44e>
 8003c3a:	68e0      	ldr	r0, [r4, #12]
 8003c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c3e:	4298      	cmp	r0, r3
 8003c40:	bfb8      	it	lt
 8003c42:	4618      	movlt	r0, r3
 8003c44:	e731      	b.n	8003aaa <_printf_float+0xba>
 8003c46:	2301      	movs	r3, #1
 8003c48:	464a      	mov	r2, r9
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b8      	blx	r7
 8003c50:	3001      	adds	r0, #1
 8003c52:	f43f af28 	beq.w	8003aa6 <_printf_float+0xb6>
 8003c56:	f108 0801 	add.w	r8, r8, #1
 8003c5a:	e7e6      	b.n	8003c2a <_printf_float+0x23a>
 8003c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	dc38      	bgt.n	8003cd4 <_printf_float+0x2e4>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <_printf_float+0x2e0>)
 8003c6a:	47b8      	blx	r7
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f43f af1a 	beq.w	8003aa6 <_printf_float+0xb6>
 8003c72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d102      	bne.n	8003c80 <_printf_float+0x290>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	07d9      	lsls	r1, r3, #31
 8003c7e:	d5d8      	bpl.n	8003c32 <_printf_float+0x242>
 8003c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c84:	4631      	mov	r1, r6
 8003c86:	4628      	mov	r0, r5
 8003c88:	47b8      	blx	r7
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	f43f af0b 	beq.w	8003aa6 <_printf_float+0xb6>
 8003c90:	f04f 0900 	mov.w	r9, #0
 8003c94:	f104 0a1a 	add.w	sl, r4, #26
 8003c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c9a:	425b      	negs	r3, r3
 8003c9c:	454b      	cmp	r3, r9
 8003c9e:	dc01      	bgt.n	8003ca4 <_printf_float+0x2b4>
 8003ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ca2:	e794      	b.n	8003bce <_printf_float+0x1de>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f43f aef9 	beq.w	8003aa6 <_printf_float+0xb6>
 8003cb4:	f109 0901 	add.w	r9, r9, #1
 8003cb8:	e7ee      	b.n	8003c98 <_printf_float+0x2a8>
 8003cba:	bf00      	nop
 8003cbc:	7fefffff 	.word	0x7fefffff
 8003cc0:	08006734 	.word	0x08006734
 8003cc4:	08006738 	.word	0x08006738
 8003cc8:	08006740 	.word	0x08006740
 8003ccc:	0800673c 	.word	0x0800673c
 8003cd0:	08006744 	.word	0x08006744
 8003cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	bfa8      	it	ge
 8003cdc:	461a      	movge	r2, r3
 8003cde:	2a00      	cmp	r2, #0
 8003ce0:	4691      	mov	r9, r2
 8003ce2:	dc37      	bgt.n	8003d54 <_printf_float+0x364>
 8003ce4:	f04f 0b00 	mov.w	fp, #0
 8003ce8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cec:	f104 021a 	add.w	r2, r4, #26
 8003cf0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003cf4:	ebaa 0309 	sub.w	r3, sl, r9
 8003cf8:	455b      	cmp	r3, fp
 8003cfa:	dc33      	bgt.n	8003d64 <_printf_float+0x374>
 8003cfc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d00:	429a      	cmp	r2, r3
 8003d02:	db3b      	blt.n	8003d7c <_printf_float+0x38c>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	07da      	lsls	r2, r3, #31
 8003d08:	d438      	bmi.n	8003d7c <_printf_float+0x38c>
 8003d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d0e:	eba3 020a 	sub.w	r2, r3, sl
 8003d12:	eba3 0901 	sub.w	r9, r3, r1
 8003d16:	4591      	cmp	r9, r2
 8003d18:	bfa8      	it	ge
 8003d1a:	4691      	movge	r9, r2
 8003d1c:	f1b9 0f00 	cmp.w	r9, #0
 8003d20:	dc34      	bgt.n	8003d8c <_printf_float+0x39c>
 8003d22:	f04f 0800 	mov.w	r8, #0
 8003d26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d2a:	f104 0a1a 	add.w	sl, r4, #26
 8003d2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	eba3 0309 	sub.w	r3, r3, r9
 8003d38:	4543      	cmp	r3, r8
 8003d3a:	f77f af7a 	ble.w	8003c32 <_printf_float+0x242>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	4652      	mov	r2, sl
 8003d42:	4631      	mov	r1, r6
 8003d44:	4628      	mov	r0, r5
 8003d46:	47b8      	blx	r7
 8003d48:	3001      	adds	r0, #1
 8003d4a:	f43f aeac 	beq.w	8003aa6 <_printf_float+0xb6>
 8003d4e:	f108 0801 	add.w	r8, r8, #1
 8003d52:	e7ec      	b.n	8003d2e <_printf_float+0x33e>
 8003d54:	4613      	mov	r3, r2
 8003d56:	4631      	mov	r1, r6
 8003d58:	4642      	mov	r2, r8
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b8      	blx	r7
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d1c0      	bne.n	8003ce4 <_printf_float+0x2f4>
 8003d62:	e6a0      	b.n	8003aa6 <_printf_float+0xb6>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4631      	mov	r1, r6
 8003d68:	4628      	mov	r0, r5
 8003d6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d6c:	47b8      	blx	r7
 8003d6e:	3001      	adds	r0, #1
 8003d70:	f43f ae99 	beq.w	8003aa6 <_printf_float+0xb6>
 8003d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d76:	f10b 0b01 	add.w	fp, fp, #1
 8003d7a:	e7b9      	b.n	8003cf0 <_printf_float+0x300>
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d82:	4628      	mov	r0, r5
 8003d84:	47b8      	blx	r7
 8003d86:	3001      	adds	r0, #1
 8003d88:	d1bf      	bne.n	8003d0a <_printf_float+0x31a>
 8003d8a:	e68c      	b.n	8003aa6 <_printf_float+0xb6>
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4628      	mov	r0, r5
 8003d92:	eb08 020a 	add.w	r2, r8, sl
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d1c2      	bne.n	8003d22 <_printf_float+0x332>
 8003d9c:	e683      	b.n	8003aa6 <_printf_float+0xb6>
 8003d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003da0:	2a01      	cmp	r2, #1
 8003da2:	dc01      	bgt.n	8003da8 <_printf_float+0x3b8>
 8003da4:	07db      	lsls	r3, r3, #31
 8003da6:	d537      	bpl.n	8003e18 <_printf_float+0x428>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4642      	mov	r2, r8
 8003dac:	4631      	mov	r1, r6
 8003dae:	4628      	mov	r0, r5
 8003db0:	47b8      	blx	r7
 8003db2:	3001      	adds	r0, #1
 8003db4:	f43f ae77 	beq.w	8003aa6 <_printf_float+0xb6>
 8003db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	47b8      	blx	r7
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	f43f ae6f 	beq.w	8003aa6 <_printf_float+0xb6>
 8003dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f7fc fe9e 	bl	8000b10 <__aeabi_dcmpeq>
 8003dd4:	b9d8      	cbnz	r0, 8003e0e <_printf_float+0x41e>
 8003dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dd8:	f108 0201 	add.w	r2, r8, #1
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	4631      	mov	r1, r6
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b8      	blx	r7
 8003de4:	3001      	adds	r0, #1
 8003de6:	d10e      	bne.n	8003e06 <_printf_float+0x416>
 8003de8:	e65d      	b.n	8003aa6 <_printf_float+0xb6>
 8003dea:	2301      	movs	r3, #1
 8003dec:	464a      	mov	r2, r9
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b8      	blx	r7
 8003df4:	3001      	adds	r0, #1
 8003df6:	f43f ae56 	beq.w	8003aa6 <_printf_float+0xb6>
 8003dfa:	f108 0801 	add.w	r8, r8, #1
 8003dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e00:	3b01      	subs	r3, #1
 8003e02:	4543      	cmp	r3, r8
 8003e04:	dcf1      	bgt.n	8003dea <_printf_float+0x3fa>
 8003e06:	4653      	mov	r3, sl
 8003e08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e0c:	e6e0      	b.n	8003bd0 <_printf_float+0x1e0>
 8003e0e:	f04f 0800 	mov.w	r8, #0
 8003e12:	f104 091a 	add.w	r9, r4, #26
 8003e16:	e7f2      	b.n	8003dfe <_printf_float+0x40e>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	4642      	mov	r2, r8
 8003e1c:	e7df      	b.n	8003dde <_printf_float+0x3ee>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	464a      	mov	r2, r9
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b8      	blx	r7
 8003e28:	3001      	adds	r0, #1
 8003e2a:	f43f ae3c 	beq.w	8003aa6 <_printf_float+0xb6>
 8003e2e:	f108 0801 	add.w	r8, r8, #1
 8003e32:	68e3      	ldr	r3, [r4, #12]
 8003e34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003e36:	1a5b      	subs	r3, r3, r1
 8003e38:	4543      	cmp	r3, r8
 8003e3a:	dcf0      	bgt.n	8003e1e <_printf_float+0x42e>
 8003e3c:	e6fd      	b.n	8003c3a <_printf_float+0x24a>
 8003e3e:	f04f 0800 	mov.w	r8, #0
 8003e42:	f104 0919 	add.w	r9, r4, #25
 8003e46:	e7f4      	b.n	8003e32 <_printf_float+0x442>

08003e48 <_printf_common>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	4699      	mov	r9, r3
 8003e50:	688a      	ldr	r2, [r1, #8]
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	4607      	mov	r7, r0
 8003e56:	4293      	cmp	r3, r2
 8003e58:	bfb8      	it	lt
 8003e5a:	4613      	movlt	r3, r2
 8003e5c:	6033      	str	r3, [r6, #0]
 8003e5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e62:	460c      	mov	r4, r1
 8003e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e68:	b10a      	cbz	r2, 8003e6e <_printf_common+0x26>
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	6033      	str	r3, [r6, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	0699      	lsls	r1, r3, #26
 8003e72:	bf42      	ittt	mi
 8003e74:	6833      	ldrmi	r3, [r6, #0]
 8003e76:	3302      	addmi	r3, #2
 8003e78:	6033      	strmi	r3, [r6, #0]
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	f015 0506 	ands.w	r5, r5, #6
 8003e80:	d106      	bne.n	8003e90 <_printf_common+0x48>
 8003e82:	f104 0a19 	add.w	sl, r4, #25
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	6832      	ldr	r2, [r6, #0]
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	dc28      	bgt.n	8003ee2 <_printf_common+0x9a>
 8003e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e94:	1e13      	subs	r3, r2, #0
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	bf18      	it	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	0692      	lsls	r2, r2, #26
 8003e9e:	d42d      	bmi.n	8003efc <_printf_common+0xb4>
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea8:	47c0      	blx	r8
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d020      	beq.n	8003ef0 <_printf_common+0xa8>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	68e5      	ldr	r5, [r4, #12]
 8003eb2:	f003 0306 	and.w	r3, r3, #6
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf18      	it	ne
 8003eba:	2500      	movne	r5, #0
 8003ebc:	6832      	ldr	r2, [r6, #0]
 8003ebe:	f04f 0600 	mov.w	r6, #0
 8003ec2:	68a3      	ldr	r3, [r4, #8]
 8003ec4:	bf08      	it	eq
 8003ec6:	1aad      	subeq	r5, r5, r2
 8003ec8:	6922      	ldr	r2, [r4, #16]
 8003eca:	bf08      	it	eq
 8003ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bfc4      	itt	gt
 8003ed4:	1a9b      	subgt	r3, r3, r2
 8003ed6:	18ed      	addgt	r5, r5, r3
 8003ed8:	341a      	adds	r4, #26
 8003eda:	42b5      	cmp	r5, r6
 8003edc:	d11a      	bne.n	8003f14 <_printf_common+0xcc>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e008      	b.n	8003ef4 <_printf_common+0xac>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4638      	mov	r0, r7
 8003eea:	47c0      	blx	r8
 8003eec:	3001      	adds	r0, #1
 8003eee:	d103      	bne.n	8003ef8 <_printf_common+0xb0>
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	3501      	adds	r5, #1
 8003efa:	e7c4      	b.n	8003e86 <_printf_common+0x3e>
 8003efc:	2030      	movs	r0, #48	; 0x30
 8003efe:	18e1      	adds	r1, r4, r3
 8003f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f0a:	4422      	add	r2, r4
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f12:	e7c5      	b.n	8003ea0 <_printf_common+0x58>
 8003f14:	2301      	movs	r3, #1
 8003f16:	4622      	mov	r2, r4
 8003f18:	4649      	mov	r1, r9
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	47c0      	blx	r8
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d0e6      	beq.n	8003ef0 <_printf_common+0xa8>
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7d9      	b.n	8003eda <_printf_common+0x92>
	...

08003f28 <_printf_i>:
 8003f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f2c:	7e0f      	ldrb	r7, [r1, #24]
 8003f2e:	4691      	mov	r9, r2
 8003f30:	2f78      	cmp	r7, #120	; 0x78
 8003f32:	4680      	mov	r8, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	469a      	mov	sl, r3
 8003f38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f3e:	d807      	bhi.n	8003f50 <_printf_i+0x28>
 8003f40:	2f62      	cmp	r7, #98	; 0x62
 8003f42:	d80a      	bhi.n	8003f5a <_printf_i+0x32>
 8003f44:	2f00      	cmp	r7, #0
 8003f46:	f000 80d9 	beq.w	80040fc <_printf_i+0x1d4>
 8003f4a:	2f58      	cmp	r7, #88	; 0x58
 8003f4c:	f000 80a4 	beq.w	8004098 <_printf_i+0x170>
 8003f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f58:	e03a      	b.n	8003fd0 <_printf_i+0xa8>
 8003f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f5e:	2b15      	cmp	r3, #21
 8003f60:	d8f6      	bhi.n	8003f50 <_printf_i+0x28>
 8003f62:	a101      	add	r1, pc, #4	; (adr r1, 8003f68 <_printf_i+0x40>)
 8003f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f68:	08003fc1 	.word	0x08003fc1
 8003f6c:	08003fd5 	.word	0x08003fd5
 8003f70:	08003f51 	.word	0x08003f51
 8003f74:	08003f51 	.word	0x08003f51
 8003f78:	08003f51 	.word	0x08003f51
 8003f7c:	08003f51 	.word	0x08003f51
 8003f80:	08003fd5 	.word	0x08003fd5
 8003f84:	08003f51 	.word	0x08003f51
 8003f88:	08003f51 	.word	0x08003f51
 8003f8c:	08003f51 	.word	0x08003f51
 8003f90:	08003f51 	.word	0x08003f51
 8003f94:	080040e3 	.word	0x080040e3
 8003f98:	08004005 	.word	0x08004005
 8003f9c:	080040c5 	.word	0x080040c5
 8003fa0:	08003f51 	.word	0x08003f51
 8003fa4:	08003f51 	.word	0x08003f51
 8003fa8:	08004105 	.word	0x08004105
 8003fac:	08003f51 	.word	0x08003f51
 8003fb0:	08004005 	.word	0x08004005
 8003fb4:	08003f51 	.word	0x08003f51
 8003fb8:	08003f51 	.word	0x08003f51
 8003fbc:	080040cd 	.word	0x080040cd
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	1d1a      	adds	r2, r3, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	602a      	str	r2, [r5, #0]
 8003fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0a4      	b.n	800411e <_printf_i+0x1f6>
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	6829      	ldr	r1, [r5, #0]
 8003fd8:	0606      	lsls	r6, r0, #24
 8003fda:	f101 0304 	add.w	r3, r1, #4
 8003fde:	d50a      	bpl.n	8003ff6 <_printf_i+0xce>
 8003fe0:	680e      	ldr	r6, [r1, #0]
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	2e00      	cmp	r6, #0
 8003fe6:	da03      	bge.n	8003ff0 <_printf_i+0xc8>
 8003fe8:	232d      	movs	r3, #45	; 0x2d
 8003fea:	4276      	negs	r6, r6
 8003fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	485e      	ldr	r0, [pc, #376]	; (800416c <_printf_i+0x244>)
 8003ff4:	e019      	b.n	800402a <_printf_i+0x102>
 8003ff6:	680e      	ldr	r6, [r1, #0]
 8003ff8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ffc:	602b      	str	r3, [r5, #0]
 8003ffe:	bf18      	it	ne
 8004000:	b236      	sxthne	r6, r6
 8004002:	e7ef      	b.n	8003fe4 <_printf_i+0xbc>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	6820      	ldr	r0, [r4, #0]
 8004008:	1d19      	adds	r1, r3, #4
 800400a:	6029      	str	r1, [r5, #0]
 800400c:	0601      	lsls	r1, r0, #24
 800400e:	d501      	bpl.n	8004014 <_printf_i+0xec>
 8004010:	681e      	ldr	r6, [r3, #0]
 8004012:	e002      	b.n	800401a <_printf_i+0xf2>
 8004014:	0646      	lsls	r6, r0, #25
 8004016:	d5fb      	bpl.n	8004010 <_printf_i+0xe8>
 8004018:	881e      	ldrh	r6, [r3, #0]
 800401a:	2f6f      	cmp	r7, #111	; 0x6f
 800401c:	bf0c      	ite	eq
 800401e:	2308      	moveq	r3, #8
 8004020:	230a      	movne	r3, #10
 8004022:	4852      	ldr	r0, [pc, #328]	; (800416c <_printf_i+0x244>)
 8004024:	2100      	movs	r1, #0
 8004026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800402a:	6865      	ldr	r5, [r4, #4]
 800402c:	2d00      	cmp	r5, #0
 800402e:	bfa8      	it	ge
 8004030:	6821      	ldrge	r1, [r4, #0]
 8004032:	60a5      	str	r5, [r4, #8]
 8004034:	bfa4      	itt	ge
 8004036:	f021 0104 	bicge.w	r1, r1, #4
 800403a:	6021      	strge	r1, [r4, #0]
 800403c:	b90e      	cbnz	r6, 8004042 <_printf_i+0x11a>
 800403e:	2d00      	cmp	r5, #0
 8004040:	d04d      	beq.n	80040de <_printf_i+0x1b6>
 8004042:	4615      	mov	r5, r2
 8004044:	fbb6 f1f3 	udiv	r1, r6, r3
 8004048:	fb03 6711 	mls	r7, r3, r1, r6
 800404c:	5dc7      	ldrb	r7, [r0, r7]
 800404e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004052:	4637      	mov	r7, r6
 8004054:	42bb      	cmp	r3, r7
 8004056:	460e      	mov	r6, r1
 8004058:	d9f4      	bls.n	8004044 <_printf_i+0x11c>
 800405a:	2b08      	cmp	r3, #8
 800405c:	d10b      	bne.n	8004076 <_printf_i+0x14e>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	07de      	lsls	r6, r3, #31
 8004062:	d508      	bpl.n	8004076 <_printf_i+0x14e>
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	6861      	ldr	r1, [r4, #4]
 8004068:	4299      	cmp	r1, r3
 800406a:	bfde      	ittt	le
 800406c:	2330      	movle	r3, #48	; 0x30
 800406e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004072:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004076:	1b52      	subs	r2, r2, r5
 8004078:	6122      	str	r2, [r4, #16]
 800407a:	464b      	mov	r3, r9
 800407c:	4621      	mov	r1, r4
 800407e:	4640      	mov	r0, r8
 8004080:	f8cd a000 	str.w	sl, [sp]
 8004084:	aa03      	add	r2, sp, #12
 8004086:	f7ff fedf 	bl	8003e48 <_printf_common>
 800408a:	3001      	adds	r0, #1
 800408c:	d14c      	bne.n	8004128 <_printf_i+0x200>
 800408e:	f04f 30ff 	mov.w	r0, #4294967295
 8004092:	b004      	add	sp, #16
 8004094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004098:	4834      	ldr	r0, [pc, #208]	; (800416c <_printf_i+0x244>)
 800409a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800409e:	6829      	ldr	r1, [r5, #0]
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80040a6:	6029      	str	r1, [r5, #0]
 80040a8:	061d      	lsls	r5, r3, #24
 80040aa:	d514      	bpl.n	80040d6 <_printf_i+0x1ae>
 80040ac:	07df      	lsls	r7, r3, #31
 80040ae:	bf44      	itt	mi
 80040b0:	f043 0320 	orrmi.w	r3, r3, #32
 80040b4:	6023      	strmi	r3, [r4, #0]
 80040b6:	b91e      	cbnz	r6, 80040c0 <_printf_i+0x198>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	f023 0320 	bic.w	r3, r3, #32
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	2310      	movs	r3, #16
 80040c2:	e7af      	b.n	8004024 <_printf_i+0xfc>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	2378      	movs	r3, #120	; 0x78
 80040ce:	4828      	ldr	r0, [pc, #160]	; (8004170 <_printf_i+0x248>)
 80040d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040d4:	e7e3      	b.n	800409e <_printf_i+0x176>
 80040d6:	0659      	lsls	r1, r3, #25
 80040d8:	bf48      	it	mi
 80040da:	b2b6      	uxthmi	r6, r6
 80040dc:	e7e6      	b.n	80040ac <_printf_i+0x184>
 80040de:	4615      	mov	r5, r2
 80040e0:	e7bb      	b.n	800405a <_printf_i+0x132>
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	6826      	ldr	r6, [r4, #0]
 80040e6:	1d18      	adds	r0, r3, #4
 80040e8:	6961      	ldr	r1, [r4, #20]
 80040ea:	6028      	str	r0, [r5, #0]
 80040ec:	0635      	lsls	r5, r6, #24
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	d501      	bpl.n	80040f6 <_printf_i+0x1ce>
 80040f2:	6019      	str	r1, [r3, #0]
 80040f4:	e002      	b.n	80040fc <_printf_i+0x1d4>
 80040f6:	0670      	lsls	r0, r6, #25
 80040f8:	d5fb      	bpl.n	80040f2 <_printf_i+0x1ca>
 80040fa:	8019      	strh	r1, [r3, #0]
 80040fc:	2300      	movs	r3, #0
 80040fe:	4615      	mov	r5, r2
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	e7ba      	b.n	800407a <_printf_i+0x152>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	1d1a      	adds	r2, r3, #4
 800410a:	602a      	str	r2, [r5, #0]
 800410c:	681d      	ldr	r5, [r3, #0]
 800410e:	6862      	ldr	r2, [r4, #4]
 8004110:	4628      	mov	r0, r5
 8004112:	f000 fed7 	bl	8004ec4 <memchr>
 8004116:	b108      	cbz	r0, 800411c <_printf_i+0x1f4>
 8004118:	1b40      	subs	r0, r0, r5
 800411a:	6060      	str	r0, [r4, #4]
 800411c:	6863      	ldr	r3, [r4, #4]
 800411e:	6123      	str	r3, [r4, #16]
 8004120:	2300      	movs	r3, #0
 8004122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004126:	e7a8      	b.n	800407a <_printf_i+0x152>
 8004128:	462a      	mov	r2, r5
 800412a:	4649      	mov	r1, r9
 800412c:	4640      	mov	r0, r8
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	47d0      	blx	sl
 8004132:	3001      	adds	r0, #1
 8004134:	d0ab      	beq.n	800408e <_printf_i+0x166>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	079b      	lsls	r3, r3, #30
 800413a:	d413      	bmi.n	8004164 <_printf_i+0x23c>
 800413c:	68e0      	ldr	r0, [r4, #12]
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	4298      	cmp	r0, r3
 8004142:	bfb8      	it	lt
 8004144:	4618      	movlt	r0, r3
 8004146:	e7a4      	b.n	8004092 <_printf_i+0x16a>
 8004148:	2301      	movs	r3, #1
 800414a:	4632      	mov	r2, r6
 800414c:	4649      	mov	r1, r9
 800414e:	4640      	mov	r0, r8
 8004150:	47d0      	blx	sl
 8004152:	3001      	adds	r0, #1
 8004154:	d09b      	beq.n	800408e <_printf_i+0x166>
 8004156:	3501      	adds	r5, #1
 8004158:	68e3      	ldr	r3, [r4, #12]
 800415a:	9903      	ldr	r1, [sp, #12]
 800415c:	1a5b      	subs	r3, r3, r1
 800415e:	42ab      	cmp	r3, r5
 8004160:	dcf2      	bgt.n	8004148 <_printf_i+0x220>
 8004162:	e7eb      	b.n	800413c <_printf_i+0x214>
 8004164:	2500      	movs	r5, #0
 8004166:	f104 0619 	add.w	r6, r4, #25
 800416a:	e7f5      	b.n	8004158 <_printf_i+0x230>
 800416c:	08006746 	.word	0x08006746
 8004170:	08006757 	.word	0x08006757

08004174 <siprintf>:
 8004174:	b40e      	push	{r1, r2, r3}
 8004176:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800417a:	b500      	push	{lr}
 800417c:	b09c      	sub	sp, #112	; 0x70
 800417e:	ab1d      	add	r3, sp, #116	; 0x74
 8004180:	9002      	str	r0, [sp, #8]
 8004182:	9006      	str	r0, [sp, #24]
 8004184:	9107      	str	r1, [sp, #28]
 8004186:	9104      	str	r1, [sp, #16]
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <siprintf+0x38>)
 800418a:	4909      	ldr	r1, [pc, #36]	; (80041b0 <siprintf+0x3c>)
 800418c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004190:	9105      	str	r1, [sp, #20]
 8004192:	6800      	ldr	r0, [r0, #0]
 8004194:	a902      	add	r1, sp, #8
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	f001 fb7e 	bl	8005898 <_svfiprintf_r>
 800419c:	2200      	movs	r2, #0
 800419e:	9b02      	ldr	r3, [sp, #8]
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	b01c      	add	sp, #112	; 0x70
 80041a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041a8:	b003      	add	sp, #12
 80041aa:	4770      	bx	lr
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	ffff0208 	.word	0xffff0208

080041b4 <quorem>:
 80041b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b8:	6903      	ldr	r3, [r0, #16]
 80041ba:	690c      	ldr	r4, [r1, #16]
 80041bc:	4607      	mov	r7, r0
 80041be:	42a3      	cmp	r3, r4
 80041c0:	f2c0 8082 	blt.w	80042c8 <quorem+0x114>
 80041c4:	3c01      	subs	r4, #1
 80041c6:	f100 0514 	add.w	r5, r0, #20
 80041ca:	f101 0814 	add.w	r8, r1, #20
 80041ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041dc:	3301      	adds	r3, #1
 80041de:	429a      	cmp	r2, r3
 80041e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80041e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80041e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041ec:	d331      	bcc.n	8004252 <quorem+0x9e>
 80041ee:	f04f 0e00 	mov.w	lr, #0
 80041f2:	4640      	mov	r0, r8
 80041f4:	46ac      	mov	ip, r5
 80041f6:	46f2      	mov	sl, lr
 80041f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80041fc:	b293      	uxth	r3, r2
 80041fe:	fb06 e303 	mla	r3, r6, r3, lr
 8004202:	0c12      	lsrs	r2, r2, #16
 8004204:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004208:	b29b      	uxth	r3, r3
 800420a:	fb06 e202 	mla	r2, r6, r2, lr
 800420e:	ebaa 0303 	sub.w	r3, sl, r3
 8004212:	f8dc a000 	ldr.w	sl, [ip]
 8004216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800421a:	fa1f fa8a 	uxth.w	sl, sl
 800421e:	4453      	add	r3, sl
 8004220:	f8dc a000 	ldr.w	sl, [ip]
 8004224:	b292      	uxth	r2, r2
 8004226:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800422a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800422e:	b29b      	uxth	r3, r3
 8004230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004234:	4581      	cmp	r9, r0
 8004236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800423a:	f84c 3b04 	str.w	r3, [ip], #4
 800423e:	d2db      	bcs.n	80041f8 <quorem+0x44>
 8004240:	f855 300b 	ldr.w	r3, [r5, fp]
 8004244:	b92b      	cbnz	r3, 8004252 <quorem+0x9e>
 8004246:	9b01      	ldr	r3, [sp, #4]
 8004248:	3b04      	subs	r3, #4
 800424a:	429d      	cmp	r5, r3
 800424c:	461a      	mov	r2, r3
 800424e:	d32f      	bcc.n	80042b0 <quorem+0xfc>
 8004250:	613c      	str	r4, [r7, #16]
 8004252:	4638      	mov	r0, r7
 8004254:	f001 f8d0 	bl	80053f8 <__mcmp>
 8004258:	2800      	cmp	r0, #0
 800425a:	db25      	blt.n	80042a8 <quorem+0xf4>
 800425c:	4628      	mov	r0, r5
 800425e:	f04f 0c00 	mov.w	ip, #0
 8004262:	3601      	adds	r6, #1
 8004264:	f858 1b04 	ldr.w	r1, [r8], #4
 8004268:	f8d0 e000 	ldr.w	lr, [r0]
 800426c:	b28b      	uxth	r3, r1
 800426e:	ebac 0303 	sub.w	r3, ip, r3
 8004272:	fa1f f28e 	uxth.w	r2, lr
 8004276:	4413      	add	r3, r2
 8004278:	0c0a      	lsrs	r2, r1, #16
 800427a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800427e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004288:	45c1      	cmp	r9, r8
 800428a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800428e:	f840 3b04 	str.w	r3, [r0], #4
 8004292:	d2e7      	bcs.n	8004264 <quorem+0xb0>
 8004294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800429c:	b922      	cbnz	r2, 80042a8 <quorem+0xf4>
 800429e:	3b04      	subs	r3, #4
 80042a0:	429d      	cmp	r5, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	d30a      	bcc.n	80042bc <quorem+0x108>
 80042a6:	613c      	str	r4, [r7, #16]
 80042a8:	4630      	mov	r0, r6
 80042aa:	b003      	add	sp, #12
 80042ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	3b04      	subs	r3, #4
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d1cb      	bne.n	8004250 <quorem+0x9c>
 80042b8:	3c01      	subs	r4, #1
 80042ba:	e7c6      	b.n	800424a <quorem+0x96>
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	3b04      	subs	r3, #4
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d1f0      	bne.n	80042a6 <quorem+0xf2>
 80042c4:	3c01      	subs	r4, #1
 80042c6:	e7eb      	b.n	80042a0 <quorem+0xec>
 80042c8:	2000      	movs	r0, #0
 80042ca:	e7ee      	b.n	80042aa <quorem+0xf6>
 80042cc:	0000      	movs	r0, r0
	...

080042d0 <_dtoa_r>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	4616      	mov	r6, r2
 80042d6:	461f      	mov	r7, r3
 80042d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80042da:	b099      	sub	sp, #100	; 0x64
 80042dc:	4605      	mov	r5, r0
 80042de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80042e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80042e6:	b974      	cbnz	r4, 8004306 <_dtoa_r+0x36>
 80042e8:	2010      	movs	r0, #16
 80042ea:	f000 fde3 	bl	8004eb4 <malloc>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6268      	str	r0, [r5, #36]	; 0x24
 80042f2:	b920      	cbnz	r0, 80042fe <_dtoa_r+0x2e>
 80042f4:	21ea      	movs	r1, #234	; 0xea
 80042f6:	4ba8      	ldr	r3, [pc, #672]	; (8004598 <_dtoa_r+0x2c8>)
 80042f8:	48a8      	ldr	r0, [pc, #672]	; (800459c <_dtoa_r+0x2cc>)
 80042fa:	f001 fbdd 	bl	8005ab8 <__assert_func>
 80042fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004302:	6004      	str	r4, [r0, #0]
 8004304:	60c4      	str	r4, [r0, #12]
 8004306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	b151      	cbz	r1, 8004322 <_dtoa_r+0x52>
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	2301      	movs	r3, #1
 8004310:	4093      	lsls	r3, r2
 8004312:	604a      	str	r2, [r1, #4]
 8004314:	608b      	str	r3, [r1, #8]
 8004316:	4628      	mov	r0, r5
 8004318:	f000 fe30 	bl	8004f7c <_Bfree>
 800431c:	2200      	movs	r2, #0
 800431e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	1e3b      	subs	r3, r7, #0
 8004324:	bfaf      	iteee	ge
 8004326:	2300      	movge	r3, #0
 8004328:	2201      	movlt	r2, #1
 800432a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800432e:	9305      	strlt	r3, [sp, #20]
 8004330:	bfa8      	it	ge
 8004332:	f8c8 3000 	strge.w	r3, [r8]
 8004336:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800433a:	4b99      	ldr	r3, [pc, #612]	; (80045a0 <_dtoa_r+0x2d0>)
 800433c:	bfb8      	it	lt
 800433e:	f8c8 2000 	strlt.w	r2, [r8]
 8004342:	ea33 0309 	bics.w	r3, r3, r9
 8004346:	d119      	bne.n	800437c <_dtoa_r+0xac>
 8004348:	f242 730f 	movw	r3, #9999	; 0x270f
 800434c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004354:	4333      	orrs	r3, r6
 8004356:	f000 857f 	beq.w	8004e58 <_dtoa_r+0xb88>
 800435a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800435c:	b953      	cbnz	r3, 8004374 <_dtoa_r+0xa4>
 800435e:	4b91      	ldr	r3, [pc, #580]	; (80045a4 <_dtoa_r+0x2d4>)
 8004360:	e022      	b.n	80043a8 <_dtoa_r+0xd8>
 8004362:	4b91      	ldr	r3, [pc, #580]	; (80045a8 <_dtoa_r+0x2d8>)
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	3308      	adds	r3, #8
 8004368:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	9803      	ldr	r0, [sp, #12]
 800436e:	b019      	add	sp, #100	; 0x64
 8004370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004374:	4b8b      	ldr	r3, [pc, #556]	; (80045a4 <_dtoa_r+0x2d4>)
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	3303      	adds	r3, #3
 800437a:	e7f5      	b.n	8004368 <_dtoa_r+0x98>
 800437c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004380:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	f7fc fbc0 	bl	8000b10 <__aeabi_dcmpeq>
 8004390:	4680      	mov	r8, r0
 8004392:	b158      	cbz	r0, 80043ac <_dtoa_r+0xdc>
 8004394:	2301      	movs	r3, #1
 8004396:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8558 	beq.w	8004e52 <_dtoa_r+0xb82>
 80043a2:	4882      	ldr	r0, [pc, #520]	; (80045ac <_dtoa_r+0x2dc>)
 80043a4:	6018      	str	r0, [r3, #0]
 80043a6:	1e43      	subs	r3, r0, #1
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	e7df      	b.n	800436c <_dtoa_r+0x9c>
 80043ac:	ab16      	add	r3, sp, #88	; 0x58
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	ab17      	add	r3, sp, #92	; 0x5c
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4628      	mov	r0, r5
 80043b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043ba:	f001 f8c5 	bl	8005548 <__d2b>
 80043be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80043c2:	4683      	mov	fp, r0
 80043c4:	2c00      	cmp	r4, #0
 80043c6:	d07f      	beq.n	80044c8 <_dtoa_r+0x1f8>
 80043c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80043d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80043da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80043de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80043e2:	2200      	movs	r2, #0
 80043e4:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <_dtoa_r+0x2e0>)
 80043e6:	f7fb ff73 	bl	80002d0 <__aeabi_dsub>
 80043ea:	a365      	add	r3, pc, #404	; (adr r3, 8004580 <_dtoa_r+0x2b0>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f7fc f926 	bl	8000640 <__aeabi_dmul>
 80043f4:	a364      	add	r3, pc, #400	; (adr r3, 8004588 <_dtoa_r+0x2b8>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f7fb ff6b 	bl	80002d4 <__adddf3>
 80043fe:	4606      	mov	r6, r0
 8004400:	4620      	mov	r0, r4
 8004402:	460f      	mov	r7, r1
 8004404:	f7fc f8b2 	bl	800056c <__aeabi_i2d>
 8004408:	a361      	add	r3, pc, #388	; (adr r3, 8004590 <_dtoa_r+0x2c0>)
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f7fc f917 	bl	8000640 <__aeabi_dmul>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4630      	mov	r0, r6
 8004418:	4639      	mov	r1, r7
 800441a:	f7fb ff5b 	bl	80002d4 <__adddf3>
 800441e:	4606      	mov	r6, r0
 8004420:	460f      	mov	r7, r1
 8004422:	f7fc fbbd 	bl	8000ba0 <__aeabi_d2iz>
 8004426:	2200      	movs	r2, #0
 8004428:	4682      	mov	sl, r0
 800442a:	2300      	movs	r3, #0
 800442c:	4630      	mov	r0, r6
 800442e:	4639      	mov	r1, r7
 8004430:	f7fc fb78 	bl	8000b24 <__aeabi_dcmplt>
 8004434:	b148      	cbz	r0, 800444a <_dtoa_r+0x17a>
 8004436:	4650      	mov	r0, sl
 8004438:	f7fc f898 	bl	800056c <__aeabi_i2d>
 800443c:	4632      	mov	r2, r6
 800443e:	463b      	mov	r3, r7
 8004440:	f7fc fb66 	bl	8000b10 <__aeabi_dcmpeq>
 8004444:	b908      	cbnz	r0, 800444a <_dtoa_r+0x17a>
 8004446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800444a:	f1ba 0f16 	cmp.w	sl, #22
 800444e:	d858      	bhi.n	8004502 <_dtoa_r+0x232>
 8004450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004454:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <_dtoa_r+0x2e4>)
 8004456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc fb61 	bl	8000b24 <__aeabi_dcmplt>
 8004462:	2800      	cmp	r0, #0
 8004464:	d04f      	beq.n	8004506 <_dtoa_r+0x236>
 8004466:	2300      	movs	r3, #0
 8004468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800446c:	930f      	str	r3, [sp, #60]	; 0x3c
 800446e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004470:	1b1c      	subs	r4, r3, r4
 8004472:	1e63      	subs	r3, r4, #1
 8004474:	9309      	str	r3, [sp, #36]	; 0x24
 8004476:	bf49      	itett	mi
 8004478:	f1c4 0301 	rsbmi	r3, r4, #1
 800447c:	2300      	movpl	r3, #0
 800447e:	9306      	strmi	r3, [sp, #24]
 8004480:	2300      	movmi	r3, #0
 8004482:	bf54      	ite	pl
 8004484:	9306      	strpl	r3, [sp, #24]
 8004486:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004488:	f1ba 0f00 	cmp.w	sl, #0
 800448c:	db3d      	blt.n	800450a <_dtoa_r+0x23a>
 800448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004490:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004494:	4453      	add	r3, sl
 8004496:	9309      	str	r3, [sp, #36]	; 0x24
 8004498:	2300      	movs	r3, #0
 800449a:	930a      	str	r3, [sp, #40]	; 0x28
 800449c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800449e:	2b09      	cmp	r3, #9
 80044a0:	f200 808c 	bhi.w	80045bc <_dtoa_r+0x2ec>
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	bfc4      	itt	gt
 80044a8:	3b04      	subgt	r3, #4
 80044aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80044ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044ae:	bfc8      	it	gt
 80044b0:	2400      	movgt	r4, #0
 80044b2:	f1a3 0302 	sub.w	r3, r3, #2
 80044b6:	bfd8      	it	le
 80044b8:	2401      	movle	r4, #1
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	f200 808a 	bhi.w	80045d4 <_dtoa_r+0x304>
 80044c0:	e8df f003 	tbb	[pc, r3]
 80044c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80044c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80044cc:	441c      	add	r4, r3
 80044ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	bfc3      	ittte	gt
 80044d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80044da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80044de:	fa09 f303 	lslgt.w	r3, r9, r3
 80044e2:	f1c3 0320 	rsble	r3, r3, #32
 80044e6:	bfc6      	itte	gt
 80044e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80044ec:	4318      	orrgt	r0, r3
 80044ee:	fa06 f003 	lslle.w	r0, r6, r3
 80044f2:	f7fc f82b 	bl	800054c <__aeabi_ui2d>
 80044f6:	2301      	movs	r3, #1
 80044f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80044fc:	3c01      	subs	r4, #1
 80044fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8004500:	e76f      	b.n	80043e2 <_dtoa_r+0x112>
 8004502:	2301      	movs	r3, #1
 8004504:	e7b2      	b.n	800446c <_dtoa_r+0x19c>
 8004506:	900f      	str	r0, [sp, #60]	; 0x3c
 8004508:	e7b1      	b.n	800446e <_dtoa_r+0x19e>
 800450a:	9b06      	ldr	r3, [sp, #24]
 800450c:	eba3 030a 	sub.w	r3, r3, sl
 8004510:	9306      	str	r3, [sp, #24]
 8004512:	f1ca 0300 	rsb	r3, sl, #0
 8004516:	930a      	str	r3, [sp, #40]	; 0x28
 8004518:	2300      	movs	r3, #0
 800451a:	930e      	str	r3, [sp, #56]	; 0x38
 800451c:	e7be      	b.n	800449c <_dtoa_r+0x1cc>
 800451e:	2300      	movs	r3, #0
 8004520:	930b      	str	r3, [sp, #44]	; 0x2c
 8004522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004524:	2b00      	cmp	r3, #0
 8004526:	dc58      	bgt.n	80045da <_dtoa_r+0x30a>
 8004528:	f04f 0901 	mov.w	r9, #1
 800452c:	464b      	mov	r3, r9
 800452e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004532:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004536:	2200      	movs	r2, #0
 8004538:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800453a:	6042      	str	r2, [r0, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	f102 0614 	add.w	r6, r2, #20
 8004542:	429e      	cmp	r6, r3
 8004544:	6841      	ldr	r1, [r0, #4]
 8004546:	d94e      	bls.n	80045e6 <_dtoa_r+0x316>
 8004548:	4628      	mov	r0, r5
 800454a:	f000 fcd7 	bl	8004efc <_Balloc>
 800454e:	9003      	str	r0, [sp, #12]
 8004550:	2800      	cmp	r0, #0
 8004552:	d14c      	bne.n	80045ee <_dtoa_r+0x31e>
 8004554:	4602      	mov	r2, r0
 8004556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <_dtoa_r+0x2e8>)
 800455c:	e6cc      	b.n	80042f8 <_dtoa_r+0x28>
 800455e:	2301      	movs	r3, #1
 8004560:	e7de      	b.n	8004520 <_dtoa_r+0x250>
 8004562:	2300      	movs	r3, #0
 8004564:	930b      	str	r3, [sp, #44]	; 0x2c
 8004566:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004568:	eb0a 0903 	add.w	r9, sl, r3
 800456c:	f109 0301 	add.w	r3, r9, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	9308      	str	r3, [sp, #32]
 8004574:	bfb8      	it	lt
 8004576:	2301      	movlt	r3, #1
 8004578:	e7dd      	b.n	8004536 <_dtoa_r+0x266>
 800457a:	2301      	movs	r3, #1
 800457c:	e7f2      	b.n	8004564 <_dtoa_r+0x294>
 800457e:	bf00      	nop
 8004580:	636f4361 	.word	0x636f4361
 8004584:	3fd287a7 	.word	0x3fd287a7
 8004588:	8b60c8b3 	.word	0x8b60c8b3
 800458c:	3fc68a28 	.word	0x3fc68a28
 8004590:	509f79fb 	.word	0x509f79fb
 8004594:	3fd34413 	.word	0x3fd34413
 8004598:	08006775 	.word	0x08006775
 800459c:	0800678c 	.word	0x0800678c
 80045a0:	7ff00000 	.word	0x7ff00000
 80045a4:	08006771 	.word	0x08006771
 80045a8:	08006768 	.word	0x08006768
 80045ac:	08006745 	.word	0x08006745
 80045b0:	3ff80000 	.word	0x3ff80000
 80045b4:	08006880 	.word	0x08006880
 80045b8:	080067e7 	.word	0x080067e7
 80045bc:	2401      	movs	r4, #1
 80045be:	2300      	movs	r3, #0
 80045c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80045c2:	9322      	str	r3, [sp, #136]	; 0x88
 80045c4:	f04f 39ff 	mov.w	r9, #4294967295
 80045c8:	2200      	movs	r2, #0
 80045ca:	2312      	movs	r3, #18
 80045cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80045d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80045d2:	e7b0      	b.n	8004536 <_dtoa_r+0x266>
 80045d4:	2301      	movs	r3, #1
 80045d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80045d8:	e7f4      	b.n	80045c4 <_dtoa_r+0x2f4>
 80045da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80045de:	464b      	mov	r3, r9
 80045e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80045e4:	e7a7      	b.n	8004536 <_dtoa_r+0x266>
 80045e6:	3101      	adds	r1, #1
 80045e8:	6041      	str	r1, [r0, #4]
 80045ea:	0052      	lsls	r2, r2, #1
 80045ec:	e7a7      	b.n	800453e <_dtoa_r+0x26e>
 80045ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045f0:	9a03      	ldr	r2, [sp, #12]
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	9b08      	ldr	r3, [sp, #32]
 80045f6:	2b0e      	cmp	r3, #14
 80045f8:	f200 80a8 	bhi.w	800474c <_dtoa_r+0x47c>
 80045fc:	2c00      	cmp	r4, #0
 80045fe:	f000 80a5 	beq.w	800474c <_dtoa_r+0x47c>
 8004602:	f1ba 0f00 	cmp.w	sl, #0
 8004606:	dd34      	ble.n	8004672 <_dtoa_r+0x3a2>
 8004608:	4a9a      	ldr	r2, [pc, #616]	; (8004874 <_dtoa_r+0x5a4>)
 800460a:	f00a 030f 	and.w	r3, sl, #15
 800460e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004612:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004616:	e9d3 3400 	ldrd	r3, r4, [r3]
 800461a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800461e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004622:	d016      	beq.n	8004652 <_dtoa_r+0x382>
 8004624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004628:	4b93      	ldr	r3, [pc, #588]	; (8004878 <_dtoa_r+0x5a8>)
 800462a:	2703      	movs	r7, #3
 800462c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004630:	f7fc f930 	bl	8000894 <__aeabi_ddiv>
 8004634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004638:	f004 040f 	and.w	r4, r4, #15
 800463c:	4e8e      	ldr	r6, [pc, #568]	; (8004878 <_dtoa_r+0x5a8>)
 800463e:	b954      	cbnz	r4, 8004656 <_dtoa_r+0x386>
 8004640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004648:	f7fc f924 	bl	8000894 <__aeabi_ddiv>
 800464c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004650:	e029      	b.n	80046a6 <_dtoa_r+0x3d6>
 8004652:	2702      	movs	r7, #2
 8004654:	e7f2      	b.n	800463c <_dtoa_r+0x36c>
 8004656:	07e1      	lsls	r1, r4, #31
 8004658:	d508      	bpl.n	800466c <_dtoa_r+0x39c>
 800465a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800465e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004662:	f7fb ffed 	bl	8000640 <__aeabi_dmul>
 8004666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800466a:	3701      	adds	r7, #1
 800466c:	1064      	asrs	r4, r4, #1
 800466e:	3608      	adds	r6, #8
 8004670:	e7e5      	b.n	800463e <_dtoa_r+0x36e>
 8004672:	f000 80a5 	beq.w	80047c0 <_dtoa_r+0x4f0>
 8004676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800467a:	f1ca 0400 	rsb	r4, sl, #0
 800467e:	4b7d      	ldr	r3, [pc, #500]	; (8004874 <_dtoa_r+0x5a4>)
 8004680:	f004 020f 	and.w	r2, r4, #15
 8004684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f7fb ffd8 	bl	8000640 <__aeabi_dmul>
 8004690:	2702      	movs	r7, #2
 8004692:	2300      	movs	r3, #0
 8004694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004698:	4e77      	ldr	r6, [pc, #476]	; (8004878 <_dtoa_r+0x5a8>)
 800469a:	1124      	asrs	r4, r4, #4
 800469c:	2c00      	cmp	r4, #0
 800469e:	f040 8084 	bne.w	80047aa <_dtoa_r+0x4da>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1d2      	bne.n	800464c <_dtoa_r+0x37c>
 80046a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 808b 	beq.w	80047c4 <_dtoa_r+0x4f4>
 80046ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80046b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80046b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046ba:	2200      	movs	r2, #0
 80046bc:	4b6f      	ldr	r3, [pc, #444]	; (800487c <_dtoa_r+0x5ac>)
 80046be:	f7fc fa31 	bl	8000b24 <__aeabi_dcmplt>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d07e      	beq.n	80047c4 <_dtoa_r+0x4f4>
 80046c6:	9b08      	ldr	r3, [sp, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d07b      	beq.n	80047c4 <_dtoa_r+0x4f4>
 80046cc:	f1b9 0f00 	cmp.w	r9, #0
 80046d0:	dd38      	ble.n	8004744 <_dtoa_r+0x474>
 80046d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046d6:	2200      	movs	r2, #0
 80046d8:	4b69      	ldr	r3, [pc, #420]	; (8004880 <_dtoa_r+0x5b0>)
 80046da:	f7fb ffb1 	bl	8000640 <__aeabi_dmul>
 80046de:	464c      	mov	r4, r9
 80046e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80046e8:	3701      	adds	r7, #1
 80046ea:	4638      	mov	r0, r7
 80046ec:	f7fb ff3e 	bl	800056c <__aeabi_i2d>
 80046f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046f4:	f7fb ffa4 	bl	8000640 <__aeabi_dmul>
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b62      	ldr	r3, [pc, #392]	; (8004884 <_dtoa_r+0x5b4>)
 80046fc:	f7fb fdea 	bl	80002d4 <__adddf3>
 8004700:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004704:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004708:	9611      	str	r6, [sp, #68]	; 0x44
 800470a:	2c00      	cmp	r4, #0
 800470c:	d15d      	bne.n	80047ca <_dtoa_r+0x4fa>
 800470e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004712:	2200      	movs	r2, #0
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <_dtoa_r+0x5b8>)
 8004716:	f7fb fddb 	bl	80002d0 <__aeabi_dsub>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004722:	4633      	mov	r3, r6
 8004724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004726:	f7fc fa1b 	bl	8000b60 <__aeabi_dcmpgt>
 800472a:	2800      	cmp	r0, #0
 800472c:	f040 829c 	bne.w	8004c68 <_dtoa_r+0x998>
 8004730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004736:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800473a:	f7fc f9f3 	bl	8000b24 <__aeabi_dcmplt>
 800473e:	2800      	cmp	r0, #0
 8004740:	f040 8290 	bne.w	8004c64 <_dtoa_r+0x994>
 8004744:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004748:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800474c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800474e:	2b00      	cmp	r3, #0
 8004750:	f2c0 8152 	blt.w	80049f8 <_dtoa_r+0x728>
 8004754:	f1ba 0f0e 	cmp.w	sl, #14
 8004758:	f300 814e 	bgt.w	80049f8 <_dtoa_r+0x728>
 800475c:	4b45      	ldr	r3, [pc, #276]	; (8004874 <_dtoa_r+0x5a4>)
 800475e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004762:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004766:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800476a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800476c:	2b00      	cmp	r3, #0
 800476e:	f280 80db 	bge.w	8004928 <_dtoa_r+0x658>
 8004772:	9b08      	ldr	r3, [sp, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f300 80d7 	bgt.w	8004928 <_dtoa_r+0x658>
 800477a:	f040 8272 	bne.w	8004c62 <_dtoa_r+0x992>
 800477e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004782:	2200      	movs	r2, #0
 8004784:	4b40      	ldr	r3, [pc, #256]	; (8004888 <_dtoa_r+0x5b8>)
 8004786:	f7fb ff5b 	bl	8000640 <__aeabi_dmul>
 800478a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478e:	f7fc f9dd 	bl	8000b4c <__aeabi_dcmpge>
 8004792:	9c08      	ldr	r4, [sp, #32]
 8004794:	4626      	mov	r6, r4
 8004796:	2800      	cmp	r0, #0
 8004798:	f040 8248 	bne.w	8004c2c <_dtoa_r+0x95c>
 800479c:	2331      	movs	r3, #49	; 0x31
 800479e:	9f03      	ldr	r7, [sp, #12]
 80047a0:	f10a 0a01 	add.w	sl, sl, #1
 80047a4:	f807 3b01 	strb.w	r3, [r7], #1
 80047a8:	e244      	b.n	8004c34 <_dtoa_r+0x964>
 80047aa:	07e2      	lsls	r2, r4, #31
 80047ac:	d505      	bpl.n	80047ba <_dtoa_r+0x4ea>
 80047ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047b2:	f7fb ff45 	bl	8000640 <__aeabi_dmul>
 80047b6:	2301      	movs	r3, #1
 80047b8:	3701      	adds	r7, #1
 80047ba:	1064      	asrs	r4, r4, #1
 80047bc:	3608      	adds	r6, #8
 80047be:	e76d      	b.n	800469c <_dtoa_r+0x3cc>
 80047c0:	2702      	movs	r7, #2
 80047c2:	e770      	b.n	80046a6 <_dtoa_r+0x3d6>
 80047c4:	46d0      	mov	r8, sl
 80047c6:	9c08      	ldr	r4, [sp, #32]
 80047c8:	e78f      	b.n	80046ea <_dtoa_r+0x41a>
 80047ca:	9903      	ldr	r1, [sp, #12]
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <_dtoa_r+0x5a4>)
 80047ce:	4421      	add	r1, r4
 80047d0:	9112      	str	r1, [sp, #72]	; 0x48
 80047d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80047dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d055      	beq.n	8004890 <_dtoa_r+0x5c0>
 80047e4:	2000      	movs	r0, #0
 80047e6:	4929      	ldr	r1, [pc, #164]	; (800488c <_dtoa_r+0x5bc>)
 80047e8:	f7fc f854 	bl	8000894 <__aeabi_ddiv>
 80047ec:	463b      	mov	r3, r7
 80047ee:	4632      	mov	r2, r6
 80047f0:	f7fb fd6e 	bl	80002d0 <__aeabi_dsub>
 80047f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047f8:	9f03      	ldr	r7, [sp, #12]
 80047fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047fe:	f7fc f9cf 	bl	8000ba0 <__aeabi_d2iz>
 8004802:	4604      	mov	r4, r0
 8004804:	f7fb feb2 	bl	800056c <__aeabi_i2d>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004810:	f7fb fd5e 	bl	80002d0 <__aeabi_dsub>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	3430      	adds	r4, #48	; 0x30
 800481a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800481e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004822:	f807 4b01 	strb.w	r4, [r7], #1
 8004826:	f7fc f97d 	bl	8000b24 <__aeabi_dcmplt>
 800482a:	2800      	cmp	r0, #0
 800482c:	d174      	bne.n	8004918 <_dtoa_r+0x648>
 800482e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004832:	2000      	movs	r0, #0
 8004834:	4911      	ldr	r1, [pc, #68]	; (800487c <_dtoa_r+0x5ac>)
 8004836:	f7fb fd4b 	bl	80002d0 <__aeabi_dsub>
 800483a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800483e:	f7fc f971 	bl	8000b24 <__aeabi_dcmplt>
 8004842:	2800      	cmp	r0, #0
 8004844:	f040 80b7 	bne.w	80049b6 <_dtoa_r+0x6e6>
 8004848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800484a:	429f      	cmp	r7, r3
 800484c:	f43f af7a 	beq.w	8004744 <_dtoa_r+0x474>
 8004850:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004854:	2200      	movs	r2, #0
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <_dtoa_r+0x5b0>)
 8004858:	f7fb fef2 	bl	8000640 <__aeabi_dmul>
 800485c:	2200      	movs	r2, #0
 800485e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <_dtoa_r+0x5b0>)
 8004868:	f7fb feea 	bl	8000640 <__aeabi_dmul>
 800486c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004870:	e7c3      	b.n	80047fa <_dtoa_r+0x52a>
 8004872:	bf00      	nop
 8004874:	08006880 	.word	0x08006880
 8004878:	08006858 	.word	0x08006858
 800487c:	3ff00000 	.word	0x3ff00000
 8004880:	40240000 	.word	0x40240000
 8004884:	401c0000 	.word	0x401c0000
 8004888:	40140000 	.word	0x40140000
 800488c:	3fe00000 	.word	0x3fe00000
 8004890:	4630      	mov	r0, r6
 8004892:	4639      	mov	r1, r7
 8004894:	f7fb fed4 	bl	8000640 <__aeabi_dmul>
 8004898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800489a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800489e:	9c03      	ldr	r4, [sp, #12]
 80048a0:	9314      	str	r3, [sp, #80]	; 0x50
 80048a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048a6:	f7fc f97b 	bl	8000ba0 <__aeabi_d2iz>
 80048aa:	9015      	str	r0, [sp, #84]	; 0x54
 80048ac:	f7fb fe5e 	bl	800056c <__aeabi_i2d>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048b8:	f7fb fd0a 	bl	80002d0 <__aeabi_dsub>
 80048bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048be:	4606      	mov	r6, r0
 80048c0:	3330      	adds	r3, #48	; 0x30
 80048c2:	f804 3b01 	strb.w	r3, [r4], #1
 80048c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048c8:	460f      	mov	r7, r1
 80048ca:	429c      	cmp	r4, r3
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	d124      	bne.n	800491c <_dtoa_r+0x64c>
 80048d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048d6:	4bb0      	ldr	r3, [pc, #704]	; (8004b98 <_dtoa_r+0x8c8>)
 80048d8:	f7fb fcfc 	bl	80002d4 <__adddf3>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fc f93c 	bl	8000b60 <__aeabi_dcmpgt>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d163      	bne.n	80049b4 <_dtoa_r+0x6e4>
 80048ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048f0:	2000      	movs	r0, #0
 80048f2:	49a9      	ldr	r1, [pc, #676]	; (8004b98 <_dtoa_r+0x8c8>)
 80048f4:	f7fb fcec 	bl	80002d0 <__aeabi_dsub>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4630      	mov	r0, r6
 80048fe:	4639      	mov	r1, r7
 8004900:	f7fc f910 	bl	8000b24 <__aeabi_dcmplt>
 8004904:	2800      	cmp	r0, #0
 8004906:	f43f af1d 	beq.w	8004744 <_dtoa_r+0x474>
 800490a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800490c:	1e7b      	subs	r3, r7, #1
 800490e:	9314      	str	r3, [sp, #80]	; 0x50
 8004910:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d0f8      	beq.n	800490a <_dtoa_r+0x63a>
 8004918:	46c2      	mov	sl, r8
 800491a:	e03b      	b.n	8004994 <_dtoa_r+0x6c4>
 800491c:	4b9f      	ldr	r3, [pc, #636]	; (8004b9c <_dtoa_r+0x8cc>)
 800491e:	f7fb fe8f 	bl	8000640 <__aeabi_dmul>
 8004922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004926:	e7bc      	b.n	80048a2 <_dtoa_r+0x5d2>
 8004928:	9f03      	ldr	r7, [sp, #12]
 800492a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800492e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004932:	4640      	mov	r0, r8
 8004934:	4649      	mov	r1, r9
 8004936:	f7fb ffad 	bl	8000894 <__aeabi_ddiv>
 800493a:	f7fc f931 	bl	8000ba0 <__aeabi_d2iz>
 800493e:	4604      	mov	r4, r0
 8004940:	f7fb fe14 	bl	800056c <__aeabi_i2d>
 8004944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004948:	f7fb fe7a 	bl	8000640 <__aeabi_dmul>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4640      	mov	r0, r8
 8004952:	4649      	mov	r1, r9
 8004954:	f7fb fcbc 	bl	80002d0 <__aeabi_dsub>
 8004958:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800495c:	f807 6b01 	strb.w	r6, [r7], #1
 8004960:	9e03      	ldr	r6, [sp, #12]
 8004962:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004966:	1bbe      	subs	r6, r7, r6
 8004968:	45b4      	cmp	ip, r6
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	d136      	bne.n	80049de <_dtoa_r+0x70e>
 8004970:	f7fb fcb0 	bl	80002d4 <__adddf3>
 8004974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004978:	4680      	mov	r8, r0
 800497a:	4689      	mov	r9, r1
 800497c:	f7fc f8f0 	bl	8000b60 <__aeabi_dcmpgt>
 8004980:	bb58      	cbnz	r0, 80049da <_dtoa_r+0x70a>
 8004982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004986:	4640      	mov	r0, r8
 8004988:	4649      	mov	r1, r9
 800498a:	f7fc f8c1 	bl	8000b10 <__aeabi_dcmpeq>
 800498e:	b108      	cbz	r0, 8004994 <_dtoa_r+0x6c4>
 8004990:	07e1      	lsls	r1, r4, #31
 8004992:	d422      	bmi.n	80049da <_dtoa_r+0x70a>
 8004994:	4628      	mov	r0, r5
 8004996:	4659      	mov	r1, fp
 8004998:	f000 faf0 	bl	8004f7c <_Bfree>
 800499c:	2300      	movs	r3, #0
 800499e:	703b      	strb	r3, [r7, #0]
 80049a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80049a2:	f10a 0001 	add.w	r0, sl, #1
 80049a6:	6018      	str	r0, [r3, #0]
 80049a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f43f acde 	beq.w	800436c <_dtoa_r+0x9c>
 80049b0:	601f      	str	r7, [r3, #0]
 80049b2:	e4db      	b.n	800436c <_dtoa_r+0x9c>
 80049b4:	4627      	mov	r7, r4
 80049b6:	463b      	mov	r3, r7
 80049b8:	461f      	mov	r7, r3
 80049ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049be:	2a39      	cmp	r2, #57	; 0x39
 80049c0:	d107      	bne.n	80049d2 <_dtoa_r+0x702>
 80049c2:	9a03      	ldr	r2, [sp, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1f7      	bne.n	80049b8 <_dtoa_r+0x6e8>
 80049c8:	2230      	movs	r2, #48	; 0x30
 80049ca:	9903      	ldr	r1, [sp, #12]
 80049cc:	f108 0801 	add.w	r8, r8, #1
 80049d0:	700a      	strb	r2, [r1, #0]
 80049d2:	781a      	ldrb	r2, [r3, #0]
 80049d4:	3201      	adds	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e79e      	b.n	8004918 <_dtoa_r+0x648>
 80049da:	46d0      	mov	r8, sl
 80049dc:	e7eb      	b.n	80049b6 <_dtoa_r+0x6e6>
 80049de:	2200      	movs	r2, #0
 80049e0:	4b6e      	ldr	r3, [pc, #440]	; (8004b9c <_dtoa_r+0x8cc>)
 80049e2:	f7fb fe2d 	bl	8000640 <__aeabi_dmul>
 80049e6:	2200      	movs	r2, #0
 80049e8:	2300      	movs	r3, #0
 80049ea:	4680      	mov	r8, r0
 80049ec:	4689      	mov	r9, r1
 80049ee:	f7fc f88f 	bl	8000b10 <__aeabi_dcmpeq>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d09b      	beq.n	800492e <_dtoa_r+0x65e>
 80049f6:	e7cd      	b.n	8004994 <_dtoa_r+0x6c4>
 80049f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	f000 80d0 	beq.w	8004ba0 <_dtoa_r+0x8d0>
 8004a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a02:	2a01      	cmp	r2, #1
 8004a04:	f300 80ae 	bgt.w	8004b64 <_dtoa_r+0x894>
 8004a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	f000 80a6 	beq.w	8004b5c <_dtoa_r+0x88c>
 8004a10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a16:	9f06      	ldr	r7, [sp, #24]
 8004a18:	9a06      	ldr	r2, [sp, #24]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	441a      	add	r2, r3
 8004a1e:	9206      	str	r2, [sp, #24]
 8004a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a22:	4628      	mov	r0, r5
 8004a24:	441a      	add	r2, r3
 8004a26:	9209      	str	r2, [sp, #36]	; 0x24
 8004a28:	f000 fb5e 	bl	80050e8 <__i2b>
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	dd0c      	ble.n	8004a4c <_dtoa_r+0x77c>
 8004a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dd09      	ble.n	8004a4c <_dtoa_r+0x77c>
 8004a38:	42bb      	cmp	r3, r7
 8004a3a:	bfa8      	it	ge
 8004a3c:	463b      	movge	r3, r7
 8004a3e:	9a06      	ldr	r2, [sp, #24]
 8004a40:	1aff      	subs	r7, r7, r3
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	9206      	str	r2, [sp, #24]
 8004a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a4e:	b1f3      	cbz	r3, 8004a8e <_dtoa_r+0x7be>
 8004a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80a8 	beq.w	8004ba8 <_dtoa_r+0x8d8>
 8004a58:	2c00      	cmp	r4, #0
 8004a5a:	dd10      	ble.n	8004a7e <_dtoa_r+0x7ae>
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4622      	mov	r2, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 fbff 	bl	8005264 <__pow5mult>
 8004a66:	465a      	mov	r2, fp
 8004a68:	4601      	mov	r1, r0
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 fb51 	bl	8005114 <__multiply>
 8004a72:	4680      	mov	r8, r0
 8004a74:	4659      	mov	r1, fp
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fa80 	bl	8004f7c <_Bfree>
 8004a7c:	46c3      	mov	fp, r8
 8004a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a80:	1b1a      	subs	r2, r3, r4
 8004a82:	d004      	beq.n	8004a8e <_dtoa_r+0x7be>
 8004a84:	4659      	mov	r1, fp
 8004a86:	4628      	mov	r0, r5
 8004a88:	f000 fbec 	bl	8005264 <__pow5mult>
 8004a8c:	4683      	mov	fp, r0
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 fb29 	bl	80050e8 <__i2b>
 8004a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a98:	4604      	mov	r4, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f340 8086 	ble.w	8004bac <_dtoa_r+0x8dc>
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 fbdd 	bl	8005264 <__pow5mult>
 8004aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004aac:	4604      	mov	r4, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	dd7f      	ble.n	8004bb2 <_dtoa_r+0x8e2>
 8004ab2:	f04f 0800 	mov.w	r8, #0
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004abc:	6918      	ldr	r0, [r3, #16]
 8004abe:	f000 fac5 	bl	800504c <__hi0bits>
 8004ac2:	f1c0 0020 	rsb	r0, r0, #32
 8004ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac8:	4418      	add	r0, r3
 8004aca:	f010 001f 	ands.w	r0, r0, #31
 8004ace:	f000 8092 	beq.w	8004bf6 <_dtoa_r+0x926>
 8004ad2:	f1c0 0320 	rsb	r3, r0, #32
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	f340 808a 	ble.w	8004bf0 <_dtoa_r+0x920>
 8004adc:	f1c0 001c 	rsb	r0, r0, #28
 8004ae0:	9b06      	ldr	r3, [sp, #24]
 8004ae2:	4407      	add	r7, r0
 8004ae4:	4403      	add	r3, r0
 8004ae6:	9306      	str	r3, [sp, #24]
 8004ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aea:	4403      	add	r3, r0
 8004aec:	9309      	str	r3, [sp, #36]	; 0x24
 8004aee:	9b06      	ldr	r3, [sp, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	dd05      	ble.n	8004b00 <_dtoa_r+0x830>
 8004af4:	4659      	mov	r1, fp
 8004af6:	461a      	mov	r2, r3
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fc0d 	bl	8005318 <__lshift>
 8004afe:	4683      	mov	fp, r0
 8004b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dd05      	ble.n	8004b12 <_dtoa_r+0x842>
 8004b06:	4621      	mov	r1, r4
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 fc04 	bl	8005318 <__lshift>
 8004b10:	4604      	mov	r4, r0
 8004b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d070      	beq.n	8004bfa <_dtoa_r+0x92a>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4658      	mov	r0, fp
 8004b1c:	f000 fc6c 	bl	80053f8 <__mcmp>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	da6a      	bge.n	8004bfa <_dtoa_r+0x92a>
 8004b24:	2300      	movs	r3, #0
 8004b26:	4659      	mov	r1, fp
 8004b28:	220a      	movs	r2, #10
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 fa48 	bl	8004fc0 <__multadd>
 8004b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b32:	4683      	mov	fp, r0
 8004b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8194 	beq.w	8004e66 <_dtoa_r+0xb96>
 8004b3e:	4631      	mov	r1, r6
 8004b40:	2300      	movs	r3, #0
 8004b42:	220a      	movs	r2, #10
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 fa3b 	bl	8004fc0 <__multadd>
 8004b4a:	f1b9 0f00 	cmp.w	r9, #0
 8004b4e:	4606      	mov	r6, r0
 8004b50:	f300 8093 	bgt.w	8004c7a <_dtoa_r+0x9aa>
 8004b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	dc57      	bgt.n	8004c0a <_dtoa_r+0x93a>
 8004b5a:	e08e      	b.n	8004c7a <_dtoa_r+0x9aa>
 8004b5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b62:	e757      	b.n	8004a14 <_dtoa_r+0x744>
 8004b64:	9b08      	ldr	r3, [sp, #32]
 8004b66:	1e5c      	subs	r4, r3, #1
 8004b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	bfb7      	itett	lt
 8004b6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004b70:	1b1c      	subge	r4, r3, r4
 8004b72:	1ae2      	sublt	r2, r4, r3
 8004b74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004b76:	bfbe      	ittt	lt
 8004b78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004b7a:	189b      	addlt	r3, r3, r2
 8004b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004b7e:	9b08      	ldr	r3, [sp, #32]
 8004b80:	bfb8      	it	lt
 8004b82:	2400      	movlt	r4, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bfbb      	ittet	lt
 8004b88:	9b06      	ldrlt	r3, [sp, #24]
 8004b8a:	9a08      	ldrlt	r2, [sp, #32]
 8004b8c:	9f06      	ldrge	r7, [sp, #24]
 8004b8e:	1a9f      	sublt	r7, r3, r2
 8004b90:	bfac      	ite	ge
 8004b92:	9b08      	ldrge	r3, [sp, #32]
 8004b94:	2300      	movlt	r3, #0
 8004b96:	e73f      	b.n	8004a18 <_dtoa_r+0x748>
 8004b98:	3fe00000 	.word	0x3fe00000
 8004b9c:	40240000 	.word	0x40240000
 8004ba0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ba2:	9f06      	ldr	r7, [sp, #24]
 8004ba4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004ba6:	e742      	b.n	8004a2e <_dtoa_r+0x75e>
 8004ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004baa:	e76b      	b.n	8004a84 <_dtoa_r+0x7b4>
 8004bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	dc19      	bgt.n	8004be6 <_dtoa_r+0x916>
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	b9bb      	cbnz	r3, 8004be6 <_dtoa_r+0x916>
 8004bb6:	9b05      	ldr	r3, [sp, #20]
 8004bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bbc:	b99b      	cbnz	r3, 8004be6 <_dtoa_r+0x916>
 8004bbe:	9b05      	ldr	r3, [sp, #20]
 8004bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bc4:	0d1b      	lsrs	r3, r3, #20
 8004bc6:	051b      	lsls	r3, r3, #20
 8004bc8:	b183      	cbz	r3, 8004bec <_dtoa_r+0x91c>
 8004bca:	f04f 0801 	mov.w	r8, #1
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	9306      	str	r3, [sp, #24]
 8004bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f47f af6a 	bne.w	8004ab6 <_dtoa_r+0x7e6>
 8004be2:	2001      	movs	r0, #1
 8004be4:	e76f      	b.n	8004ac6 <_dtoa_r+0x7f6>
 8004be6:	f04f 0800 	mov.w	r8, #0
 8004bea:	e7f6      	b.n	8004bda <_dtoa_r+0x90a>
 8004bec:	4698      	mov	r8, r3
 8004bee:	e7f4      	b.n	8004bda <_dtoa_r+0x90a>
 8004bf0:	f43f af7d 	beq.w	8004aee <_dtoa_r+0x81e>
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	301c      	adds	r0, #28
 8004bf8:	e772      	b.n	8004ae0 <_dtoa_r+0x810>
 8004bfa:	9b08      	ldr	r3, [sp, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dc36      	bgt.n	8004c6e <_dtoa_r+0x99e>
 8004c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	dd33      	ble.n	8004c6e <_dtoa_r+0x99e>
 8004c06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c0a:	f1b9 0f00 	cmp.w	r9, #0
 8004c0e:	d10d      	bne.n	8004c2c <_dtoa_r+0x95c>
 8004c10:	4621      	mov	r1, r4
 8004c12:	464b      	mov	r3, r9
 8004c14:	2205      	movs	r2, #5
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 f9d2 	bl	8004fc0 <__multadd>
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4658      	mov	r0, fp
 8004c22:	f000 fbe9 	bl	80053f8 <__mcmp>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f73f adb8 	bgt.w	800479c <_dtoa_r+0x4cc>
 8004c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c2e:	9f03      	ldr	r7, [sp, #12]
 8004c30:	ea6f 0a03 	mvn.w	sl, r3
 8004c34:	f04f 0800 	mov.w	r8, #0
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f99e 	bl	8004f7c <_Bfree>
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	f43f aea7 	beq.w	8004994 <_dtoa_r+0x6c4>
 8004c46:	f1b8 0f00 	cmp.w	r8, #0
 8004c4a:	d005      	beq.n	8004c58 <_dtoa_r+0x988>
 8004c4c:	45b0      	cmp	r8, r6
 8004c4e:	d003      	beq.n	8004c58 <_dtoa_r+0x988>
 8004c50:	4641      	mov	r1, r8
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 f992 	bl	8004f7c <_Bfree>
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f98e 	bl	8004f7c <_Bfree>
 8004c60:	e698      	b.n	8004994 <_dtoa_r+0x6c4>
 8004c62:	2400      	movs	r4, #0
 8004c64:	4626      	mov	r6, r4
 8004c66:	e7e1      	b.n	8004c2c <_dtoa_r+0x95c>
 8004c68:	46c2      	mov	sl, r8
 8004c6a:	4626      	mov	r6, r4
 8004c6c:	e596      	b.n	800479c <_dtoa_r+0x4cc>
 8004c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80fd 	beq.w	8004e74 <_dtoa_r+0xba4>
 8004c7a:	2f00      	cmp	r7, #0
 8004c7c:	dd05      	ble.n	8004c8a <_dtoa_r+0x9ba>
 8004c7e:	4631      	mov	r1, r6
 8004c80:	463a      	mov	r2, r7
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 fb48 	bl	8005318 <__lshift>
 8004c88:	4606      	mov	r6, r0
 8004c8a:	f1b8 0f00 	cmp.w	r8, #0
 8004c8e:	d05c      	beq.n	8004d4a <_dtoa_r+0xa7a>
 8004c90:	4628      	mov	r0, r5
 8004c92:	6871      	ldr	r1, [r6, #4]
 8004c94:	f000 f932 	bl	8004efc <_Balloc>
 8004c98:	4607      	mov	r7, r0
 8004c9a:	b928      	cbnz	r0, 8004ca8 <_dtoa_r+0x9d8>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ca2:	4b7f      	ldr	r3, [pc, #508]	; (8004ea0 <_dtoa_r+0xbd0>)
 8004ca4:	f7ff bb28 	b.w	80042f8 <_dtoa_r+0x28>
 8004ca8:	6932      	ldr	r2, [r6, #16]
 8004caa:	f106 010c 	add.w	r1, r6, #12
 8004cae:	3202      	adds	r2, #2
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	300c      	adds	r0, #12
 8004cb4:	f000 f914 	bl	8004ee0 <memcpy>
 8004cb8:	2201      	movs	r2, #1
 8004cba:	4639      	mov	r1, r7
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 fb2b 	bl	8005318 <__lshift>
 8004cc2:	46b0      	mov	r8, r6
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	9308      	str	r3, [sp, #32]
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	444b      	add	r3, r9
 8004cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd2:	9b04      	ldr	r3, [sp, #16]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cda:	9b08      	ldr	r3, [sp, #32]
 8004cdc:	4621      	mov	r1, r4
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	4658      	mov	r0, fp
 8004ce2:	9304      	str	r3, [sp, #16]
 8004ce4:	f7ff fa66 	bl	80041b4 <quorem>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4641      	mov	r1, r8
 8004cec:	3330      	adds	r3, #48	; 0x30
 8004cee:	9006      	str	r0, [sp, #24]
 8004cf0:	4658      	mov	r0, fp
 8004cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf4:	f000 fb80 	bl	80053f8 <__mcmp>
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4681      	mov	r9, r0
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 fb96 	bl	8005430 <__mdiff>
 8004d04:	68c2      	ldr	r2, [r0, #12]
 8004d06:	4607      	mov	r7, r0
 8004d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0a:	bb02      	cbnz	r2, 8004d4e <_dtoa_r+0xa7e>
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4658      	mov	r0, fp
 8004d10:	f000 fb72 	bl	80053f8 <__mcmp>
 8004d14:	4602      	mov	r2, r0
 8004d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004d20:	f000 f92c 	bl	8004f7c <_Bfree>
 8004d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d28:	9f08      	ldr	r7, [sp, #32]
 8004d2a:	ea43 0102 	orr.w	r1, r3, r2
 8004d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d30:	430b      	orrs	r3, r1
 8004d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d34:	d10d      	bne.n	8004d52 <_dtoa_r+0xa82>
 8004d36:	2b39      	cmp	r3, #57	; 0x39
 8004d38:	d029      	beq.n	8004d8e <_dtoa_r+0xabe>
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	dd01      	ble.n	8004d44 <_dtoa_r+0xa74>
 8004d40:	9b06      	ldr	r3, [sp, #24]
 8004d42:	3331      	adds	r3, #49	; 0x31
 8004d44:	9a04      	ldr	r2, [sp, #16]
 8004d46:	7013      	strb	r3, [r2, #0]
 8004d48:	e776      	b.n	8004c38 <_dtoa_r+0x968>
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	e7b9      	b.n	8004cc2 <_dtoa_r+0x9f2>
 8004d4e:	2201      	movs	r2, #1
 8004d50:	e7e2      	b.n	8004d18 <_dtoa_r+0xa48>
 8004d52:	f1b9 0f00 	cmp.w	r9, #0
 8004d56:	db06      	blt.n	8004d66 <_dtoa_r+0xa96>
 8004d58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004d5a:	ea41 0909 	orr.w	r9, r1, r9
 8004d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d60:	ea59 0101 	orrs.w	r1, r9, r1
 8004d64:	d120      	bne.n	8004da8 <_dtoa_r+0xad8>
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	ddec      	ble.n	8004d44 <_dtoa_r+0xa74>
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4628      	mov	r0, r5
 8004d70:	9308      	str	r3, [sp, #32]
 8004d72:	f000 fad1 	bl	8005318 <__lshift>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4683      	mov	fp, r0
 8004d7a:	f000 fb3d 	bl	80053f8 <__mcmp>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	9b08      	ldr	r3, [sp, #32]
 8004d82:	dc02      	bgt.n	8004d8a <_dtoa_r+0xaba>
 8004d84:	d1de      	bne.n	8004d44 <_dtoa_r+0xa74>
 8004d86:	07da      	lsls	r2, r3, #31
 8004d88:	d5dc      	bpl.n	8004d44 <_dtoa_r+0xa74>
 8004d8a:	2b39      	cmp	r3, #57	; 0x39
 8004d8c:	d1d8      	bne.n	8004d40 <_dtoa_r+0xa70>
 8004d8e:	2339      	movs	r3, #57	; 0x39
 8004d90:	9a04      	ldr	r2, [sp, #16]
 8004d92:	7013      	strb	r3, [r2, #0]
 8004d94:	463b      	mov	r3, r7
 8004d96:	461f      	mov	r7, r3
 8004d98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	2a39      	cmp	r2, #57	; 0x39
 8004da0:	d050      	beq.n	8004e44 <_dtoa_r+0xb74>
 8004da2:	3201      	adds	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e747      	b.n	8004c38 <_dtoa_r+0x968>
 8004da8:	2a00      	cmp	r2, #0
 8004daa:	dd03      	ble.n	8004db4 <_dtoa_r+0xae4>
 8004dac:	2b39      	cmp	r3, #57	; 0x39
 8004dae:	d0ee      	beq.n	8004d8e <_dtoa_r+0xabe>
 8004db0:	3301      	adds	r3, #1
 8004db2:	e7c7      	b.n	8004d44 <_dtoa_r+0xa74>
 8004db4:	9a08      	ldr	r2, [sp, #32]
 8004db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004db8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004dbc:	428a      	cmp	r2, r1
 8004dbe:	d02a      	beq.n	8004e16 <_dtoa_r+0xb46>
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	220a      	movs	r2, #10
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 f8fa 	bl	8004fc0 <__multadd>
 8004dcc:	45b0      	cmp	r8, r6
 8004dce:	4683      	mov	fp, r0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f04f 020a 	mov.w	r2, #10
 8004dd8:	4641      	mov	r1, r8
 8004dda:	4628      	mov	r0, r5
 8004ddc:	d107      	bne.n	8004dee <_dtoa_r+0xb1e>
 8004dde:	f000 f8ef 	bl	8004fc0 <__multadd>
 8004de2:	4680      	mov	r8, r0
 8004de4:	4606      	mov	r6, r0
 8004de6:	9b08      	ldr	r3, [sp, #32]
 8004de8:	3301      	adds	r3, #1
 8004dea:	9308      	str	r3, [sp, #32]
 8004dec:	e775      	b.n	8004cda <_dtoa_r+0xa0a>
 8004dee:	f000 f8e7 	bl	8004fc0 <__multadd>
 8004df2:	4631      	mov	r1, r6
 8004df4:	4680      	mov	r8, r0
 8004df6:	2300      	movs	r3, #0
 8004df8:	220a      	movs	r2, #10
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f8e0 	bl	8004fc0 <__multadd>
 8004e00:	4606      	mov	r6, r0
 8004e02:	e7f0      	b.n	8004de6 <_dtoa_r+0xb16>
 8004e04:	f1b9 0f00 	cmp.w	r9, #0
 8004e08:	bfcc      	ite	gt
 8004e0a:	464f      	movgt	r7, r9
 8004e0c:	2701      	movle	r7, #1
 8004e0e:	f04f 0800 	mov.w	r8, #0
 8004e12:	9a03      	ldr	r2, [sp, #12]
 8004e14:	4417      	add	r7, r2
 8004e16:	4659      	mov	r1, fp
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	9308      	str	r3, [sp, #32]
 8004e1e:	f000 fa7b 	bl	8005318 <__lshift>
 8004e22:	4621      	mov	r1, r4
 8004e24:	4683      	mov	fp, r0
 8004e26:	f000 fae7 	bl	80053f8 <__mcmp>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	dcb2      	bgt.n	8004d94 <_dtoa_r+0xac4>
 8004e2e:	d102      	bne.n	8004e36 <_dtoa_r+0xb66>
 8004e30:	9b08      	ldr	r3, [sp, #32]
 8004e32:	07db      	lsls	r3, r3, #31
 8004e34:	d4ae      	bmi.n	8004d94 <_dtoa_r+0xac4>
 8004e36:	463b      	mov	r3, r7
 8004e38:	461f      	mov	r7, r3
 8004e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e3e:	2a30      	cmp	r2, #48	; 0x30
 8004e40:	d0fa      	beq.n	8004e38 <_dtoa_r+0xb68>
 8004e42:	e6f9      	b.n	8004c38 <_dtoa_r+0x968>
 8004e44:	9a03      	ldr	r2, [sp, #12]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d1a5      	bne.n	8004d96 <_dtoa_r+0xac6>
 8004e4a:	2331      	movs	r3, #49	; 0x31
 8004e4c:	f10a 0a01 	add.w	sl, sl, #1
 8004e50:	e779      	b.n	8004d46 <_dtoa_r+0xa76>
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <_dtoa_r+0xbd4>)
 8004e54:	f7ff baa8 	b.w	80043a8 <_dtoa_r+0xd8>
 8004e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f47f aa81 	bne.w	8004362 <_dtoa_r+0x92>
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <_dtoa_r+0xbd8>)
 8004e62:	f7ff baa1 	b.w	80043a8 <_dtoa_r+0xd8>
 8004e66:	f1b9 0f00 	cmp.w	r9, #0
 8004e6a:	dc03      	bgt.n	8004e74 <_dtoa_r+0xba4>
 8004e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	f73f aecb 	bgt.w	8004c0a <_dtoa_r+0x93a>
 8004e74:	9f03      	ldr	r7, [sp, #12]
 8004e76:	4621      	mov	r1, r4
 8004e78:	4658      	mov	r0, fp
 8004e7a:	f7ff f99b 	bl	80041b4 <quorem>
 8004e7e:	9a03      	ldr	r2, [sp, #12]
 8004e80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004e84:	f807 3b01 	strb.w	r3, [r7], #1
 8004e88:	1aba      	subs	r2, r7, r2
 8004e8a:	4591      	cmp	r9, r2
 8004e8c:	ddba      	ble.n	8004e04 <_dtoa_r+0xb34>
 8004e8e:	4659      	mov	r1, fp
 8004e90:	2300      	movs	r3, #0
 8004e92:	220a      	movs	r2, #10
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f893 	bl	8004fc0 <__multadd>
 8004e9a:	4683      	mov	fp, r0
 8004e9c:	e7eb      	b.n	8004e76 <_dtoa_r+0xba6>
 8004e9e:	bf00      	nop
 8004ea0:	080067e7 	.word	0x080067e7
 8004ea4:	08006744 	.word	0x08006744
 8004ea8:	08006768 	.word	0x08006768

08004eac <_localeconv_r>:
 8004eac:	4800      	ldr	r0, [pc, #0]	; (8004eb0 <_localeconv_r+0x4>)
 8004eae:	4770      	bx	lr
 8004eb0:	20000160 	.word	0x20000160

08004eb4 <malloc>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <malloc+0xc>)
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f000 bc1d 	b.w	80056f8 <_malloc_r>
 8004ebe:	bf00      	nop
 8004ec0:	2000000c 	.word	0x2000000c

08004ec4 <memchr>:
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	b2c9      	uxtb	r1, r1
 8004eca:	4402      	add	r2, r0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	d101      	bne.n	8004ed6 <memchr+0x12>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e003      	b.n	8004ede <memchr+0x1a>
 8004ed6:	7804      	ldrb	r4, [r0, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	428c      	cmp	r4, r1
 8004edc:	d1f6      	bne.n	8004ecc <memchr+0x8>
 8004ede:	bd10      	pop	{r4, pc}

08004ee0 <memcpy>:
 8004ee0:	440a      	add	r2, r1
 8004ee2:	4291      	cmp	r1, r2
 8004ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ee8:	d100      	bne.n	8004eec <memcpy+0xc>
 8004eea:	4770      	bx	lr
 8004eec:	b510      	push	{r4, lr}
 8004eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef2:	4291      	cmp	r1, r2
 8004ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ef8:	d1f9      	bne.n	8004eee <memcpy+0xe>
 8004efa:	bd10      	pop	{r4, pc}

08004efc <_Balloc>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	b976      	cbnz	r6, 8004f24 <_Balloc+0x28>
 8004f06:	2010      	movs	r0, #16
 8004f08:	f7ff ffd4 	bl	8004eb4 <malloc>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8004f10:	b920      	cbnz	r0, 8004f1c <_Balloc+0x20>
 8004f12:	2166      	movs	r1, #102	; 0x66
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <_Balloc+0x78>)
 8004f16:	4818      	ldr	r0, [pc, #96]	; (8004f78 <_Balloc+0x7c>)
 8004f18:	f000 fdce 	bl	8005ab8 <__assert_func>
 8004f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f20:	6006      	str	r6, [r0, #0]
 8004f22:	60c6      	str	r6, [r0, #12]
 8004f24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f26:	68f3      	ldr	r3, [r6, #12]
 8004f28:	b183      	cbz	r3, 8004f4c <_Balloc+0x50>
 8004f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f32:	b9b8      	cbnz	r0, 8004f64 <_Balloc+0x68>
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f605 	lsl.w	r6, r1, r5
 8004f3a:	1d72      	adds	r2, r6, #5
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	f000 fb5e 	bl	8005600 <_calloc_r>
 8004f44:	b160      	cbz	r0, 8004f60 <_Balloc+0x64>
 8004f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f4a:	e00e      	b.n	8004f6a <_Balloc+0x6e>
 8004f4c:	2221      	movs	r2, #33	; 0x21
 8004f4e:	2104      	movs	r1, #4
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 fb55 	bl	8005600 <_calloc_r>
 8004f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f58:	60f0      	str	r0, [r6, #12]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e4      	bne.n	8004f2a <_Balloc+0x2e>
 8004f60:	2000      	movs	r0, #0
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	6802      	ldr	r2, [r0, #0]
 8004f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f70:	e7f7      	b.n	8004f62 <_Balloc+0x66>
 8004f72:	bf00      	nop
 8004f74:	08006775 	.word	0x08006775
 8004f78:	080067f8 	.word	0x080067f8

08004f7c <_Bfree>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f80:	4605      	mov	r5, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b976      	cbnz	r6, 8004fa4 <_Bfree+0x28>
 8004f86:	2010      	movs	r0, #16
 8004f88:	f7ff ff94 	bl	8004eb4 <malloc>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6268      	str	r0, [r5, #36]	; 0x24
 8004f90:	b920      	cbnz	r0, 8004f9c <_Bfree+0x20>
 8004f92:	218a      	movs	r1, #138	; 0x8a
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <_Bfree+0x3c>)
 8004f96:	4809      	ldr	r0, [pc, #36]	; (8004fbc <_Bfree+0x40>)
 8004f98:	f000 fd8e 	bl	8005ab8 <__assert_func>
 8004f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fa0:	6006      	str	r6, [r0, #0]
 8004fa2:	60c6      	str	r6, [r0, #12]
 8004fa4:	b13c      	cbz	r4, 8004fb6 <_Bfree+0x3a>
 8004fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fa8:	6862      	ldr	r2, [r4, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fb0:	6021      	str	r1, [r4, #0]
 8004fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	08006775 	.word	0x08006775
 8004fbc:	080067f8 	.word	0x080067f8

08004fc0 <__multadd>:
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	461e      	mov	r6, r3
 8004fca:	2000      	movs	r0, #0
 8004fcc:	690d      	ldr	r5, [r1, #16]
 8004fce:	f101 0c14 	add.w	ip, r1, #20
 8004fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	b299      	uxth	r1, r3
 8004fda:	fb02 6101 	mla	r1, r2, r1, r6
 8004fde:	0c1e      	lsrs	r6, r3, #16
 8004fe0:	0c0b      	lsrs	r3, r1, #16
 8004fe2:	fb02 3306 	mla	r3, r2, r6, r3
 8004fe6:	b289      	uxth	r1, r1
 8004fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fec:	4285      	cmp	r5, r0
 8004fee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ff2:	f84c 1b04 	str.w	r1, [ip], #4
 8004ff6:	dcec      	bgt.n	8004fd2 <__multadd+0x12>
 8004ff8:	b30e      	cbz	r6, 800503e <__multadd+0x7e>
 8004ffa:	68a3      	ldr	r3, [r4, #8]
 8004ffc:	42ab      	cmp	r3, r5
 8004ffe:	dc19      	bgt.n	8005034 <__multadd+0x74>
 8005000:	6861      	ldr	r1, [r4, #4]
 8005002:	4638      	mov	r0, r7
 8005004:	3101      	adds	r1, #1
 8005006:	f7ff ff79 	bl	8004efc <_Balloc>
 800500a:	4680      	mov	r8, r0
 800500c:	b928      	cbnz	r0, 800501a <__multadd+0x5a>
 800500e:	4602      	mov	r2, r0
 8005010:	21b5      	movs	r1, #181	; 0xb5
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <__multadd+0x84>)
 8005014:	480c      	ldr	r0, [pc, #48]	; (8005048 <__multadd+0x88>)
 8005016:	f000 fd4f 	bl	8005ab8 <__assert_func>
 800501a:	6922      	ldr	r2, [r4, #16]
 800501c:	f104 010c 	add.w	r1, r4, #12
 8005020:	3202      	adds	r2, #2
 8005022:	0092      	lsls	r2, r2, #2
 8005024:	300c      	adds	r0, #12
 8005026:	f7ff ff5b 	bl	8004ee0 <memcpy>
 800502a:	4621      	mov	r1, r4
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff ffa5 	bl	8004f7c <_Bfree>
 8005032:	4644      	mov	r4, r8
 8005034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005038:	3501      	adds	r5, #1
 800503a:	615e      	str	r6, [r3, #20]
 800503c:	6125      	str	r5, [r4, #16]
 800503e:	4620      	mov	r0, r4
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	080067e7 	.word	0x080067e7
 8005048:	080067f8 	.word	0x080067f8

0800504c <__hi0bits>:
 800504c:	0c02      	lsrs	r2, r0, #16
 800504e:	0412      	lsls	r2, r2, #16
 8005050:	4603      	mov	r3, r0
 8005052:	b9ca      	cbnz	r2, 8005088 <__hi0bits+0x3c>
 8005054:	0403      	lsls	r3, r0, #16
 8005056:	2010      	movs	r0, #16
 8005058:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800505c:	bf04      	itt	eq
 800505e:	021b      	lsleq	r3, r3, #8
 8005060:	3008      	addeq	r0, #8
 8005062:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005066:	bf04      	itt	eq
 8005068:	011b      	lsleq	r3, r3, #4
 800506a:	3004      	addeq	r0, #4
 800506c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005070:	bf04      	itt	eq
 8005072:	009b      	lsleq	r3, r3, #2
 8005074:	3002      	addeq	r0, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	db05      	blt.n	8005086 <__hi0bits+0x3a>
 800507a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800507e:	f100 0001 	add.w	r0, r0, #1
 8005082:	bf08      	it	eq
 8005084:	2020      	moveq	r0, #32
 8005086:	4770      	bx	lr
 8005088:	2000      	movs	r0, #0
 800508a:	e7e5      	b.n	8005058 <__hi0bits+0xc>

0800508c <__lo0bits>:
 800508c:	6803      	ldr	r3, [r0, #0]
 800508e:	4602      	mov	r2, r0
 8005090:	f013 0007 	ands.w	r0, r3, #7
 8005094:	d00b      	beq.n	80050ae <__lo0bits+0x22>
 8005096:	07d9      	lsls	r1, r3, #31
 8005098:	d421      	bmi.n	80050de <__lo0bits+0x52>
 800509a:	0798      	lsls	r0, r3, #30
 800509c:	bf49      	itett	mi
 800509e:	085b      	lsrmi	r3, r3, #1
 80050a0:	089b      	lsrpl	r3, r3, #2
 80050a2:	2001      	movmi	r0, #1
 80050a4:	6013      	strmi	r3, [r2, #0]
 80050a6:	bf5c      	itt	pl
 80050a8:	2002      	movpl	r0, #2
 80050aa:	6013      	strpl	r3, [r2, #0]
 80050ac:	4770      	bx	lr
 80050ae:	b299      	uxth	r1, r3
 80050b0:	b909      	cbnz	r1, 80050b6 <__lo0bits+0x2a>
 80050b2:	2010      	movs	r0, #16
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	b2d9      	uxtb	r1, r3
 80050b8:	b909      	cbnz	r1, 80050be <__lo0bits+0x32>
 80050ba:	3008      	adds	r0, #8
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	0719      	lsls	r1, r3, #28
 80050c0:	bf04      	itt	eq
 80050c2:	091b      	lsreq	r3, r3, #4
 80050c4:	3004      	addeq	r0, #4
 80050c6:	0799      	lsls	r1, r3, #30
 80050c8:	bf04      	itt	eq
 80050ca:	089b      	lsreq	r3, r3, #2
 80050cc:	3002      	addeq	r0, #2
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	d403      	bmi.n	80050da <__lo0bits+0x4e>
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	f100 0001 	add.w	r0, r0, #1
 80050d8:	d003      	beq.n	80050e2 <__lo0bits+0x56>
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4770      	bx	lr
 80050de:	2000      	movs	r0, #0
 80050e0:	4770      	bx	lr
 80050e2:	2020      	movs	r0, #32
 80050e4:	4770      	bx	lr
	...

080050e8 <__i2b>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	2101      	movs	r1, #1
 80050ee:	f7ff ff05 	bl	8004efc <_Balloc>
 80050f2:	4602      	mov	r2, r0
 80050f4:	b928      	cbnz	r0, 8005102 <__i2b+0x1a>
 80050f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <__i2b+0x24>)
 80050fc:	4804      	ldr	r0, [pc, #16]	; (8005110 <__i2b+0x28>)
 80050fe:	f000 fcdb 	bl	8005ab8 <__assert_func>
 8005102:	2301      	movs	r3, #1
 8005104:	6144      	str	r4, [r0, #20]
 8005106:	6103      	str	r3, [r0, #16]
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	080067e7 	.word	0x080067e7
 8005110:	080067f8 	.word	0x080067f8

08005114 <__multiply>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4691      	mov	r9, r2
 800511a:	690a      	ldr	r2, [r1, #16]
 800511c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005120:	460c      	mov	r4, r1
 8005122:	429a      	cmp	r2, r3
 8005124:	bfbe      	ittt	lt
 8005126:	460b      	movlt	r3, r1
 8005128:	464c      	movlt	r4, r9
 800512a:	4699      	movlt	r9, r3
 800512c:	6927      	ldr	r7, [r4, #16]
 800512e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	6861      	ldr	r1, [r4, #4]
 8005136:	eb07 060a 	add.w	r6, r7, sl
 800513a:	42b3      	cmp	r3, r6
 800513c:	b085      	sub	sp, #20
 800513e:	bfb8      	it	lt
 8005140:	3101      	addlt	r1, #1
 8005142:	f7ff fedb 	bl	8004efc <_Balloc>
 8005146:	b930      	cbnz	r0, 8005156 <__multiply+0x42>
 8005148:	4602      	mov	r2, r0
 800514a:	f240 115d 	movw	r1, #349	; 0x15d
 800514e:	4b43      	ldr	r3, [pc, #268]	; (800525c <__multiply+0x148>)
 8005150:	4843      	ldr	r0, [pc, #268]	; (8005260 <__multiply+0x14c>)
 8005152:	f000 fcb1 	bl	8005ab8 <__assert_func>
 8005156:	f100 0514 	add.w	r5, r0, #20
 800515a:	462b      	mov	r3, r5
 800515c:	2200      	movs	r2, #0
 800515e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005162:	4543      	cmp	r3, r8
 8005164:	d321      	bcc.n	80051aa <__multiply+0x96>
 8005166:	f104 0314 	add.w	r3, r4, #20
 800516a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800516e:	f109 0314 	add.w	r3, r9, #20
 8005172:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005176:	9202      	str	r2, [sp, #8]
 8005178:	1b3a      	subs	r2, r7, r4
 800517a:	3a15      	subs	r2, #21
 800517c:	f022 0203 	bic.w	r2, r2, #3
 8005180:	3204      	adds	r2, #4
 8005182:	f104 0115 	add.w	r1, r4, #21
 8005186:	428f      	cmp	r7, r1
 8005188:	bf38      	it	cc
 800518a:	2204      	movcc	r2, #4
 800518c:	9201      	str	r2, [sp, #4]
 800518e:	9a02      	ldr	r2, [sp, #8]
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	429a      	cmp	r2, r3
 8005194:	d80c      	bhi.n	80051b0 <__multiply+0x9c>
 8005196:	2e00      	cmp	r6, #0
 8005198:	dd03      	ble.n	80051a2 <__multiply+0x8e>
 800519a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d059      	beq.n	8005256 <__multiply+0x142>
 80051a2:	6106      	str	r6, [r0, #16]
 80051a4:	b005      	add	sp, #20
 80051a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051aa:	f843 2b04 	str.w	r2, [r3], #4
 80051ae:	e7d8      	b.n	8005162 <__multiply+0x4e>
 80051b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80051b4:	f1ba 0f00 	cmp.w	sl, #0
 80051b8:	d023      	beq.n	8005202 <__multiply+0xee>
 80051ba:	46a9      	mov	r9, r5
 80051bc:	f04f 0c00 	mov.w	ip, #0
 80051c0:	f104 0e14 	add.w	lr, r4, #20
 80051c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80051c8:	f8d9 1000 	ldr.w	r1, [r9]
 80051cc:	fa1f fb82 	uxth.w	fp, r2
 80051d0:	b289      	uxth	r1, r1
 80051d2:	fb0a 110b 	mla	r1, sl, fp, r1
 80051d6:	4461      	add	r1, ip
 80051d8:	f8d9 c000 	ldr.w	ip, [r9]
 80051dc:	0c12      	lsrs	r2, r2, #16
 80051de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80051e2:	fb0a c202 	mla	r2, sl, r2, ip
 80051e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051ea:	b289      	uxth	r1, r1
 80051ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051f0:	4577      	cmp	r7, lr
 80051f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051f6:	f849 1b04 	str.w	r1, [r9], #4
 80051fa:	d8e3      	bhi.n	80051c4 <__multiply+0xb0>
 80051fc:	9a01      	ldr	r2, [sp, #4]
 80051fe:	f845 c002 	str.w	ip, [r5, r2]
 8005202:	9a03      	ldr	r2, [sp, #12]
 8005204:	3304      	adds	r3, #4
 8005206:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800520a:	f1b9 0f00 	cmp.w	r9, #0
 800520e:	d020      	beq.n	8005252 <__multiply+0x13e>
 8005210:	46ae      	mov	lr, r5
 8005212:	f04f 0a00 	mov.w	sl, #0
 8005216:	6829      	ldr	r1, [r5, #0]
 8005218:	f104 0c14 	add.w	ip, r4, #20
 800521c:	f8bc b000 	ldrh.w	fp, [ip]
 8005220:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005224:	b289      	uxth	r1, r1
 8005226:	fb09 220b 	mla	r2, r9, fp, r2
 800522a:	4492      	add	sl, r2
 800522c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005230:	f84e 1b04 	str.w	r1, [lr], #4
 8005234:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005238:	f8be 1000 	ldrh.w	r1, [lr]
 800523c:	0c12      	lsrs	r2, r2, #16
 800523e:	fb09 1102 	mla	r1, r9, r2, r1
 8005242:	4567      	cmp	r7, ip
 8005244:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005248:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800524c:	d8e6      	bhi.n	800521c <__multiply+0x108>
 800524e:	9a01      	ldr	r2, [sp, #4]
 8005250:	50a9      	str	r1, [r5, r2]
 8005252:	3504      	adds	r5, #4
 8005254:	e79b      	b.n	800518e <__multiply+0x7a>
 8005256:	3e01      	subs	r6, #1
 8005258:	e79d      	b.n	8005196 <__multiply+0x82>
 800525a:	bf00      	nop
 800525c:	080067e7 	.word	0x080067e7
 8005260:	080067f8 	.word	0x080067f8

08005264 <__pow5mult>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	4615      	mov	r5, r2
 800526a:	f012 0203 	ands.w	r2, r2, #3
 800526e:	4606      	mov	r6, r0
 8005270:	460f      	mov	r7, r1
 8005272:	d007      	beq.n	8005284 <__pow5mult+0x20>
 8005274:	4c25      	ldr	r4, [pc, #148]	; (800530c <__pow5mult+0xa8>)
 8005276:	3a01      	subs	r2, #1
 8005278:	2300      	movs	r3, #0
 800527a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800527e:	f7ff fe9f 	bl	8004fc0 <__multadd>
 8005282:	4607      	mov	r7, r0
 8005284:	10ad      	asrs	r5, r5, #2
 8005286:	d03d      	beq.n	8005304 <__pow5mult+0xa0>
 8005288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800528a:	b97c      	cbnz	r4, 80052ac <__pow5mult+0x48>
 800528c:	2010      	movs	r0, #16
 800528e:	f7ff fe11 	bl	8004eb4 <malloc>
 8005292:	4602      	mov	r2, r0
 8005294:	6270      	str	r0, [r6, #36]	; 0x24
 8005296:	b928      	cbnz	r0, 80052a4 <__pow5mult+0x40>
 8005298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <__pow5mult+0xac>)
 800529e:	481d      	ldr	r0, [pc, #116]	; (8005314 <__pow5mult+0xb0>)
 80052a0:	f000 fc0a 	bl	8005ab8 <__assert_func>
 80052a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052a8:	6004      	str	r4, [r0, #0]
 80052aa:	60c4      	str	r4, [r0, #12]
 80052ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80052b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052b4:	b94c      	cbnz	r4, 80052ca <__pow5mult+0x66>
 80052b6:	f240 2171 	movw	r1, #625	; 0x271
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7ff ff14 	bl	80050e8 <__i2b>
 80052c0:	2300      	movs	r3, #0
 80052c2:	4604      	mov	r4, r0
 80052c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80052c8:	6003      	str	r3, [r0, #0]
 80052ca:	f04f 0900 	mov.w	r9, #0
 80052ce:	07eb      	lsls	r3, r5, #31
 80052d0:	d50a      	bpl.n	80052e8 <__pow5mult+0x84>
 80052d2:	4639      	mov	r1, r7
 80052d4:	4622      	mov	r2, r4
 80052d6:	4630      	mov	r0, r6
 80052d8:	f7ff ff1c 	bl	8005114 <__multiply>
 80052dc:	4680      	mov	r8, r0
 80052de:	4639      	mov	r1, r7
 80052e0:	4630      	mov	r0, r6
 80052e2:	f7ff fe4b 	bl	8004f7c <_Bfree>
 80052e6:	4647      	mov	r7, r8
 80052e8:	106d      	asrs	r5, r5, #1
 80052ea:	d00b      	beq.n	8005304 <__pow5mult+0xa0>
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	b938      	cbnz	r0, 8005300 <__pow5mult+0x9c>
 80052f0:	4622      	mov	r2, r4
 80052f2:	4621      	mov	r1, r4
 80052f4:	4630      	mov	r0, r6
 80052f6:	f7ff ff0d 	bl	8005114 <__multiply>
 80052fa:	6020      	str	r0, [r4, #0]
 80052fc:	f8c0 9000 	str.w	r9, [r0]
 8005300:	4604      	mov	r4, r0
 8005302:	e7e4      	b.n	80052ce <__pow5mult+0x6a>
 8005304:	4638      	mov	r0, r7
 8005306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800530a:	bf00      	nop
 800530c:	08006948 	.word	0x08006948
 8005310:	08006775 	.word	0x08006775
 8005314:	080067f8 	.word	0x080067f8

08005318 <__lshift>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	460c      	mov	r4, r1
 800531e:	4607      	mov	r7, r0
 8005320:	4691      	mov	r9, r2
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	6849      	ldr	r1, [r1, #4]
 8005326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005330:	f108 0601 	add.w	r6, r8, #1
 8005334:	42b3      	cmp	r3, r6
 8005336:	db0b      	blt.n	8005350 <__lshift+0x38>
 8005338:	4638      	mov	r0, r7
 800533a:	f7ff fddf 	bl	8004efc <_Balloc>
 800533e:	4605      	mov	r5, r0
 8005340:	b948      	cbnz	r0, 8005356 <__lshift+0x3e>
 8005342:	4602      	mov	r2, r0
 8005344:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005348:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <__lshift+0xd8>)
 800534a:	482a      	ldr	r0, [pc, #168]	; (80053f4 <__lshift+0xdc>)
 800534c:	f000 fbb4 	bl	8005ab8 <__assert_func>
 8005350:	3101      	adds	r1, #1
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	e7ee      	b.n	8005334 <__lshift+0x1c>
 8005356:	2300      	movs	r3, #0
 8005358:	f100 0114 	add.w	r1, r0, #20
 800535c:	f100 0210 	add.w	r2, r0, #16
 8005360:	4618      	mov	r0, r3
 8005362:	4553      	cmp	r3, sl
 8005364:	db37      	blt.n	80053d6 <__lshift+0xbe>
 8005366:	6920      	ldr	r0, [r4, #16]
 8005368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800536c:	f104 0314 	add.w	r3, r4, #20
 8005370:	f019 091f 	ands.w	r9, r9, #31
 8005374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005378:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800537c:	d02f      	beq.n	80053de <__lshift+0xc6>
 800537e:	468a      	mov	sl, r1
 8005380:	f04f 0c00 	mov.w	ip, #0
 8005384:	f1c9 0e20 	rsb	lr, r9, #32
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	fa02 f209 	lsl.w	r2, r2, r9
 800538e:	ea42 020c 	orr.w	r2, r2, ip
 8005392:	f84a 2b04 	str.w	r2, [sl], #4
 8005396:	f853 2b04 	ldr.w	r2, [r3], #4
 800539a:	4298      	cmp	r0, r3
 800539c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80053a0:	d8f2      	bhi.n	8005388 <__lshift+0x70>
 80053a2:	1b03      	subs	r3, r0, r4
 80053a4:	3b15      	subs	r3, #21
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	3304      	adds	r3, #4
 80053ac:	f104 0215 	add.w	r2, r4, #21
 80053b0:	4290      	cmp	r0, r2
 80053b2:	bf38      	it	cc
 80053b4:	2304      	movcc	r3, #4
 80053b6:	f841 c003 	str.w	ip, [r1, r3]
 80053ba:	f1bc 0f00 	cmp.w	ip, #0
 80053be:	d001      	beq.n	80053c4 <__lshift+0xac>
 80053c0:	f108 0602 	add.w	r6, r8, #2
 80053c4:	3e01      	subs	r6, #1
 80053c6:	4638      	mov	r0, r7
 80053c8:	4621      	mov	r1, r4
 80053ca:	612e      	str	r6, [r5, #16]
 80053cc:	f7ff fdd6 	bl	8004f7c <_Bfree>
 80053d0:	4628      	mov	r0, r5
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80053da:	3301      	adds	r3, #1
 80053dc:	e7c1      	b.n	8005362 <__lshift+0x4a>
 80053de:	3904      	subs	r1, #4
 80053e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e4:	4298      	cmp	r0, r3
 80053e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80053ea:	d8f9      	bhi.n	80053e0 <__lshift+0xc8>
 80053ec:	e7ea      	b.n	80053c4 <__lshift+0xac>
 80053ee:	bf00      	nop
 80053f0:	080067e7 	.word	0x080067e7
 80053f4:	080067f8 	.word	0x080067f8

080053f8 <__mcmp>:
 80053f8:	4603      	mov	r3, r0
 80053fa:	690a      	ldr	r2, [r1, #16]
 80053fc:	6900      	ldr	r0, [r0, #16]
 80053fe:	b530      	push	{r4, r5, lr}
 8005400:	1a80      	subs	r0, r0, r2
 8005402:	d10d      	bne.n	8005420 <__mcmp+0x28>
 8005404:	3314      	adds	r3, #20
 8005406:	3114      	adds	r1, #20
 8005408:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800540c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005418:	4295      	cmp	r5, r2
 800541a:	d002      	beq.n	8005422 <__mcmp+0x2a>
 800541c:	d304      	bcc.n	8005428 <__mcmp+0x30>
 800541e:	2001      	movs	r0, #1
 8005420:	bd30      	pop	{r4, r5, pc}
 8005422:	42a3      	cmp	r3, r4
 8005424:	d3f4      	bcc.n	8005410 <__mcmp+0x18>
 8005426:	e7fb      	b.n	8005420 <__mcmp+0x28>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	e7f8      	b.n	8005420 <__mcmp+0x28>
	...

08005430 <__mdiff>:
 8005430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	460d      	mov	r5, r1
 8005436:	4607      	mov	r7, r0
 8005438:	4611      	mov	r1, r2
 800543a:	4628      	mov	r0, r5
 800543c:	4614      	mov	r4, r2
 800543e:	f7ff ffdb 	bl	80053f8 <__mcmp>
 8005442:	1e06      	subs	r6, r0, #0
 8005444:	d111      	bne.n	800546a <__mdiff+0x3a>
 8005446:	4631      	mov	r1, r6
 8005448:	4638      	mov	r0, r7
 800544a:	f7ff fd57 	bl	8004efc <_Balloc>
 800544e:	4602      	mov	r2, r0
 8005450:	b928      	cbnz	r0, 800545e <__mdiff+0x2e>
 8005452:	f240 2132 	movw	r1, #562	; 0x232
 8005456:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <__mdiff+0x110>)
 8005458:	483a      	ldr	r0, [pc, #232]	; (8005544 <__mdiff+0x114>)
 800545a:	f000 fb2d 	bl	8005ab8 <__assert_func>
 800545e:	2301      	movs	r3, #1
 8005460:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005464:	4610      	mov	r0, r2
 8005466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546a:	bfa4      	itt	ge
 800546c:	4623      	movge	r3, r4
 800546e:	462c      	movge	r4, r5
 8005470:	4638      	mov	r0, r7
 8005472:	6861      	ldr	r1, [r4, #4]
 8005474:	bfa6      	itte	ge
 8005476:	461d      	movge	r5, r3
 8005478:	2600      	movge	r6, #0
 800547a:	2601      	movlt	r6, #1
 800547c:	f7ff fd3e 	bl	8004efc <_Balloc>
 8005480:	4602      	mov	r2, r0
 8005482:	b918      	cbnz	r0, 800548c <__mdiff+0x5c>
 8005484:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <__mdiff+0x110>)
 800548a:	e7e5      	b.n	8005458 <__mdiff+0x28>
 800548c:	f102 0814 	add.w	r8, r2, #20
 8005490:	46c2      	mov	sl, r8
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	6927      	ldr	r7, [r4, #16]
 8005498:	60c6      	str	r6, [r0, #12]
 800549a:	692e      	ldr	r6, [r5, #16]
 800549c:	f104 0014 	add.w	r0, r4, #20
 80054a0:	f105 0914 	add.w	r9, r5, #20
 80054a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80054a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80054ac:	3410      	adds	r4, #16
 80054ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80054b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80054b6:	fa1f f18b 	uxth.w	r1, fp
 80054ba:	448c      	add	ip, r1
 80054bc:	b299      	uxth	r1, r3
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	ebac 0101 	sub.w	r1, ip, r1
 80054c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80054cc:	b289      	uxth	r1, r1
 80054ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80054d2:	454e      	cmp	r6, r9
 80054d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80054d8:	f84a 3b04 	str.w	r3, [sl], #4
 80054dc:	d8e7      	bhi.n	80054ae <__mdiff+0x7e>
 80054de:	1b73      	subs	r3, r6, r5
 80054e0:	3b15      	subs	r3, #21
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	3515      	adds	r5, #21
 80054e8:	3304      	adds	r3, #4
 80054ea:	42ae      	cmp	r6, r5
 80054ec:	bf38      	it	cc
 80054ee:	2304      	movcc	r3, #4
 80054f0:	4418      	add	r0, r3
 80054f2:	4443      	add	r3, r8
 80054f4:	461e      	mov	r6, r3
 80054f6:	4605      	mov	r5, r0
 80054f8:	4575      	cmp	r5, lr
 80054fa:	d30e      	bcc.n	800551a <__mdiff+0xea>
 80054fc:	f10e 0103 	add.w	r1, lr, #3
 8005500:	1a09      	subs	r1, r1, r0
 8005502:	f021 0103 	bic.w	r1, r1, #3
 8005506:	3803      	subs	r0, #3
 8005508:	4586      	cmp	lr, r0
 800550a:	bf38      	it	cc
 800550c:	2100      	movcc	r1, #0
 800550e:	4419      	add	r1, r3
 8005510:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005514:	b18b      	cbz	r3, 800553a <__mdiff+0x10a>
 8005516:	6117      	str	r7, [r2, #16]
 8005518:	e7a4      	b.n	8005464 <__mdiff+0x34>
 800551a:	f855 8b04 	ldr.w	r8, [r5], #4
 800551e:	fa1f f188 	uxth.w	r1, r8
 8005522:	4461      	add	r1, ip
 8005524:	140c      	asrs	r4, r1, #16
 8005526:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800552a:	b289      	uxth	r1, r1
 800552c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005530:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005534:	f846 1b04 	str.w	r1, [r6], #4
 8005538:	e7de      	b.n	80054f8 <__mdiff+0xc8>
 800553a:	3f01      	subs	r7, #1
 800553c:	e7e8      	b.n	8005510 <__mdiff+0xe0>
 800553e:	bf00      	nop
 8005540:	080067e7 	.word	0x080067e7
 8005544:	080067f8 	.word	0x080067f8

08005548 <__d2b>:
 8005548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800554c:	2101      	movs	r1, #1
 800554e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005552:	4690      	mov	r8, r2
 8005554:	461d      	mov	r5, r3
 8005556:	f7ff fcd1 	bl	8004efc <_Balloc>
 800555a:	4604      	mov	r4, r0
 800555c:	b930      	cbnz	r0, 800556c <__d2b+0x24>
 800555e:	4602      	mov	r2, r0
 8005560:	f240 310a 	movw	r1, #778	; 0x30a
 8005564:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <__d2b+0xb0>)
 8005566:	4825      	ldr	r0, [pc, #148]	; (80055fc <__d2b+0xb4>)
 8005568:	f000 faa6 	bl	8005ab8 <__assert_func>
 800556c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005570:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005574:	bb2d      	cbnz	r5, 80055c2 <__d2b+0x7a>
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	f1b8 0300 	subs.w	r3, r8, #0
 800557c:	d026      	beq.n	80055cc <__d2b+0x84>
 800557e:	4668      	mov	r0, sp
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	f7ff fd83 	bl	800508c <__lo0bits>
 8005586:	9900      	ldr	r1, [sp, #0]
 8005588:	b1f0      	cbz	r0, 80055c8 <__d2b+0x80>
 800558a:	9a01      	ldr	r2, [sp, #4]
 800558c:	f1c0 0320 	rsb	r3, r0, #32
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	430b      	orrs	r3, r1
 8005596:	40c2      	lsrs	r2, r0
 8005598:	6163      	str	r3, [r4, #20]
 800559a:	9201      	str	r2, [sp, #4]
 800559c:	9b01      	ldr	r3, [sp, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf14      	ite	ne
 80055a2:	2102      	movne	r1, #2
 80055a4:	2101      	moveq	r1, #1
 80055a6:	61a3      	str	r3, [r4, #24]
 80055a8:	6121      	str	r1, [r4, #16]
 80055aa:	b1c5      	cbz	r5, 80055de <__d2b+0x96>
 80055ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80055b0:	4405      	add	r5, r0
 80055b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055b6:	603d      	str	r5, [r7, #0]
 80055b8:	6030      	str	r0, [r6, #0]
 80055ba:	4620      	mov	r0, r4
 80055bc:	b002      	add	sp, #8
 80055be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c6:	e7d6      	b.n	8005576 <__d2b+0x2e>
 80055c8:	6161      	str	r1, [r4, #20]
 80055ca:	e7e7      	b.n	800559c <__d2b+0x54>
 80055cc:	a801      	add	r0, sp, #4
 80055ce:	f7ff fd5d 	bl	800508c <__lo0bits>
 80055d2:	2101      	movs	r1, #1
 80055d4:	9b01      	ldr	r3, [sp, #4]
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	6163      	str	r3, [r4, #20]
 80055da:	3020      	adds	r0, #32
 80055dc:	e7e5      	b.n	80055aa <__d2b+0x62>
 80055de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80055e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055e6:	6038      	str	r0, [r7, #0]
 80055e8:	6918      	ldr	r0, [r3, #16]
 80055ea:	f7ff fd2f 	bl	800504c <__hi0bits>
 80055ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80055f2:	6031      	str	r1, [r6, #0]
 80055f4:	e7e1      	b.n	80055ba <__d2b+0x72>
 80055f6:	bf00      	nop
 80055f8:	080067e7 	.word	0x080067e7
 80055fc:	080067f8 	.word	0x080067f8

08005600 <_calloc_r>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	fba1 5402 	umull	r5, r4, r1, r2
 8005606:	b934      	cbnz	r4, 8005616 <_calloc_r+0x16>
 8005608:	4629      	mov	r1, r5
 800560a:	f000 f875 	bl	80056f8 <_malloc_r>
 800560e:	4606      	mov	r6, r0
 8005610:	b928      	cbnz	r0, 800561e <_calloc_r+0x1e>
 8005612:	4630      	mov	r0, r6
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	220c      	movs	r2, #12
 8005618:	2600      	movs	r6, #0
 800561a:	6002      	str	r2, [r0, #0]
 800561c:	e7f9      	b.n	8005612 <_calloc_r+0x12>
 800561e:	462a      	mov	r2, r5
 8005620:	4621      	mov	r1, r4
 8005622:	f7fe f93f 	bl	80038a4 <memset>
 8005626:	e7f4      	b.n	8005612 <_calloc_r+0x12>

08005628 <_free_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	2900      	cmp	r1, #0
 800562e:	d040      	beq.n	80056b2 <_free_r+0x8a>
 8005630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005634:	1f0c      	subs	r4, r1, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfb8      	it	lt
 800563a:	18e4      	addlt	r4, r4, r3
 800563c:	f000 fa98 	bl	8005b70 <__malloc_lock>
 8005640:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <_free_r+0x8c>)
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	b933      	cbnz	r3, 8005654 <_free_r+0x2c>
 8005646:	6063      	str	r3, [r4, #4]
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	4628      	mov	r0, r5
 800564c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005650:	f000 ba94 	b.w	8005b7c <__malloc_unlock>
 8005654:	42a3      	cmp	r3, r4
 8005656:	d908      	bls.n	800566a <_free_r+0x42>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	1821      	adds	r1, r4, r0
 800565c:	428b      	cmp	r3, r1
 800565e:	bf01      	itttt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	1809      	addeq	r1, r1, r0
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	e7ed      	b.n	8005646 <_free_r+0x1e>
 800566a:	461a      	mov	r2, r3
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b10b      	cbz	r3, 8005674 <_free_r+0x4c>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d9fa      	bls.n	800566a <_free_r+0x42>
 8005674:	6811      	ldr	r1, [r2, #0]
 8005676:	1850      	adds	r0, r2, r1
 8005678:	42a0      	cmp	r0, r4
 800567a:	d10b      	bne.n	8005694 <_free_r+0x6c>
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	4401      	add	r1, r0
 8005680:	1850      	adds	r0, r2, r1
 8005682:	4283      	cmp	r3, r0
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	d1e0      	bne.n	800564a <_free_r+0x22>
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4401      	add	r1, r0
 800568e:	6011      	str	r1, [r2, #0]
 8005690:	6053      	str	r3, [r2, #4]
 8005692:	e7da      	b.n	800564a <_free_r+0x22>
 8005694:	d902      	bls.n	800569c <_free_r+0x74>
 8005696:	230c      	movs	r3, #12
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	e7d6      	b.n	800564a <_free_r+0x22>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	1821      	adds	r1, r4, r0
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf01      	itttt	eq
 80056a4:	6819      	ldreq	r1, [r3, #0]
 80056a6:	685b      	ldreq	r3, [r3, #4]
 80056a8:	1809      	addeq	r1, r1, r0
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	6054      	str	r4, [r2, #4]
 80056b0:	e7cb      	b.n	800564a <_free_r+0x22>
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20000338 	.word	0x20000338

080056b8 <sbrk_aligned>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0e      	ldr	r6, [pc, #56]	; (80056f4 <sbrk_aligned+0x3c>)
 80056bc:	460c      	mov	r4, r1
 80056be:	6831      	ldr	r1, [r6, #0]
 80056c0:	4605      	mov	r5, r0
 80056c2:	b911      	cbnz	r1, 80056ca <sbrk_aligned+0x12>
 80056c4:	f000 f9e8 	bl	8005a98 <_sbrk_r>
 80056c8:	6030      	str	r0, [r6, #0]
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f9e3 	bl	8005a98 <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d00a      	beq.n	80056ec <sbrk_aligned+0x34>
 80056d6:	1cc4      	adds	r4, r0, #3
 80056d8:	f024 0403 	bic.w	r4, r4, #3
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d007      	beq.n	80056f0 <sbrk_aligned+0x38>
 80056e0:	1a21      	subs	r1, r4, r0
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f9d8 	bl	8005a98 <_sbrk_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d101      	bne.n	80056f0 <sbrk_aligned+0x38>
 80056ec:	f04f 34ff 	mov.w	r4, #4294967295
 80056f0:	4620      	mov	r0, r4
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	2000033c 	.word	0x2000033c

080056f8 <_malloc_r>:
 80056f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fc:	1ccd      	adds	r5, r1, #3
 80056fe:	f025 0503 	bic.w	r5, r5, #3
 8005702:	3508      	adds	r5, #8
 8005704:	2d0c      	cmp	r5, #12
 8005706:	bf38      	it	cc
 8005708:	250c      	movcc	r5, #12
 800570a:	2d00      	cmp	r5, #0
 800570c:	4607      	mov	r7, r0
 800570e:	db01      	blt.n	8005714 <_malloc_r+0x1c>
 8005710:	42a9      	cmp	r1, r5
 8005712:	d905      	bls.n	8005720 <_malloc_r+0x28>
 8005714:	230c      	movs	r3, #12
 8005716:	2600      	movs	r6, #0
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4630      	mov	r0, r6
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	4e2e      	ldr	r6, [pc, #184]	; (80057dc <_malloc_r+0xe4>)
 8005722:	f000 fa25 	bl	8005b70 <__malloc_lock>
 8005726:	6833      	ldr	r3, [r6, #0]
 8005728:	461c      	mov	r4, r3
 800572a:	bb34      	cbnz	r4, 800577a <_malloc_r+0x82>
 800572c:	4629      	mov	r1, r5
 800572e:	4638      	mov	r0, r7
 8005730:	f7ff ffc2 	bl	80056b8 <sbrk_aligned>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	4604      	mov	r4, r0
 8005738:	d14d      	bne.n	80057d6 <_malloc_r+0xde>
 800573a:	6834      	ldr	r4, [r6, #0]
 800573c:	4626      	mov	r6, r4
 800573e:	2e00      	cmp	r6, #0
 8005740:	d140      	bne.n	80057c4 <_malloc_r+0xcc>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	4631      	mov	r1, r6
 8005746:	4638      	mov	r0, r7
 8005748:	eb04 0803 	add.w	r8, r4, r3
 800574c:	f000 f9a4 	bl	8005a98 <_sbrk_r>
 8005750:	4580      	cmp	r8, r0
 8005752:	d13a      	bne.n	80057ca <_malloc_r+0xd2>
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	3503      	adds	r5, #3
 8005758:	1a6d      	subs	r5, r5, r1
 800575a:	f025 0503 	bic.w	r5, r5, #3
 800575e:	3508      	adds	r5, #8
 8005760:	2d0c      	cmp	r5, #12
 8005762:	bf38      	it	cc
 8005764:	250c      	movcc	r5, #12
 8005766:	4638      	mov	r0, r7
 8005768:	4629      	mov	r1, r5
 800576a:	f7ff ffa5 	bl	80056b8 <sbrk_aligned>
 800576e:	3001      	adds	r0, #1
 8005770:	d02b      	beq.n	80057ca <_malloc_r+0xd2>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	442b      	add	r3, r5
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	e00e      	b.n	8005798 <_malloc_r+0xa0>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	1b52      	subs	r2, r2, r5
 800577e:	d41e      	bmi.n	80057be <_malloc_r+0xc6>
 8005780:	2a0b      	cmp	r2, #11
 8005782:	d916      	bls.n	80057b2 <_malloc_r+0xba>
 8005784:	1961      	adds	r1, r4, r5
 8005786:	42a3      	cmp	r3, r4
 8005788:	6025      	str	r5, [r4, #0]
 800578a:	bf18      	it	ne
 800578c:	6059      	strne	r1, [r3, #4]
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	bf08      	it	eq
 8005792:	6031      	streq	r1, [r6, #0]
 8005794:	5162      	str	r2, [r4, r5]
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	4638      	mov	r0, r7
 800579a:	f104 060b 	add.w	r6, r4, #11
 800579e:	f000 f9ed 	bl	8005b7c <__malloc_unlock>
 80057a2:	f026 0607 	bic.w	r6, r6, #7
 80057a6:	1d23      	adds	r3, r4, #4
 80057a8:	1af2      	subs	r2, r6, r3
 80057aa:	d0b6      	beq.n	800571a <_malloc_r+0x22>
 80057ac:	1b9b      	subs	r3, r3, r6
 80057ae:	50a3      	str	r3, [r4, r2]
 80057b0:	e7b3      	b.n	800571a <_malloc_r+0x22>
 80057b2:	6862      	ldr	r2, [r4, #4]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	bf0c      	ite	eq
 80057b8:	6032      	streq	r2, [r6, #0]
 80057ba:	605a      	strne	r2, [r3, #4]
 80057bc:	e7ec      	b.n	8005798 <_malloc_r+0xa0>
 80057be:	4623      	mov	r3, r4
 80057c0:	6864      	ldr	r4, [r4, #4]
 80057c2:	e7b2      	b.n	800572a <_malloc_r+0x32>
 80057c4:	4634      	mov	r4, r6
 80057c6:	6876      	ldr	r6, [r6, #4]
 80057c8:	e7b9      	b.n	800573e <_malloc_r+0x46>
 80057ca:	230c      	movs	r3, #12
 80057cc:	4638      	mov	r0, r7
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	f000 f9d4 	bl	8005b7c <__malloc_unlock>
 80057d4:	e7a1      	b.n	800571a <_malloc_r+0x22>
 80057d6:	6025      	str	r5, [r4, #0]
 80057d8:	e7de      	b.n	8005798 <_malloc_r+0xa0>
 80057da:	bf00      	nop
 80057dc:	20000338 	.word	0x20000338

080057e0 <__ssputs_r>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	688e      	ldr	r6, [r1, #8]
 80057e6:	4682      	mov	sl, r0
 80057e8:	429e      	cmp	r6, r3
 80057ea:	460c      	mov	r4, r1
 80057ec:	4690      	mov	r8, r2
 80057ee:	461f      	mov	r7, r3
 80057f0:	d838      	bhi.n	8005864 <__ssputs_r+0x84>
 80057f2:	898a      	ldrh	r2, [r1, #12]
 80057f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057f8:	d032      	beq.n	8005860 <__ssputs_r+0x80>
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	6909      	ldr	r1, [r1, #16]
 80057fe:	3301      	adds	r3, #1
 8005800:	eba5 0901 	sub.w	r9, r5, r1
 8005804:	6965      	ldr	r5, [r4, #20]
 8005806:	444b      	add	r3, r9
 8005808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005810:	106d      	asrs	r5, r5, #1
 8005812:	429d      	cmp	r5, r3
 8005814:	bf38      	it	cc
 8005816:	461d      	movcc	r5, r3
 8005818:	0553      	lsls	r3, r2, #21
 800581a:	d531      	bpl.n	8005880 <__ssputs_r+0xa0>
 800581c:	4629      	mov	r1, r5
 800581e:	f7ff ff6b 	bl	80056f8 <_malloc_r>
 8005822:	4606      	mov	r6, r0
 8005824:	b950      	cbnz	r0, 800583c <__ssputs_r+0x5c>
 8005826:	230c      	movs	r3, #12
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	f8ca 3000 	str.w	r3, [sl]
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583c:	464a      	mov	r2, r9
 800583e:	6921      	ldr	r1, [r4, #16]
 8005840:	f7ff fb4e 	bl	8004ee0 <memcpy>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	6126      	str	r6, [r4, #16]
 8005852:	444e      	add	r6, r9
 8005854:	6026      	str	r6, [r4, #0]
 8005856:	463e      	mov	r6, r7
 8005858:	6165      	str	r5, [r4, #20]
 800585a:	eba5 0509 	sub.w	r5, r5, r9
 800585e:	60a5      	str	r5, [r4, #8]
 8005860:	42be      	cmp	r6, r7
 8005862:	d900      	bls.n	8005866 <__ssputs_r+0x86>
 8005864:	463e      	mov	r6, r7
 8005866:	4632      	mov	r2, r6
 8005868:	4641      	mov	r1, r8
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	f000 f966 	bl	8005b3c <memmove>
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	2000      	movs	r0, #0
 8005874:	1b9b      	subs	r3, r3, r6
 8005876:	60a3      	str	r3, [r4, #8]
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	4433      	add	r3, r6
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	e7db      	b.n	8005838 <__ssputs_r+0x58>
 8005880:	462a      	mov	r2, r5
 8005882:	f000 f981 	bl	8005b88 <_realloc_r>
 8005886:	4606      	mov	r6, r0
 8005888:	2800      	cmp	r0, #0
 800588a:	d1e1      	bne.n	8005850 <__ssputs_r+0x70>
 800588c:	4650      	mov	r0, sl
 800588e:	6921      	ldr	r1, [r4, #16]
 8005890:	f7ff feca 	bl	8005628 <_free_r>
 8005894:	e7c7      	b.n	8005826 <__ssputs_r+0x46>
	...

08005898 <_svfiprintf_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4698      	mov	r8, r3
 800589e:	898b      	ldrh	r3, [r1, #12]
 80058a0:	4607      	mov	r7, r0
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	460d      	mov	r5, r1
 80058a6:	4614      	mov	r4, r2
 80058a8:	b09d      	sub	sp, #116	; 0x74
 80058aa:	d50e      	bpl.n	80058ca <_svfiprintf_r+0x32>
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	b963      	cbnz	r3, 80058ca <_svfiprintf_r+0x32>
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	f7ff ff21 	bl	80056f8 <_malloc_r>
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	6128      	str	r0, [r5, #16]
 80058ba:	b920      	cbnz	r0, 80058c6 <_svfiprintf_r+0x2e>
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	e0d1      	b.n	8005a6a <_svfiprintf_r+0x1d2>
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	616b      	str	r3, [r5, #20]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9309      	str	r3, [sp, #36]	; 0x24
 80058ce:	2320      	movs	r3, #32
 80058d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d4:	2330      	movs	r3, #48	; 0x30
 80058d6:	f04f 0901 	mov.w	r9, #1
 80058da:	f8cd 800c 	str.w	r8, [sp, #12]
 80058de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a84 <_svfiprintf_r+0x1ec>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e6:	4623      	mov	r3, r4
 80058e8:	469a      	mov	sl, r3
 80058ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ee:	b10a      	cbz	r2, 80058f4 <_svfiprintf_r+0x5c>
 80058f0:	2a25      	cmp	r2, #37	; 0x25
 80058f2:	d1f9      	bne.n	80058e8 <_svfiprintf_r+0x50>
 80058f4:	ebba 0b04 	subs.w	fp, sl, r4
 80058f8:	d00b      	beq.n	8005912 <_svfiprintf_r+0x7a>
 80058fa:	465b      	mov	r3, fp
 80058fc:	4622      	mov	r2, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	4638      	mov	r0, r7
 8005902:	f7ff ff6d 	bl	80057e0 <__ssputs_r>
 8005906:	3001      	adds	r0, #1
 8005908:	f000 80aa 	beq.w	8005a60 <_svfiprintf_r+0x1c8>
 800590c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800590e:	445a      	add	r2, fp
 8005910:	9209      	str	r2, [sp, #36]	; 0x24
 8005912:	f89a 3000 	ldrb.w	r3, [sl]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80a2 	beq.w	8005a60 <_svfiprintf_r+0x1c8>
 800591c:	2300      	movs	r3, #0
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005926:	f10a 0a01 	add.w	sl, sl, #1
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005932:	931a      	str	r3, [sp, #104]	; 0x68
 8005934:	4654      	mov	r4, sl
 8005936:	2205      	movs	r2, #5
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	4851      	ldr	r0, [pc, #324]	; (8005a84 <_svfiprintf_r+0x1ec>)
 800593e:	f7ff fac1 	bl	8004ec4 <memchr>
 8005942:	9a04      	ldr	r2, [sp, #16]
 8005944:	b9d8      	cbnz	r0, 800597e <_svfiprintf_r+0xe6>
 8005946:	06d0      	lsls	r0, r2, #27
 8005948:	bf44      	itt	mi
 800594a:	2320      	movmi	r3, #32
 800594c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005950:	0711      	lsls	r1, r2, #28
 8005952:	bf44      	itt	mi
 8005954:	232b      	movmi	r3, #43	; 0x2b
 8005956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595a:	f89a 3000 	ldrb.w	r3, [sl]
 800595e:	2b2a      	cmp	r3, #42	; 0x2a
 8005960:	d015      	beq.n	800598e <_svfiprintf_r+0xf6>
 8005962:	4654      	mov	r4, sl
 8005964:	2000      	movs	r0, #0
 8005966:	f04f 0c0a 	mov.w	ip, #10
 800596a:	9a07      	ldr	r2, [sp, #28]
 800596c:	4621      	mov	r1, r4
 800596e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005972:	3b30      	subs	r3, #48	; 0x30
 8005974:	2b09      	cmp	r3, #9
 8005976:	d94e      	bls.n	8005a16 <_svfiprintf_r+0x17e>
 8005978:	b1b0      	cbz	r0, 80059a8 <_svfiprintf_r+0x110>
 800597a:	9207      	str	r2, [sp, #28]
 800597c:	e014      	b.n	80059a8 <_svfiprintf_r+0x110>
 800597e:	eba0 0308 	sub.w	r3, r0, r8
 8005982:	fa09 f303 	lsl.w	r3, r9, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	46a2      	mov	sl, r4
 800598a:	9304      	str	r3, [sp, #16]
 800598c:	e7d2      	b.n	8005934 <_svfiprintf_r+0x9c>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9103      	str	r1, [sp, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfbb      	ittet	lt
 800599a:	425b      	neglt	r3, r3
 800599c:	f042 0202 	orrlt.w	r2, r2, #2
 80059a0:	9307      	strge	r3, [sp, #28]
 80059a2:	9307      	strlt	r3, [sp, #28]
 80059a4:	bfb8      	it	lt
 80059a6:	9204      	strlt	r2, [sp, #16]
 80059a8:	7823      	ldrb	r3, [r4, #0]
 80059aa:	2b2e      	cmp	r3, #46	; 0x2e
 80059ac:	d10c      	bne.n	80059c8 <_svfiprintf_r+0x130>
 80059ae:	7863      	ldrb	r3, [r4, #1]
 80059b0:	2b2a      	cmp	r3, #42	; 0x2a
 80059b2:	d135      	bne.n	8005a20 <_svfiprintf_r+0x188>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	3402      	adds	r4, #2
 80059b8:	1d1a      	adds	r2, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a88 <_svfiprintf_r+0x1f0>
 80059cc:	2203      	movs	r2, #3
 80059ce:	4650      	mov	r0, sl
 80059d0:	7821      	ldrb	r1, [r4, #0]
 80059d2:	f7ff fa77 	bl	8004ec4 <memchr>
 80059d6:	b140      	cbz	r0, 80059ea <_svfiprintf_r+0x152>
 80059d8:	2340      	movs	r3, #64	; 0x40
 80059da:	eba0 000a 	sub.w	r0, r0, sl
 80059de:	fa03 f000 	lsl.w	r0, r3, r0
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	3401      	adds	r4, #1
 80059e6:	4303      	orrs	r3, r0
 80059e8:	9304      	str	r3, [sp, #16]
 80059ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ee:	2206      	movs	r2, #6
 80059f0:	4826      	ldr	r0, [pc, #152]	; (8005a8c <_svfiprintf_r+0x1f4>)
 80059f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f6:	f7ff fa65 	bl	8004ec4 <memchr>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d038      	beq.n	8005a70 <_svfiprintf_r+0x1d8>
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <_svfiprintf_r+0x1f8>)
 8005a00:	bb1b      	cbnz	r3, 8005a4a <_svfiprintf_r+0x1b2>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	3307      	adds	r3, #7
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	9303      	str	r3, [sp, #12]
 8005a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a10:	4433      	add	r3, r6
 8005a12:	9309      	str	r3, [sp, #36]	; 0x24
 8005a14:	e767      	b.n	80058e6 <_svfiprintf_r+0x4e>
 8005a16:	460c      	mov	r4, r1
 8005a18:	2001      	movs	r0, #1
 8005a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1e:	e7a5      	b.n	800596c <_svfiprintf_r+0xd4>
 8005a20:	2300      	movs	r3, #0
 8005a22:	f04f 0c0a 	mov.w	ip, #10
 8005a26:	4619      	mov	r1, r3
 8005a28:	3401      	adds	r4, #1
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a32:	3a30      	subs	r2, #48	; 0x30
 8005a34:	2a09      	cmp	r2, #9
 8005a36:	d903      	bls.n	8005a40 <_svfiprintf_r+0x1a8>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0c5      	beq.n	80059c8 <_svfiprintf_r+0x130>
 8005a3c:	9105      	str	r1, [sp, #20]
 8005a3e:	e7c3      	b.n	80059c8 <_svfiprintf_r+0x130>
 8005a40:	4604      	mov	r4, r0
 8005a42:	2301      	movs	r3, #1
 8005a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a48:	e7f0      	b.n	8005a2c <_svfiprintf_r+0x194>
 8005a4a:	ab03      	add	r3, sp, #12
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4638      	mov	r0, r7
 8005a52:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <_svfiprintf_r+0x1fc>)
 8005a54:	a904      	add	r1, sp, #16
 8005a56:	f7fd ffcb 	bl	80039f0 <_printf_float>
 8005a5a:	1c42      	adds	r2, r0, #1
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	d1d6      	bne.n	8005a0e <_svfiprintf_r+0x176>
 8005a60:	89ab      	ldrh	r3, [r5, #12]
 8005a62:	065b      	lsls	r3, r3, #25
 8005a64:	f53f af2c 	bmi.w	80058c0 <_svfiprintf_r+0x28>
 8005a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6a:	b01d      	add	sp, #116	; 0x74
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	ab03      	add	r3, sp, #12
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	462a      	mov	r2, r5
 8005a76:	4638      	mov	r0, r7
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <_svfiprintf_r+0x1fc>)
 8005a7a:	a904      	add	r1, sp, #16
 8005a7c:	f7fe fa54 	bl	8003f28 <_printf_i>
 8005a80:	e7eb      	b.n	8005a5a <_svfiprintf_r+0x1c2>
 8005a82:	bf00      	nop
 8005a84:	08006954 	.word	0x08006954
 8005a88:	0800695a 	.word	0x0800695a
 8005a8c:	0800695e 	.word	0x0800695e
 8005a90:	080039f1 	.word	0x080039f1
 8005a94:	080057e1 	.word	0x080057e1

08005a98 <_sbrk_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	4d05      	ldr	r5, [pc, #20]	; (8005ab4 <_sbrk_r+0x1c>)
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fb ff42 	bl	800192c <_sbrk>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_sbrk_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_sbrk_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000340 	.word	0x20000340

08005ab8 <__assert_func>:
 8005ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aba:	4614      	mov	r4, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <__assert_func+0x2c>)
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68d8      	ldr	r0, [r3, #12]
 8005ac6:	b14c      	cbz	r4, 8005adc <__assert_func+0x24>
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <__assert_func+0x30>)
 8005aca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ace:	9100      	str	r1, [sp, #0]
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	4906      	ldr	r1, [pc, #24]	; (8005aec <__assert_func+0x34>)
 8005ad4:	f000 f80e 	bl	8005af4 <fiprintf>
 8005ad8:	f000 faaa 	bl	8006030 <abort>
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <__assert_func+0x38>)
 8005ade:	461c      	mov	r4, r3
 8005ae0:	e7f3      	b.n	8005aca <__assert_func+0x12>
 8005ae2:	bf00      	nop
 8005ae4:	2000000c 	.word	0x2000000c
 8005ae8:	08006965 	.word	0x08006965
 8005aec:	08006972 	.word	0x08006972
 8005af0:	080069a0 	.word	0x080069a0

08005af4 <fiprintf>:
 8005af4:	b40e      	push	{r1, r2, r3}
 8005af6:	b503      	push	{r0, r1, lr}
 8005af8:	4601      	mov	r1, r0
 8005afa:	ab03      	add	r3, sp, #12
 8005afc:	4805      	ldr	r0, [pc, #20]	; (8005b14 <fiprintf+0x20>)
 8005afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b02:	6800      	ldr	r0, [r0, #0]
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	f000 f895 	bl	8005c34 <_vfiprintf_r>
 8005b0a:	b002      	add	sp, #8
 8005b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b10:	b003      	add	sp, #12
 8005b12:	4770      	bx	lr
 8005b14:	2000000c 	.word	0x2000000c

08005b18 <__ascii_mbtowc>:
 8005b18:	b082      	sub	sp, #8
 8005b1a:	b901      	cbnz	r1, 8005b1e <__ascii_mbtowc+0x6>
 8005b1c:	a901      	add	r1, sp, #4
 8005b1e:	b142      	cbz	r2, 8005b32 <__ascii_mbtowc+0x1a>
 8005b20:	b14b      	cbz	r3, 8005b36 <__ascii_mbtowc+0x1e>
 8005b22:	7813      	ldrb	r3, [r2, #0]
 8005b24:	600b      	str	r3, [r1, #0]
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	1e10      	subs	r0, r2, #0
 8005b2a:	bf18      	it	ne
 8005b2c:	2001      	movne	r0, #1
 8005b2e:	b002      	add	sp, #8
 8005b30:	4770      	bx	lr
 8005b32:	4610      	mov	r0, r2
 8005b34:	e7fb      	b.n	8005b2e <__ascii_mbtowc+0x16>
 8005b36:	f06f 0001 	mvn.w	r0, #1
 8005b3a:	e7f8      	b.n	8005b2e <__ascii_mbtowc+0x16>

08005b3c <memmove>:
 8005b3c:	4288      	cmp	r0, r1
 8005b3e:	b510      	push	{r4, lr}
 8005b40:	eb01 0402 	add.w	r4, r1, r2
 8005b44:	d902      	bls.n	8005b4c <memmove+0x10>
 8005b46:	4284      	cmp	r4, r0
 8005b48:	4623      	mov	r3, r4
 8005b4a:	d807      	bhi.n	8005b5c <memmove+0x20>
 8005b4c:	1e43      	subs	r3, r0, #1
 8005b4e:	42a1      	cmp	r1, r4
 8005b50:	d008      	beq.n	8005b64 <memmove+0x28>
 8005b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b5a:	e7f8      	b.n	8005b4e <memmove+0x12>
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4402      	add	r2, r0
 8005b60:	428a      	cmp	r2, r1
 8005b62:	d100      	bne.n	8005b66 <memmove+0x2a>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b6e:	e7f7      	b.n	8005b60 <memmove+0x24>

08005b70 <__malloc_lock>:
 8005b70:	4801      	ldr	r0, [pc, #4]	; (8005b78 <__malloc_lock+0x8>)
 8005b72:	f000 bc19 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8005b76:	bf00      	nop
 8005b78:	20000344 	.word	0x20000344

08005b7c <__malloc_unlock>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__malloc_unlock+0x8>)
 8005b7e:	f000 bc14 	b.w	80063aa <__retarget_lock_release_recursive>
 8005b82:	bf00      	nop
 8005b84:	20000344 	.word	0x20000344

08005b88 <_realloc_r>:
 8005b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	4614      	mov	r4, r2
 8005b90:	460e      	mov	r6, r1
 8005b92:	b921      	cbnz	r1, 8005b9e <_realloc_r+0x16>
 8005b94:	4611      	mov	r1, r2
 8005b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	f7ff bdad 	b.w	80056f8 <_malloc_r>
 8005b9e:	b92a      	cbnz	r2, 8005bac <_realloc_r+0x24>
 8005ba0:	f7ff fd42 	bl	8005628 <_free_r>
 8005ba4:	4625      	mov	r5, r4
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bac:	f000 fc64 	bl	8006478 <_malloc_usable_size_r>
 8005bb0:	4284      	cmp	r4, r0
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	d802      	bhi.n	8005bbc <_realloc_r+0x34>
 8005bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bba:	d812      	bhi.n	8005be2 <_realloc_r+0x5a>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff fd9a 	bl	80056f8 <_malloc_r>
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d0ed      	beq.n	8005ba6 <_realloc_r+0x1e>
 8005bca:	42bc      	cmp	r4, r7
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4631      	mov	r1, r6
 8005bd0:	bf28      	it	cs
 8005bd2:	463a      	movcs	r2, r7
 8005bd4:	f7ff f984 	bl	8004ee0 <memcpy>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f7ff fd24 	bl	8005628 <_free_r>
 8005be0:	e7e1      	b.n	8005ba6 <_realloc_r+0x1e>
 8005be2:	4635      	mov	r5, r6
 8005be4:	e7df      	b.n	8005ba6 <_realloc_r+0x1e>

08005be6 <__sfputc_r>:
 8005be6:	6893      	ldr	r3, [r2, #8]
 8005be8:	b410      	push	{r4}
 8005bea:	3b01      	subs	r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	6093      	str	r3, [r2, #8]
 8005bf0:	da07      	bge.n	8005c02 <__sfputc_r+0x1c>
 8005bf2:	6994      	ldr	r4, [r2, #24]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	db01      	blt.n	8005bfc <__sfputc_r+0x16>
 8005bf8:	290a      	cmp	r1, #10
 8005bfa:	d102      	bne.n	8005c02 <__sfputc_r+0x1c>
 8005bfc:	bc10      	pop	{r4}
 8005bfe:	f000 b949 	b.w	8005e94 <__swbuf_r>
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	1c58      	adds	r0, r3, #1
 8005c06:	6010      	str	r0, [r2, #0]
 8005c08:	7019      	strb	r1, [r3, #0]
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	bc10      	pop	{r4}
 8005c0e:	4770      	bx	lr

08005c10 <__sfputs_r>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	4614      	mov	r4, r2
 8005c18:	18d5      	adds	r5, r2, r3
 8005c1a:	42ac      	cmp	r4, r5
 8005c1c:	d101      	bne.n	8005c22 <__sfputs_r+0x12>
 8005c1e:	2000      	movs	r0, #0
 8005c20:	e007      	b.n	8005c32 <__sfputs_r+0x22>
 8005c22:	463a      	mov	r2, r7
 8005c24:	4630      	mov	r0, r6
 8005c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2a:	f7ff ffdc 	bl	8005be6 <__sfputc_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d1f3      	bne.n	8005c1a <__sfputs_r+0xa>
 8005c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c34 <_vfiprintf_r>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	460d      	mov	r5, r1
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	4698      	mov	r8, r3
 8005c3e:	4606      	mov	r6, r0
 8005c40:	b09d      	sub	sp, #116	; 0x74
 8005c42:	b118      	cbz	r0, 8005c4c <_vfiprintf_r+0x18>
 8005c44:	6983      	ldr	r3, [r0, #24]
 8005c46:	b90b      	cbnz	r3, 8005c4c <_vfiprintf_r+0x18>
 8005c48:	f000 fb10 	bl	800626c <__sinit>
 8005c4c:	4b89      	ldr	r3, [pc, #548]	; (8005e74 <_vfiprintf_r+0x240>)
 8005c4e:	429d      	cmp	r5, r3
 8005c50:	d11b      	bne.n	8005c8a <_vfiprintf_r+0x56>
 8005c52:	6875      	ldr	r5, [r6, #4]
 8005c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c56:	07d9      	lsls	r1, r3, #31
 8005c58:	d405      	bmi.n	8005c66 <_vfiprintf_r+0x32>
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	059a      	lsls	r2, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_vfiprintf_r+0x32>
 8005c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c62:	f000 fba1 	bl	80063a8 <__retarget_lock_acquire_recursive>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	071b      	lsls	r3, r3, #28
 8005c6a:	d501      	bpl.n	8005c70 <_vfiprintf_r+0x3c>
 8005c6c:	692b      	ldr	r3, [r5, #16]
 8005c6e:	b9eb      	cbnz	r3, 8005cac <_vfiprintf_r+0x78>
 8005c70:	4629      	mov	r1, r5
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 f96e 	bl	8005f54 <__swsetup_r>
 8005c78:	b1c0      	cbz	r0, 8005cac <_vfiprintf_r+0x78>
 8005c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c7c:	07dc      	lsls	r4, r3, #31
 8005c7e:	d50e      	bpl.n	8005c9e <_vfiprintf_r+0x6a>
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	b01d      	add	sp, #116	; 0x74
 8005c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8a:	4b7b      	ldr	r3, [pc, #492]	; (8005e78 <_vfiprintf_r+0x244>)
 8005c8c:	429d      	cmp	r5, r3
 8005c8e:	d101      	bne.n	8005c94 <_vfiprintf_r+0x60>
 8005c90:	68b5      	ldr	r5, [r6, #8]
 8005c92:	e7df      	b.n	8005c54 <_vfiprintf_r+0x20>
 8005c94:	4b79      	ldr	r3, [pc, #484]	; (8005e7c <_vfiprintf_r+0x248>)
 8005c96:	429d      	cmp	r5, r3
 8005c98:	bf08      	it	eq
 8005c9a:	68f5      	ldreq	r5, [r6, #12]
 8005c9c:	e7da      	b.n	8005c54 <_vfiprintf_r+0x20>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	0598      	lsls	r0, r3, #22
 8005ca2:	d4ed      	bmi.n	8005c80 <_vfiprintf_r+0x4c>
 8005ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ca6:	f000 fb80 	bl	80063aa <__retarget_lock_release_recursive>
 8005caa:	e7e9      	b.n	8005c80 <_vfiprintf_r+0x4c>
 8005cac:	2300      	movs	r3, #0
 8005cae:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cb6:	2330      	movs	r3, #48	; 0x30
 8005cb8:	f04f 0901 	mov.w	r9, #1
 8005cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e80 <_vfiprintf_r+0x24c>
 8005cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc8:	4623      	mov	r3, r4
 8005cca:	469a      	mov	sl, r3
 8005ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd0:	b10a      	cbz	r2, 8005cd6 <_vfiprintf_r+0xa2>
 8005cd2:	2a25      	cmp	r2, #37	; 0x25
 8005cd4:	d1f9      	bne.n	8005cca <_vfiprintf_r+0x96>
 8005cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cda:	d00b      	beq.n	8005cf4 <_vfiprintf_r+0xc0>
 8005cdc:	465b      	mov	r3, fp
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7ff ff94 	bl	8005c10 <__sfputs_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	f000 80aa 	beq.w	8005e42 <_vfiprintf_r+0x20e>
 8005cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf0:	445a      	add	r2, fp
 8005cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80a2 	beq.w	8005e42 <_vfiprintf_r+0x20e>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295
 8005d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d08:	f10a 0a01 	add.w	sl, sl, #1
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	9307      	str	r3, [sp, #28]
 8005d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d14:	931a      	str	r3, [sp, #104]	; 0x68
 8005d16:	4654      	mov	r4, sl
 8005d18:	2205      	movs	r2, #5
 8005d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1e:	4858      	ldr	r0, [pc, #352]	; (8005e80 <_vfiprintf_r+0x24c>)
 8005d20:	f7ff f8d0 	bl	8004ec4 <memchr>
 8005d24:	9a04      	ldr	r2, [sp, #16]
 8005d26:	b9d8      	cbnz	r0, 8005d60 <_vfiprintf_r+0x12c>
 8005d28:	06d1      	lsls	r1, r2, #27
 8005d2a:	bf44      	itt	mi
 8005d2c:	2320      	movmi	r3, #32
 8005d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d32:	0713      	lsls	r3, r2, #28
 8005d34:	bf44      	itt	mi
 8005d36:	232b      	movmi	r3, #43	; 0x2b
 8005d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d40:	2b2a      	cmp	r3, #42	; 0x2a
 8005d42:	d015      	beq.n	8005d70 <_vfiprintf_r+0x13c>
 8005d44:	4654      	mov	r4, sl
 8005d46:	2000      	movs	r0, #0
 8005d48:	f04f 0c0a 	mov.w	ip, #10
 8005d4c:	9a07      	ldr	r2, [sp, #28]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d54:	3b30      	subs	r3, #48	; 0x30
 8005d56:	2b09      	cmp	r3, #9
 8005d58:	d94e      	bls.n	8005df8 <_vfiprintf_r+0x1c4>
 8005d5a:	b1b0      	cbz	r0, 8005d8a <_vfiprintf_r+0x156>
 8005d5c:	9207      	str	r2, [sp, #28]
 8005d5e:	e014      	b.n	8005d8a <_vfiprintf_r+0x156>
 8005d60:	eba0 0308 	sub.w	r3, r0, r8
 8005d64:	fa09 f303 	lsl.w	r3, r9, r3
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	46a2      	mov	sl, r4
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	e7d2      	b.n	8005d16 <_vfiprintf_r+0xe2>
 8005d70:	9b03      	ldr	r3, [sp, #12]
 8005d72:	1d19      	adds	r1, r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	9103      	str	r1, [sp, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bfbb      	ittet	lt
 8005d7c:	425b      	neglt	r3, r3
 8005d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d82:	9307      	strge	r3, [sp, #28]
 8005d84:	9307      	strlt	r3, [sp, #28]
 8005d86:	bfb8      	it	lt
 8005d88:	9204      	strlt	r2, [sp, #16]
 8005d8a:	7823      	ldrb	r3, [r4, #0]
 8005d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d8e:	d10c      	bne.n	8005daa <_vfiprintf_r+0x176>
 8005d90:	7863      	ldrb	r3, [r4, #1]
 8005d92:	2b2a      	cmp	r3, #42	; 0x2a
 8005d94:	d135      	bne.n	8005e02 <_vfiprintf_r+0x1ce>
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	3402      	adds	r4, #2
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	9203      	str	r2, [sp, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bfb8      	it	lt
 8005da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005e84 <_vfiprintf_r+0x250>
 8005dae:	2203      	movs	r2, #3
 8005db0:	4650      	mov	r0, sl
 8005db2:	7821      	ldrb	r1, [r4, #0]
 8005db4:	f7ff f886 	bl	8004ec4 <memchr>
 8005db8:	b140      	cbz	r0, 8005dcc <_vfiprintf_r+0x198>
 8005dba:	2340      	movs	r3, #64	; 0x40
 8005dbc:	eba0 000a 	sub.w	r0, r0, sl
 8005dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc4:	9b04      	ldr	r3, [sp, #16]
 8005dc6:	3401      	adds	r4, #1
 8005dc8:	4303      	orrs	r3, r0
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd0:	2206      	movs	r2, #6
 8005dd2:	482d      	ldr	r0, [pc, #180]	; (8005e88 <_vfiprintf_r+0x254>)
 8005dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd8:	f7ff f874 	bl	8004ec4 <memchr>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d03f      	beq.n	8005e60 <_vfiprintf_r+0x22c>
 8005de0:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <_vfiprintf_r+0x258>)
 8005de2:	bb1b      	cbnz	r3, 8005e2c <_vfiprintf_r+0x1f8>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	3307      	adds	r3, #7
 8005de8:	f023 0307 	bic.w	r3, r3, #7
 8005dec:	3308      	adds	r3, #8
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	443b      	add	r3, r7
 8005df4:	9309      	str	r3, [sp, #36]	; 0x24
 8005df6:	e767      	b.n	8005cc8 <_vfiprintf_r+0x94>
 8005df8:	460c      	mov	r4, r1
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e00:	e7a5      	b.n	8005d4e <_vfiprintf_r+0x11a>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f04f 0c0a 	mov.w	ip, #10
 8005e08:	4619      	mov	r1, r3
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	9305      	str	r3, [sp, #20]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e14:	3a30      	subs	r2, #48	; 0x30
 8005e16:	2a09      	cmp	r2, #9
 8005e18:	d903      	bls.n	8005e22 <_vfiprintf_r+0x1ee>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c5      	beq.n	8005daa <_vfiprintf_r+0x176>
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	e7c3      	b.n	8005daa <_vfiprintf_r+0x176>
 8005e22:	4604      	mov	r4, r0
 8005e24:	2301      	movs	r3, #1
 8005e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e2a:	e7f0      	b.n	8005e0e <_vfiprintf_r+0x1da>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4630      	mov	r0, r6
 8005e34:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <_vfiprintf_r+0x25c>)
 8005e36:	a904      	add	r1, sp, #16
 8005e38:	f7fd fdda 	bl	80039f0 <_printf_float>
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	1c78      	adds	r0, r7, #1
 8005e40:	d1d6      	bne.n	8005df0 <_vfiprintf_r+0x1bc>
 8005e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e44:	07d9      	lsls	r1, r3, #31
 8005e46:	d405      	bmi.n	8005e54 <_vfiprintf_r+0x220>
 8005e48:	89ab      	ldrh	r3, [r5, #12]
 8005e4a:	059a      	lsls	r2, r3, #22
 8005e4c:	d402      	bmi.n	8005e54 <_vfiprintf_r+0x220>
 8005e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e50:	f000 faab 	bl	80063aa <__retarget_lock_release_recursive>
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	065b      	lsls	r3, r3, #25
 8005e58:	f53f af12 	bmi.w	8005c80 <_vfiprintf_r+0x4c>
 8005e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e5e:	e711      	b.n	8005c84 <_vfiprintf_r+0x50>
 8005e60:	ab03      	add	r3, sp, #12
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	462a      	mov	r2, r5
 8005e66:	4630      	mov	r0, r6
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <_vfiprintf_r+0x25c>)
 8005e6a:	a904      	add	r1, sp, #16
 8005e6c:	f7fe f85c 	bl	8003f28 <_printf_i>
 8005e70:	e7e4      	b.n	8005e3c <_vfiprintf_r+0x208>
 8005e72:	bf00      	nop
 8005e74:	08006acc 	.word	0x08006acc
 8005e78:	08006aec 	.word	0x08006aec
 8005e7c:	08006aac 	.word	0x08006aac
 8005e80:	08006954 	.word	0x08006954
 8005e84:	0800695a 	.word	0x0800695a
 8005e88:	0800695e 	.word	0x0800695e
 8005e8c:	080039f1 	.word	0x080039f1
 8005e90:	08005c11 	.word	0x08005c11

08005e94 <__swbuf_r>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	460e      	mov	r6, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	b118      	cbz	r0, 8005ea6 <__swbuf_r+0x12>
 8005e9e:	6983      	ldr	r3, [r0, #24]
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <__swbuf_r+0x12>
 8005ea2:	f000 f9e3 	bl	800626c <__sinit>
 8005ea6:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <__swbuf_r+0x98>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	d12b      	bne.n	8005f04 <__swbuf_r+0x70>
 8005eac:	686c      	ldr	r4, [r5, #4]
 8005eae:	69a3      	ldr	r3, [r4, #24]
 8005eb0:	60a3      	str	r3, [r4, #8]
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	071a      	lsls	r2, r3, #28
 8005eb6:	d52f      	bpl.n	8005f18 <__swbuf_r+0x84>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	b36b      	cbz	r3, 8005f18 <__swbuf_r+0x84>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	6820      	ldr	r0, [r4, #0]
 8005ec0:	b2f6      	uxtb	r6, r6
 8005ec2:	1ac0      	subs	r0, r0, r3
 8005ec4:	6963      	ldr	r3, [r4, #20]
 8005ec6:	4637      	mov	r7, r6
 8005ec8:	4283      	cmp	r3, r0
 8005eca:	dc04      	bgt.n	8005ed6 <__swbuf_r+0x42>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f938 	bl	8006144 <_fflush_r>
 8005ed4:	bb30      	cbnz	r0, 8005f24 <__swbuf_r+0x90>
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	3001      	adds	r0, #1
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	6022      	str	r2, [r4, #0]
 8005ee4:	701e      	strb	r6, [r3, #0]
 8005ee6:	6963      	ldr	r3, [r4, #20]
 8005ee8:	4283      	cmp	r3, r0
 8005eea:	d004      	beq.n	8005ef6 <__swbuf_r+0x62>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	07db      	lsls	r3, r3, #31
 8005ef0:	d506      	bpl.n	8005f00 <__swbuf_r+0x6c>
 8005ef2:	2e0a      	cmp	r6, #10
 8005ef4:	d104      	bne.n	8005f00 <__swbuf_r+0x6c>
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 f923 	bl	8006144 <_fflush_r>
 8005efe:	b988      	cbnz	r0, 8005f24 <__swbuf_r+0x90>
 8005f00:	4638      	mov	r0, r7
 8005f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <__swbuf_r+0x9c>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d101      	bne.n	8005f0e <__swbuf_r+0x7a>
 8005f0a:	68ac      	ldr	r4, [r5, #8]
 8005f0c:	e7cf      	b.n	8005eae <__swbuf_r+0x1a>
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <__swbuf_r+0xa0>)
 8005f10:	429c      	cmp	r4, r3
 8005f12:	bf08      	it	eq
 8005f14:	68ec      	ldreq	r4, [r5, #12]
 8005f16:	e7ca      	b.n	8005eae <__swbuf_r+0x1a>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 f81a 	bl	8005f54 <__swsetup_r>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d0cb      	beq.n	8005ebc <__swbuf_r+0x28>
 8005f24:	f04f 37ff 	mov.w	r7, #4294967295
 8005f28:	e7ea      	b.n	8005f00 <__swbuf_r+0x6c>
 8005f2a:	bf00      	nop
 8005f2c:	08006acc 	.word	0x08006acc
 8005f30:	08006aec 	.word	0x08006aec
 8005f34:	08006aac 	.word	0x08006aac

08005f38 <__ascii_wctomb>:
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	b141      	cbz	r1, 8005f50 <__ascii_wctomb+0x18>
 8005f3e:	2aff      	cmp	r2, #255	; 0xff
 8005f40:	d904      	bls.n	8005f4c <__ascii_wctomb+0x14>
 8005f42:	228a      	movs	r2, #138	; 0x8a
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	4770      	bx	lr
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	700a      	strb	r2, [r1, #0]
 8005f50:	4770      	bx	lr
	...

08005f54 <__swsetup_r>:
 8005f54:	4b32      	ldr	r3, [pc, #200]	; (8006020 <__swsetup_r+0xcc>)
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b125      	cbz	r5, 8005f6a <__swsetup_r+0x16>
 8005f60:	69ab      	ldr	r3, [r5, #24]
 8005f62:	b913      	cbnz	r3, 8005f6a <__swsetup_r+0x16>
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 f981 	bl	800626c <__sinit>
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <__swsetup_r+0xd0>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d10f      	bne.n	8005f90 <__swsetup_r+0x3c>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f78:	0719      	lsls	r1, r3, #28
 8005f7a:	d42c      	bmi.n	8005fd6 <__swsetup_r+0x82>
 8005f7c:	06dd      	lsls	r5, r3, #27
 8005f7e:	d411      	bmi.n	8005fa4 <__swsetup_r+0x50>
 8005f80:	2309      	movs	r3, #9
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	e03e      	b.n	800600e <__swsetup_r+0xba>
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <__swsetup_r+0xd4>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <__swsetup_r+0x46>
 8005f96:	68ac      	ldr	r4, [r5, #8]
 8005f98:	e7eb      	b.n	8005f72 <__swsetup_r+0x1e>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <__swsetup_r+0xd8>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68ec      	ldreq	r4, [r5, #12]
 8005fa2:	e7e6      	b.n	8005f72 <__swsetup_r+0x1e>
 8005fa4:	0758      	lsls	r0, r3, #29
 8005fa6:	d512      	bpl.n	8005fce <__swsetup_r+0x7a>
 8005fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005faa:	b141      	cbz	r1, 8005fbe <__swsetup_r+0x6a>
 8005fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d002      	beq.n	8005fba <__swsetup_r+0x66>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7ff fb37 	bl	8005628 <_free_r>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	b94b      	cbnz	r3, 8005fee <__swsetup_r+0x9a>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d003      	beq.n	8005fee <__swsetup_r+0x9a>
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f000 fa05 	bl	80063f8 <__smakebuf_r>
 8005fee:	89a0      	ldrh	r0, [r4, #12]
 8005ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff4:	f010 0301 	ands.w	r3, r0, #1
 8005ff8:	d00a      	beq.n	8006010 <__swsetup_r+0xbc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	6963      	ldr	r3, [r4, #20]
 8006000:	425b      	negs	r3, r3
 8006002:	61a3      	str	r3, [r4, #24]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	b943      	cbnz	r3, 800601a <__swsetup_r+0xc6>
 8006008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800600c:	d1ba      	bne.n	8005f84 <__swsetup_r+0x30>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	0781      	lsls	r1, r0, #30
 8006012:	bf58      	it	pl
 8006014:	6963      	ldrpl	r3, [r4, #20]
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	e7f4      	b.n	8006004 <__swsetup_r+0xb0>
 800601a:	2000      	movs	r0, #0
 800601c:	e7f7      	b.n	800600e <__swsetup_r+0xba>
 800601e:	bf00      	nop
 8006020:	2000000c 	.word	0x2000000c
 8006024:	08006acc 	.word	0x08006acc
 8006028:	08006aec 	.word	0x08006aec
 800602c:	08006aac 	.word	0x08006aac

08006030 <abort>:
 8006030:	2006      	movs	r0, #6
 8006032:	b508      	push	{r3, lr}
 8006034:	f000 fa50 	bl	80064d8 <raise>
 8006038:	2001      	movs	r0, #1
 800603a:	f7fb fc04 	bl	8001846 <_exit>
	...

08006040 <__sflush_r>:
 8006040:	898a      	ldrh	r2, [r1, #12]
 8006042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006044:	4605      	mov	r5, r0
 8006046:	0710      	lsls	r0, r2, #28
 8006048:	460c      	mov	r4, r1
 800604a:	d457      	bmi.n	80060fc <__sflush_r+0xbc>
 800604c:	684b      	ldr	r3, [r1, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc04      	bgt.n	800605c <__sflush_r+0x1c>
 8006052:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	dc01      	bgt.n	800605c <__sflush_r+0x1c>
 8006058:	2000      	movs	r0, #0
 800605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800605e:	2e00      	cmp	r6, #0
 8006060:	d0fa      	beq.n	8006058 <__sflush_r+0x18>
 8006062:	2300      	movs	r3, #0
 8006064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006068:	682f      	ldr	r7, [r5, #0]
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	d032      	beq.n	80060d4 <__sflush_r+0x94>
 800606e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	075a      	lsls	r2, r3, #29
 8006074:	d505      	bpl.n	8006082 <__sflush_r+0x42>
 8006076:	6863      	ldr	r3, [r4, #4]
 8006078:	1ac0      	subs	r0, r0, r3
 800607a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800607c:	b10b      	cbz	r3, 8006082 <__sflush_r+0x42>
 800607e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006080:	1ac0      	subs	r0, r0, r3
 8006082:	2300      	movs	r3, #0
 8006084:	4602      	mov	r2, r0
 8006086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006088:	4628      	mov	r0, r5
 800608a:	6a21      	ldr	r1, [r4, #32]
 800608c:	47b0      	blx	r6
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	d106      	bne.n	80060a2 <__sflush_r+0x62>
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	291d      	cmp	r1, #29
 8006098:	d82c      	bhi.n	80060f4 <__sflush_r+0xb4>
 800609a:	4a29      	ldr	r2, [pc, #164]	; (8006140 <__sflush_r+0x100>)
 800609c:	40ca      	lsrs	r2, r1
 800609e:	07d6      	lsls	r6, r2, #31
 80060a0:	d528      	bpl.n	80060f4 <__sflush_r+0xb4>
 80060a2:	2200      	movs	r2, #0
 80060a4:	6062      	str	r2, [r4, #4]
 80060a6:	6922      	ldr	r2, [r4, #16]
 80060a8:	04d9      	lsls	r1, r3, #19
 80060aa:	6022      	str	r2, [r4, #0]
 80060ac:	d504      	bpl.n	80060b8 <__sflush_r+0x78>
 80060ae:	1c42      	adds	r2, r0, #1
 80060b0:	d101      	bne.n	80060b6 <__sflush_r+0x76>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	b903      	cbnz	r3, 80060b8 <__sflush_r+0x78>
 80060b6:	6560      	str	r0, [r4, #84]	; 0x54
 80060b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ba:	602f      	str	r7, [r5, #0]
 80060bc:	2900      	cmp	r1, #0
 80060be:	d0cb      	beq.n	8006058 <__sflush_r+0x18>
 80060c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c4:	4299      	cmp	r1, r3
 80060c6:	d002      	beq.n	80060ce <__sflush_r+0x8e>
 80060c8:	4628      	mov	r0, r5
 80060ca:	f7ff faad 	bl	8005628 <_free_r>
 80060ce:	2000      	movs	r0, #0
 80060d0:	6360      	str	r0, [r4, #52]	; 0x34
 80060d2:	e7c2      	b.n	800605a <__sflush_r+0x1a>
 80060d4:	6a21      	ldr	r1, [r4, #32]
 80060d6:	2301      	movs	r3, #1
 80060d8:	4628      	mov	r0, r5
 80060da:	47b0      	blx	r6
 80060dc:	1c41      	adds	r1, r0, #1
 80060de:	d1c7      	bne.n	8006070 <__sflush_r+0x30>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0c4      	beq.n	8006070 <__sflush_r+0x30>
 80060e6:	2b1d      	cmp	r3, #29
 80060e8:	d001      	beq.n	80060ee <__sflush_r+0xae>
 80060ea:	2b16      	cmp	r3, #22
 80060ec:	d101      	bne.n	80060f2 <__sflush_r+0xb2>
 80060ee:	602f      	str	r7, [r5, #0]
 80060f0:	e7b2      	b.n	8006058 <__sflush_r+0x18>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	e7ae      	b.n	800605a <__sflush_r+0x1a>
 80060fc:	690f      	ldr	r7, [r1, #16]
 80060fe:	2f00      	cmp	r7, #0
 8006100:	d0aa      	beq.n	8006058 <__sflush_r+0x18>
 8006102:	0793      	lsls	r3, r2, #30
 8006104:	bf18      	it	ne
 8006106:	2300      	movne	r3, #0
 8006108:	680e      	ldr	r6, [r1, #0]
 800610a:	bf08      	it	eq
 800610c:	694b      	ldreq	r3, [r1, #20]
 800610e:	1bf6      	subs	r6, r6, r7
 8006110:	600f      	str	r7, [r1, #0]
 8006112:	608b      	str	r3, [r1, #8]
 8006114:	2e00      	cmp	r6, #0
 8006116:	dd9f      	ble.n	8006058 <__sflush_r+0x18>
 8006118:	4633      	mov	r3, r6
 800611a:	463a      	mov	r2, r7
 800611c:	4628      	mov	r0, r5
 800611e:	6a21      	ldr	r1, [r4, #32]
 8006120:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006124:	47e0      	blx	ip
 8006126:	2800      	cmp	r0, #0
 8006128:	dc06      	bgt.n	8006138 <__sflush_r+0xf8>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	e790      	b.n	800605a <__sflush_r+0x1a>
 8006138:	4407      	add	r7, r0
 800613a:	1a36      	subs	r6, r6, r0
 800613c:	e7ea      	b.n	8006114 <__sflush_r+0xd4>
 800613e:	bf00      	nop
 8006140:	20400001 	.word	0x20400001

08006144 <_fflush_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4605      	mov	r5, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b913      	cbnz	r3, 8006154 <_fflush_r+0x10>
 800614e:	2500      	movs	r5, #0
 8006150:	4628      	mov	r0, r5
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	b118      	cbz	r0, 800615e <_fflush_r+0x1a>
 8006156:	6983      	ldr	r3, [r0, #24]
 8006158:	b90b      	cbnz	r3, 800615e <_fflush_r+0x1a>
 800615a:	f000 f887 	bl	800626c <__sinit>
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <_fflush_r+0x6c>)
 8006160:	429c      	cmp	r4, r3
 8006162:	d11b      	bne.n	800619c <_fflush_r+0x58>
 8006164:	686c      	ldr	r4, [r5, #4]
 8006166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <_fflush_r+0xa>
 800616e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006170:	07d0      	lsls	r0, r2, #31
 8006172:	d404      	bmi.n	800617e <_fflush_r+0x3a>
 8006174:	0599      	lsls	r1, r3, #22
 8006176:	d402      	bmi.n	800617e <_fflush_r+0x3a>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f000 f915 	bl	80063a8 <__retarget_lock_acquire_recursive>
 800617e:	4628      	mov	r0, r5
 8006180:	4621      	mov	r1, r4
 8006182:	f7ff ff5d 	bl	8006040 <__sflush_r>
 8006186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006188:	4605      	mov	r5, r0
 800618a:	07da      	lsls	r2, r3, #31
 800618c:	d4e0      	bmi.n	8006150 <_fflush_r+0xc>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	059b      	lsls	r3, r3, #22
 8006192:	d4dd      	bmi.n	8006150 <_fflush_r+0xc>
 8006194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006196:	f000 f908 	bl	80063aa <__retarget_lock_release_recursive>
 800619a:	e7d9      	b.n	8006150 <_fflush_r+0xc>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_fflush_r+0x70>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d101      	bne.n	80061a6 <_fflush_r+0x62>
 80061a2:	68ac      	ldr	r4, [r5, #8]
 80061a4:	e7df      	b.n	8006166 <_fflush_r+0x22>
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_fflush_r+0x74>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	bf08      	it	eq
 80061ac:	68ec      	ldreq	r4, [r5, #12]
 80061ae:	e7da      	b.n	8006166 <_fflush_r+0x22>
 80061b0:	08006acc 	.word	0x08006acc
 80061b4:	08006aec 	.word	0x08006aec
 80061b8:	08006aac 	.word	0x08006aac

080061bc <std>:
 80061bc:	2300      	movs	r3, #0
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	e9c0 3300 	strd	r3, r3, [r0]
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	; 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	6183      	str	r3, [r0, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	2208      	movs	r2, #8
 80061d8:	305c      	adds	r0, #92	; 0x5c
 80061da:	f7fd fb63 	bl	80038a4 <memset>
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x38>)
 80061e0:	6224      	str	r4, [r4, #32]
 80061e2:	6263      	str	r3, [r4, #36]	; 0x24
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <std+0x3c>)
 80061e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <std+0x40>)
 80061ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ec:	4b04      	ldr	r3, [pc, #16]	; (8006200 <std+0x44>)
 80061ee:	6323      	str	r3, [r4, #48]	; 0x30
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	bf00      	nop
 80061f4:	08006511 	.word	0x08006511
 80061f8:	08006533 	.word	0x08006533
 80061fc:	0800656b 	.word	0x0800656b
 8006200:	0800658f 	.word	0x0800658f

08006204 <_cleanup_r>:
 8006204:	4901      	ldr	r1, [pc, #4]	; (800620c <_cleanup_r+0x8>)
 8006206:	f000 b8af 	b.w	8006368 <_fwalk_reent>
 800620a:	bf00      	nop
 800620c:	08006145 	.word	0x08006145

08006210 <__sfmoreglue>:
 8006210:	2268      	movs	r2, #104	; 0x68
 8006212:	b570      	push	{r4, r5, r6, lr}
 8006214:	1e4d      	subs	r5, r1, #1
 8006216:	4355      	muls	r5, r2
 8006218:	460e      	mov	r6, r1
 800621a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800621e:	f7ff fa6b 	bl	80056f8 <_malloc_r>
 8006222:	4604      	mov	r4, r0
 8006224:	b140      	cbz	r0, 8006238 <__sfmoreglue+0x28>
 8006226:	2100      	movs	r1, #0
 8006228:	e9c0 1600 	strd	r1, r6, [r0]
 800622c:	300c      	adds	r0, #12
 800622e:	60a0      	str	r0, [r4, #8]
 8006230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006234:	f7fd fb36 	bl	80038a4 <memset>
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}

0800623c <__sfp_lock_acquire>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__sfp_lock_acquire+0x8>)
 800623e:	f000 b8b3 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	20000345 	.word	0x20000345

08006248 <__sfp_lock_release>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__sfp_lock_release+0x8>)
 800624a:	f000 b8ae 	b.w	80063aa <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	20000345 	.word	0x20000345

08006254 <__sinit_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sinit_lock_acquire+0x8>)
 8006256:	f000 b8a7 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	20000346 	.word	0x20000346

08006260 <__sinit_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sinit_lock_release+0x8>)
 8006262:	f000 b8a2 	b.w	80063aa <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	20000346 	.word	0x20000346

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sinit_lock_acquire>
 8006274:	69a3      	ldr	r3, [r4, #24]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sinit_lock_release>
 8006280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006284:	6523      	str	r3, [r4, #80]	; 0x50
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <__sinit+0x68>)
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <__sinit+0x6c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	62a2      	str	r2, [r4, #40]	; 0x28
 800628e:	42a3      	cmp	r3, r4
 8006290:	bf08      	it	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	4620      	mov	r0, r4
 8006296:	bf08      	it	eq
 8006298:	61a3      	streq	r3, [r4, #24]
 800629a:	f000 f81f 	bl	80062dc <__sfp>
 800629e:	6060      	str	r0, [r4, #4]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f81b 	bl	80062dc <__sfp>
 80062a6:	60a0      	str	r0, [r4, #8]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f817 	bl	80062dc <__sfp>
 80062ae:	2200      	movs	r2, #0
 80062b0:	2104      	movs	r1, #4
 80062b2:	60e0      	str	r0, [r4, #12]
 80062b4:	6860      	ldr	r0, [r4, #4]
 80062b6:	f7ff ff81 	bl	80061bc <std>
 80062ba:	2201      	movs	r2, #1
 80062bc:	2109      	movs	r1, #9
 80062be:	68a0      	ldr	r0, [r4, #8]
 80062c0:	f7ff ff7c 	bl	80061bc <std>
 80062c4:	2202      	movs	r2, #2
 80062c6:	2112      	movs	r1, #18
 80062c8:	68e0      	ldr	r0, [r4, #12]
 80062ca:	f7ff ff77 	bl	80061bc <std>
 80062ce:	2301      	movs	r3, #1
 80062d0:	61a3      	str	r3, [r4, #24]
 80062d2:	e7d1      	b.n	8006278 <__sinit+0xc>
 80062d4:	08006730 	.word	0x08006730
 80062d8:	08006205 	.word	0x08006205

080062dc <__sfp>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	4607      	mov	r7, r0
 80062e0:	f7ff ffac 	bl	800623c <__sfp_lock_acquire>
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <__sfp+0x84>)
 80062e6:	681e      	ldr	r6, [r3, #0]
 80062e8:	69b3      	ldr	r3, [r6, #24]
 80062ea:	b913      	cbnz	r3, 80062f2 <__sfp+0x16>
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbd 	bl	800626c <__sinit>
 80062f2:	3648      	adds	r6, #72	; 0x48
 80062f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	d503      	bpl.n	8006304 <__sfp+0x28>
 80062fc:	6833      	ldr	r3, [r6, #0]
 80062fe:	b30b      	cbz	r3, 8006344 <__sfp+0x68>
 8006300:	6836      	ldr	r6, [r6, #0]
 8006302:	e7f7      	b.n	80062f4 <__sfp+0x18>
 8006304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006308:	b9d5      	cbnz	r5, 8006340 <__sfp+0x64>
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <__sfp+0x88>)
 800630c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006310:	60e3      	str	r3, [r4, #12]
 8006312:	6665      	str	r5, [r4, #100]	; 0x64
 8006314:	f000 f847 	bl	80063a6 <__retarget_lock_init_recursive>
 8006318:	f7ff ff96 	bl	8006248 <__sfp_lock_release>
 800631c:	2208      	movs	r2, #8
 800631e:	4629      	mov	r1, r5
 8006320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006328:	6025      	str	r5, [r4, #0]
 800632a:	61a5      	str	r5, [r4, #24]
 800632c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006330:	f7fd fab8 	bl	80038a4 <memset>
 8006334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800633c:	4620      	mov	r0, r4
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006340:	3468      	adds	r4, #104	; 0x68
 8006342:	e7d9      	b.n	80062f8 <__sfp+0x1c>
 8006344:	2104      	movs	r1, #4
 8006346:	4638      	mov	r0, r7
 8006348:	f7ff ff62 	bl	8006210 <__sfmoreglue>
 800634c:	4604      	mov	r4, r0
 800634e:	6030      	str	r0, [r6, #0]
 8006350:	2800      	cmp	r0, #0
 8006352:	d1d5      	bne.n	8006300 <__sfp+0x24>
 8006354:	f7ff ff78 	bl	8006248 <__sfp_lock_release>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	e7ee      	b.n	800633c <__sfp+0x60>
 800635e:	bf00      	nop
 8006360:	08006730 	.word	0x08006730
 8006364:	ffff0001 	.word	0xffff0001

08006368 <_fwalk_reent>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4606      	mov	r6, r0
 800636e:	4688      	mov	r8, r1
 8006370:	2700      	movs	r7, #0
 8006372:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800637a:	f1b9 0901 	subs.w	r9, r9, #1
 800637e:	d505      	bpl.n	800638c <_fwalk_reent+0x24>
 8006380:	6824      	ldr	r4, [r4, #0]
 8006382:	2c00      	cmp	r4, #0
 8006384:	d1f7      	bne.n	8006376 <_fwalk_reent+0xe>
 8006386:	4638      	mov	r0, r7
 8006388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638c:	89ab      	ldrh	r3, [r5, #12]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d907      	bls.n	80063a2 <_fwalk_reent+0x3a>
 8006392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006396:	3301      	adds	r3, #1
 8006398:	d003      	beq.n	80063a2 <_fwalk_reent+0x3a>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	47c0      	blx	r8
 80063a0:	4307      	orrs	r7, r0
 80063a2:	3568      	adds	r5, #104	; 0x68
 80063a4:	e7e9      	b.n	800637a <_fwalk_reent+0x12>

080063a6 <__retarget_lock_init_recursive>:
 80063a6:	4770      	bx	lr

080063a8 <__retarget_lock_acquire_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_release_recursive>:
 80063aa:	4770      	bx	lr

080063ac <__swhatbuf_r>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	460e      	mov	r6, r1
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	4614      	mov	r4, r2
 80063b6:	2900      	cmp	r1, #0
 80063b8:	461d      	mov	r5, r3
 80063ba:	b096      	sub	sp, #88	; 0x58
 80063bc:	da08      	bge.n	80063d0 <__swhatbuf_r+0x24>
 80063be:	2200      	movs	r2, #0
 80063c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	061a      	lsls	r2, r3, #24
 80063c8:	d410      	bmi.n	80063ec <__swhatbuf_r+0x40>
 80063ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ce:	e00e      	b.n	80063ee <__swhatbuf_r+0x42>
 80063d0:	466a      	mov	r2, sp
 80063d2:	f000 f903 	bl	80065dc <_fstat_r>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	dbf1      	blt.n	80063be <__swhatbuf_r+0x12>
 80063da:	9a01      	ldr	r2, [sp, #4]
 80063dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063e4:	425a      	negs	r2, r3
 80063e6:	415a      	adcs	r2, r3
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	e7ee      	b.n	80063ca <__swhatbuf_r+0x1e>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	2000      	movs	r0, #0
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	b016      	add	sp, #88	; 0x58
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080063f8 <__smakebuf_r>:
 80063f8:	898b      	ldrh	r3, [r1, #12]
 80063fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063fc:	079d      	lsls	r5, r3, #30
 80063fe:	4606      	mov	r6, r0
 8006400:	460c      	mov	r4, r1
 8006402:	d507      	bpl.n	8006414 <__smakebuf_r+0x1c>
 8006404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	2301      	movs	r3, #1
 800640e:	6163      	str	r3, [r4, #20]
 8006410:	b002      	add	sp, #8
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	466a      	mov	r2, sp
 8006416:	ab01      	add	r3, sp, #4
 8006418:	f7ff ffc8 	bl	80063ac <__swhatbuf_r>
 800641c:	9900      	ldr	r1, [sp, #0]
 800641e:	4605      	mov	r5, r0
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff f969 	bl	80056f8 <_malloc_r>
 8006426:	b948      	cbnz	r0, 800643c <__smakebuf_r+0x44>
 8006428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800642c:	059a      	lsls	r2, r3, #22
 800642e:	d4ef      	bmi.n	8006410 <__smakebuf_r+0x18>
 8006430:	f023 0303 	bic.w	r3, r3, #3
 8006434:	f043 0302 	orr.w	r3, r3, #2
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	e7e3      	b.n	8006404 <__smakebuf_r+0xc>
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <__smakebuf_r+0x7c>)
 800643e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	6020      	str	r0, [r4, #0]
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	9b00      	ldr	r3, [sp, #0]
 800644c:	6120      	str	r0, [r4, #16]
 800644e:	6163      	str	r3, [r4, #20]
 8006450:	9b01      	ldr	r3, [sp, #4]
 8006452:	b15b      	cbz	r3, 800646c <__smakebuf_r+0x74>
 8006454:	4630      	mov	r0, r6
 8006456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800645a:	f000 f8d1 	bl	8006600 <_isatty_r>
 800645e:	b128      	cbz	r0, 800646c <__smakebuf_r+0x74>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	89a0      	ldrh	r0, [r4, #12]
 800646e:	4305      	orrs	r5, r0
 8006470:	81a5      	strh	r5, [r4, #12]
 8006472:	e7cd      	b.n	8006410 <__smakebuf_r+0x18>
 8006474:	08006205 	.word	0x08006205

08006478 <_malloc_usable_size_r>:
 8006478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647c:	1f18      	subs	r0, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfbc      	itt	lt
 8006482:	580b      	ldrlt	r3, [r1, r0]
 8006484:	18c0      	addlt	r0, r0, r3
 8006486:	4770      	bx	lr

08006488 <_raise_r>:
 8006488:	291f      	cmp	r1, #31
 800648a:	b538      	push	{r3, r4, r5, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	d904      	bls.n	800649c <_raise_r+0x14>
 8006492:	2316      	movs	r3, #22
 8006494:	6003      	str	r3, [r0, #0]
 8006496:	f04f 30ff 	mov.w	r0, #4294967295
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800649e:	b112      	cbz	r2, 80064a6 <_raise_r+0x1e>
 80064a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064a4:	b94b      	cbnz	r3, 80064ba <_raise_r+0x32>
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 f830 	bl	800650c <_getpid_r>
 80064ac:	462a      	mov	r2, r5
 80064ae:	4601      	mov	r1, r0
 80064b0:	4620      	mov	r0, r4
 80064b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064b6:	f000 b817 	b.w	80064e8 <_kill_r>
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d00a      	beq.n	80064d4 <_raise_r+0x4c>
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	d103      	bne.n	80064ca <_raise_r+0x42>
 80064c2:	2316      	movs	r3, #22
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	2001      	movs	r0, #1
 80064c8:	e7e7      	b.n	800649a <_raise_r+0x12>
 80064ca:	2400      	movs	r4, #0
 80064cc:	4628      	mov	r0, r5
 80064ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064d2:	4798      	blx	r3
 80064d4:	2000      	movs	r0, #0
 80064d6:	e7e0      	b.n	800649a <_raise_r+0x12>

080064d8 <raise>:
 80064d8:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <raise+0xc>)
 80064da:	4601      	mov	r1, r0
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	f7ff bfd3 	b.w	8006488 <_raise_r>
 80064e2:	bf00      	nop
 80064e4:	2000000c 	.word	0x2000000c

080064e8 <_kill_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	2300      	movs	r3, #0
 80064ec:	4d06      	ldr	r5, [pc, #24]	; (8006508 <_kill_r+0x20>)
 80064ee:	4604      	mov	r4, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	4611      	mov	r1, r2
 80064f4:	602b      	str	r3, [r5, #0]
 80064f6:	f7fb f996 	bl	8001826 <_kill>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d102      	bne.n	8006504 <_kill_r+0x1c>
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	b103      	cbz	r3, 8006504 <_kill_r+0x1c>
 8006502:	6023      	str	r3, [r4, #0]
 8006504:	bd38      	pop	{r3, r4, r5, pc}
 8006506:	bf00      	nop
 8006508:	20000340 	.word	0x20000340

0800650c <_getpid_r>:
 800650c:	f7fb b984 	b.w	8001818 <_getpid>

08006510 <__sread>:
 8006510:	b510      	push	{r4, lr}
 8006512:	460c      	mov	r4, r1
 8006514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006518:	f000 f894 	bl	8006644 <_read_r>
 800651c:	2800      	cmp	r0, #0
 800651e:	bfab      	itete	ge
 8006520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006522:	89a3      	ldrhlt	r3, [r4, #12]
 8006524:	181b      	addge	r3, r3, r0
 8006526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800652a:	bfac      	ite	ge
 800652c:	6563      	strge	r3, [r4, #84]	; 0x54
 800652e:	81a3      	strhlt	r3, [r4, #12]
 8006530:	bd10      	pop	{r4, pc}

08006532 <__swrite>:
 8006532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	461f      	mov	r7, r3
 8006538:	898b      	ldrh	r3, [r1, #12]
 800653a:	4605      	mov	r5, r0
 800653c:	05db      	lsls	r3, r3, #23
 800653e:	460c      	mov	r4, r1
 8006540:	4616      	mov	r6, r2
 8006542:	d505      	bpl.n	8006550 <__swrite+0x1e>
 8006544:	2302      	movs	r3, #2
 8006546:	2200      	movs	r2, #0
 8006548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654c:	f000 f868 	bl	8006620 <_lseek_r>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	4632      	mov	r2, r6
 8006554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	4628      	mov	r0, r5
 800655c:	463b      	mov	r3, r7
 800655e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006566:	f000 b817 	b.w	8006598 <_write_r>

0800656a <__sseek>:
 800656a:	b510      	push	{r4, lr}
 800656c:	460c      	mov	r4, r1
 800656e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006572:	f000 f855 	bl	8006620 <_lseek_r>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	bf15      	itete	ne
 800657c:	6560      	strne	r0, [r4, #84]	; 0x54
 800657e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006586:	81a3      	strheq	r3, [r4, #12]
 8006588:	bf18      	it	ne
 800658a:	81a3      	strhne	r3, [r4, #12]
 800658c:	bd10      	pop	{r4, pc}

0800658e <__sclose>:
 800658e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006592:	f000 b813 	b.w	80065bc <_close_r>
	...

08006598 <_write_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	2200      	movs	r2, #0
 80065a2:	4d05      	ldr	r5, [pc, #20]	; (80065b8 <_write_r+0x20>)
 80065a4:	602a      	str	r2, [r5, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f7fb f974 	bl	8001894 <_write>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_write_r+0x1e>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_write_r+0x1e>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	20000340 	.word	0x20000340

080065bc <_close_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	2300      	movs	r3, #0
 80065c0:	4d05      	ldr	r5, [pc, #20]	; (80065d8 <_close_r+0x1c>)
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	f7fb f980 	bl	80018cc <_close>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_close_r+0x1a>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_close_r+0x1a>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	20000340 	.word	0x20000340

080065dc <_fstat_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	2300      	movs	r3, #0
 80065e0:	4d06      	ldr	r5, [pc, #24]	; (80065fc <_fstat_r+0x20>)
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	4611      	mov	r1, r2
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	f7fb f97a 	bl	80018e2 <_fstat>
 80065ee:	1c43      	adds	r3, r0, #1
 80065f0:	d102      	bne.n	80065f8 <_fstat_r+0x1c>
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	b103      	cbz	r3, 80065f8 <_fstat_r+0x1c>
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	bd38      	pop	{r3, r4, r5, pc}
 80065fa:	bf00      	nop
 80065fc:	20000340 	.word	0x20000340

08006600 <_isatty_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	2300      	movs	r3, #0
 8006604:	4d05      	ldr	r5, [pc, #20]	; (800661c <_isatty_r+0x1c>)
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb f978 	bl	8001900 <_isatty>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_isatty_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_isatty_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000340 	.word	0x20000340

08006620 <_lseek_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	2200      	movs	r2, #0
 800662a:	4d05      	ldr	r5, [pc, #20]	; (8006640 <_lseek_r+0x20>)
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f7fb f970 	bl	8001914 <_lseek>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_lseek_r+0x1e>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_lseek_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	20000340 	.word	0x20000340

08006644 <_read_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	2200      	movs	r2, #0
 800664e:	4d05      	ldr	r5, [pc, #20]	; (8006664 <_read_r+0x20>)
 8006650:	602a      	str	r2, [r5, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f7fb f901 	bl	800185a <_read>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_read_r+0x1e>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_read_r+0x1e>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	20000340 	.word	0x20000340

08006668 <_init>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr

08006674 <_fini>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr
