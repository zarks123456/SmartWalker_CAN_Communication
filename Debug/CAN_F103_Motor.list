
CAN_F103_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003034  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b8  080031b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031b8  080031b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b8  080031b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08003238  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003238  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009882  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a57  00000000  00000000  0002991b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ac2  00000000  00000000  0002c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000901c  00000000  00000000  00044d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833d1  00000000  00000000  0004dd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d114f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002338  00000000  00000000  000d11a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003128 	.word	0x08003128

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003128 	.word	0x08003128

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN13CANServoMotorC1Eh>:
#include "CANServoMotor.h"

CANServoMotor::CANServoMotor(uint8_t id) {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
	motorID = id;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	78fa      	ldrb	r2, [r7, #3]
 800016c:	701a      	strb	r2, [r3, #0]
}
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr

0800017a <_ZN13CANServoMotorD1Ev>:

CANServoMotor::~CANServoMotor() {
 800017a:	b480      	push	{r7}
 800017c:	b083      	sub	sp, #12
 800017e:	af00      	add	r7, sp, #0
 8000180:	6078      	str	r0, [r7, #4]
	// Destructor implementation (if required)
}
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4618      	mov	r0, r3
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <_ZN13CANServoMotor4InitEP19__CAN_HandleTypeDef>:

	uint8_t reset[] = { 82, motorID };
	HAL_CAN_AddTxMessage(this->hcan, &txHeader, reset, &txMailbox);
}

void CANServoMotor::Init(CAN_HandleTypeDef *hcan) {
 800018e:	b480      	push	{r7}
 8000190:	b083      	sub	sp, #12
 8000192:	af00      	add	r7, sp, #0
 8000194:	6078      	str	r0, [r7, #4]
 8000196:	6039      	str	r1, [r7, #0]
	this->hcan = hcan;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	683a      	ldr	r2, [r7, #0]
 800019c:	605a      	str	r2, [r3, #4]
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef>:
	uint8_t speed[] = { 0x40, 0x6C, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00 };
	HAL_CAN_AddTxMessage(hcan, &txHeader, speed, &txMailbox);
}

CANServoMotor::Data CANServoMotor::ParseData(uint8_t *rxData,
		CAN_RxHeaderTypeDef &rxHeader) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	Data parseData;
	uint16_t registrarAddress = (static_cast<uint16_t>(rxData[2]) << 8)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3302      	adds	r3, #2
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	021b      	lsls	r3, r3, #8
			| rxData[1];
 80001be:	b21a      	sxth	r2, r3
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3301      	adds	r3, #1
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	b21b      	sxth	r3, r3
 80001c8:	4313      	orrs	r3, r2
 80001ca:	b21b      	sxth	r3, r3
	uint16_t registrarAddress = (static_cast<uint16_t>(rxData[2]) << 8)
 80001cc:	82fb      	strh	r3, [r7, #22]

	switch (registrarAddress){
 80001ce:	8afb      	ldrh	r3, [r7, #22]
 80001d0:	f246 026c 	movw	r2, #24684	; 0x606c
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d10f      	bne.n	80001f8 <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef+0x50>
	case 0x606C:
		parseData.Error=this->parseVelocity(rxData, parseData.leftValue, parseData.rightValue);
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	f103 010c 	add.w	r1, r3, #12
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	f103 0208 	add.w	r2, r3, #8
 80001e4:	460b      	mov	r3, r1
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	68b8      	ldr	r0, [r7, #8]
 80001ea:	f000 f80d 	bl	8000208 <_ZN13CANServoMotor13parseVelocityEPhRiS1_>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	711a      	strb	r2, [r3, #4]
		break;
 80001f6:	bf00      	nop
	}
	// Check if the data length is valid (less than or equal to 7, considering RxData[0] is the data length)

	parseData.Address=registrarAddress;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	8afa      	ldrh	r2, [r7, #22]
 80001fc:	80da      	strh	r2, [r3, #6]
	return parseData;
 80001fe:	bf00      	nop
}
 8000200:	68f8      	ldr	r0, [r7, #12]
 8000202:	3718      	adds	r7, #24
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <_ZN13CANServoMotor13parseVelocityEPhRiS1_>:

bool CANServoMotor::parseVelocity(uint8_t *rxData, int &leftVelocity,
		int &rightVelocity) {
 8000208:	b480      	push	{r7}
 800020a:	b087      	sub	sp, #28
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
 8000214:	603b      	str	r3, [r7, #0]
	uint8_t dataLengthCode = rxData[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	75fb      	strb	r3, [r7, #23]
	uint8_t dataLength;
	switch (dataLengthCode) {
 800021c:	7dfb      	ldrb	r3, [r7, #23]
 800021e:	2b4f      	cmp	r3, #79	; 0x4f
 8000220:	dc22      	bgt.n	8000268 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x60>
 8000222:	2b43      	cmp	r3, #67	; 0x43
 8000224:	db32      	blt.n	800028c <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x84>
 8000226:	3b43      	subs	r3, #67	; 0x43
 8000228:	2b0c      	cmp	r3, #12
 800022a:	d82f      	bhi.n	800028c <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x84>
 800022c:	a201      	add	r2, pc, #4	; (adr r2, 8000234 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x2c>)
 800022e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000232:	bf00      	nop
 8000234:	08000281 	.word	0x08000281
 8000238:	0800028d 	.word	0x0800028d
 800023c:	0800028d 	.word	0x0800028d
 8000240:	0800028d 	.word	0x0800028d
 8000244:	0800027b 	.word	0x0800027b
 8000248:	0800028d 	.word	0x0800028d
 800024c:	0800028d 	.word	0x0800028d
 8000250:	0800028d 	.word	0x0800028d
 8000254:	08000275 	.word	0x08000275
 8000258:	0800028d 	.word	0x0800028d
 800025c:	0800028d 	.word	0x0800028d
 8000260:	0800028d 	.word	0x0800028d
 8000264:	0800026f 	.word	0x0800026f
 8000268:	2b80      	cmp	r3, #128	; 0x80
 800026a:	d00c      	beq.n	8000286 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x7e>
 800026c:	e00e      	b.n	800028c <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x84>
	case 0x4F:
		dataLength = 1;
 800026e:	2301      	movs	r3, #1
 8000270:	75bb      	strb	r3, [r7, #22]
		break;
 8000272:	e00d      	b.n	8000290 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x88>
	case 0x4B:
		dataLength = 2;
 8000274:	2302      	movs	r3, #2
 8000276:	75bb      	strb	r3, [r7, #22]
		break;
 8000278:	e00a      	b.n	8000290 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x88>
	case 0x47:
		dataLength = 3;
 800027a:	2303      	movs	r3, #3
 800027c:	75bb      	strb	r3, [r7, #22]
		break;
 800027e:	e007      	b.n	8000290 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x88>
	case 0x43:
		dataLength = 4;
 8000280:	2304      	movs	r3, #4
 8000282:	75bb      	strb	r3, [r7, #22]
		break;
 8000284:	e004      	b.n	8000290 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x88>
	case 128:
		dataLength = 5;
 8000286:	2305      	movs	r3, #5
 8000288:	75bb      	strb	r3, [r7, #22]
		break;
 800028a:	e001      	b.n	8000290 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0x88>
	default:
		dataLength = 10; // Return -1 if the input is not recognized
 800028c:	230a      	movs	r3, #10
 800028e:	75bb      	strb	r3, [r7, #22]
	}

	if (rxData[0] == 0x43) {
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b43      	cmp	r3, #67	; 0x43
 8000296:	d114      	bne.n	80002c2 <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xba>
		leftVelocity = (rxData[5] << 8) | rxData[4];
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	3305      	adds	r3, #5
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	021b      	lsls	r3, r3, #8
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	3204      	adds	r2, #4
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	431a      	orrs	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	601a      	str	r2, [r3, #0]
		rightVelocity = (rxData[7] << 8) | rxData[6];
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	3307      	adds	r3, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	021b      	lsls	r3, r3, #8
 80002b4:	68ba      	ldr	r2, [r7, #8]
 80002b6:	3206      	adds	r2, #6
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	431a      	orrs	r2, r3
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	e005      	b.n	80002ce <_ZN13CANServoMotor13parseVelocityEPhRiS1_+0xc6>
	} else {
		// Invalid data length, set default values
		leftVelocity = 0;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
		rightVelocity = 0;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
	}
}
 80002ce:	bf00      	nop
 80002d0:	4618      	mov	r0, r3
 80002d2:	371c      	adds	r7, #28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop

080002dc <HAL_CAN_RxFifo0MsgPendingCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b089      	sub	sp, #36	; 0x24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6178      	str	r0, [r7, #20]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80002e4:	4b21      	ldr	r3, [pc, #132]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80002e6:	4a22      	ldr	r2, [pc, #136]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80002e8:	2100      	movs	r1, #0
 80002ea:	6978      	ldr	r0, [r7, #20]
 80002ec:	f000 fe9d 	bl	800102a <HAL_CAN_GetRxMessage>

	canData=controller.ParseData(RxData, RxHeader);
 80002f0:	4c20      	ldr	r4, [pc, #128]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80002f2:	4638      	mov	r0, r7
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80002f6:	4a1d      	ldr	r2, [pc, #116]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80002f8:	491f      	ldr	r1, [pc, #124]	; (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80002fa:	f7ff ff55 	bl	80001a8 <_ZN13CANServoMotor9ParseDataEPhR19CAN_RxHeaderTypeDef>
 80002fe:	463b      	mov	r3, r7
 8000300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int j = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
	j = sprintf(message, "%x ", canData.Address);
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800030c:	88db      	ldrh	r3, [r3, #6]
 800030e:	461a      	mov	r2, r3
 8000310:	491a      	ldr	r1, [pc, #104]	; (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000312:	481b      	ldr	r0, [pc, #108]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000314:	f002 fa8e 	bl	8002834 <siprintf>
 8000318:	61f8      	str	r0, [r7, #28]
	j += sprintf(message + j, "%d ", canData.leftValue);
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	4a18      	ldr	r2, [pc, #96]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800031e:	4413      	add	r3, r2
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000322:	6892      	ldr	r2, [r2, #8]
 8000324:	4917      	ldr	r1, [pc, #92]	; (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fa84 	bl	8002834 <siprintf>
 800032c:	4602      	mov	r2, r0
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	4413      	add	r3, r2
 8000332:	61fb      	str	r3, [r7, #28]
	j += sprintf(message + j, "%d \r\n", canData.rightValue);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000338:	4413      	add	r3, r2
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800033c:	68d2      	ldr	r2, [r2, #12]
 800033e:	4912      	ldr	r1, [pc, #72]	; (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000340:	4618      	mov	r0, r3
 8000342:	f002 fa77 	bl	8002834 <siprintf>
 8000346:	4602      	mov	r2, r0
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	4413      	add	r3, r2
 800034c:	61fb      	str	r3, [r7, #28]

	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 100);
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000350:	f7ff fefc 	bl	800014c <strlen>
 8000354:	4603      	mov	r3, r0
 8000356:	b29a      	uxth	r2, r3
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	4909      	ldr	r1, [pc, #36]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800035e:	f002 f8b7 	bl	80024d0 <HAL_UART_Transmit>
}
 8000362:	bf00      	nop
 8000364:	3724      	adds	r7, #36	; 0x24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd90      	pop	{r4, r7, pc}
 800036a:	bf00      	nop
 800036c:	20000164 	.word	0x20000164
 8000370:	20000148 	.word	0x20000148
 8000374:	20000120 	.word	0x20000120
 8000378:	200000fc 	.word	0x200000fc
 800037c:	08003140 	.word	0x08003140
 8000380:	20000170 	.word	0x20000170
 8000384:	08003144 	.word	0x08003144
 8000388:	08003148 	.word	0x08003148
 800038c:	200000b4 	.word	0x200000b4

08000390 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000396:	f000 faeb 	bl	8000970 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800039a:	f000 f853 	bl	8000444 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800039e:	f000 f927 	bl	80005f0 <_ZL12MX_GPIO_Initv>
	MX_CAN_Init();
 80003a2:	f000 f89f 	bl	80004e4 <_ZL11MX_CAN_Initv>
	MX_USART1_UART_Init();
 80003a6:	f000 f8f5 	bl	8000594 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 80003aa:	4821      	ldr	r0, [pc, #132]	; (8000430 <main+0xa0>)
 80003ac:	f000 fd2a 	bl	8000e04 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003b0:	2102      	movs	r1, #2
 80003b2:	481f      	ldr	r0, [pc, #124]	; (8000430 <main+0xa0>)
 80003b4:	f000 ff5a 	bl	800126c <HAL_CAN_ActivateNotification>

	controller.Init(&hcan);
 80003b8:	491d      	ldr	r1, [pc, #116]	; (8000430 <main+0xa0>)
 80003ba:	481e      	ldr	r0, [pc, #120]	; (8000434 <main+0xa4>)
 80003bc:	f7ff fee7 	bl	800018e <_ZN13CANServoMotor4InitEP19__CAN_HandleTypeDef>

	TxHeader.DLC = 2;
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <main+0xa8>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <main+0xa8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <main+0xa8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x000;
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <main+0xa8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]

	uint8_t reset[] = { 82, 01 };
 80003d8:	f44f 73a9 	mov.w	r3, #338	; 0x152
 80003dc:	81bb      	strh	r3, [r7, #12]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, reset, &TxMailbox);
 80003de:	f107 020c 	add.w	r2, r7, #12
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <main+0xac>)
 80003e4:	4914      	ldr	r1, [pc, #80]	; (8000438 <main+0xa8>)
 80003e6:	4812      	ldr	r0, [pc, #72]	; (8000430 <main+0xa0>)
 80003e8:	f000 fd50 	bl	8000e8c <HAL_CAN_AddTxMessage>
	uint8_t operationalmode[] = { 01, 01 };
 80003ec:	f240 1301 	movw	r3, #257	; 0x101
 80003f0:	813b      	strh	r3, [r7, #8]
	//uint8_t enablemotor[] = { 0x2B, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00 };// enable motor
	//2B 40 60 00 06 00 00 00
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, operationalmode, &TxMailbox);
 80003f2:	f107 0208 	add.w	r2, r7, #8
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <main+0xac>)
 80003f8:	490f      	ldr	r1, [pc, #60]	; (8000438 <main+0xa8>)
 80003fa:	480d      	ldr	r0, [pc, #52]	; (8000430 <main+0xa0>)
 80003fc:	f000 fd46 	bl	8000e8c <HAL_CAN_AddTxMessage>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		TxHeader.DLC = 8;
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <main+0xa8>)
 8000402:	2208      	movs	r2, #8
 8000404:	611a      	str	r2, [r3, #16]
		TxHeader.StdId = 0x601;
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <main+0xa8>)
 8000408:	f240 6201 	movw	r2, #1537	; 0x601
 800040c:	601a      	str	r2, [r3, #0]
		uint8_t speed[] = { 0x40, 0x6C, 0x60, 0x03, 0x00, 0x00, 0x00, 0x00 };// set heart beat rate
 800040e:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <main+0xb0>)
 8000410:	463b      	mov	r3, r7
 8000412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000416:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, speed, &TxMailbox);
 800041a:	463a      	mov	r2, r7
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <main+0xac>)
 800041e:	4906      	ldr	r1, [pc, #24]	; (8000438 <main+0xa8>)
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <main+0xa0>)
 8000422:	f000 fd33 	bl	8000e8c <HAL_CAN_AddTxMessage>

		//HAL_UART_Transmit(&huart1, "Test\r\n", 8, 100);
		//printf("Test\r\n");

		HAL_Delay(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 fb04 	bl	8000a34 <HAL_Delay>
	}
 800042c:	e7e8      	b.n	8000400 <main+0x70>
 800042e:	bf00      	nop
 8000430:	2000008c 	.word	0x2000008c
 8000434:	200000fc 	.word	0x200000fc
 8000438:	20000130 	.word	0x20000130
 800043c:	2000016c 	.word	0x2000016c
 8000440:	08003150 	.word	0x08003150

08000444 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b090      	sub	sp, #64	; 0x40
 8000448:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800044a:	f107 0318 	add.w	r3, r7, #24
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f002 f9e6 	bl	8002824 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000466:	2301      	movs	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000478:	2302      	movs	r3, #2
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000480:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000482:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fbbf 	bl	8001c10 <HAL_RCC_OscConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	bf14      	ite	ne
 8000498:	2301      	movne	r3, #1
 800049a:	2300      	moveq	r3, #0
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 80004a2:	f000 f8c7 	bl	8000634 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004a6:	230f      	movs	r3, #15
 80004a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004aa:	2302      	movs	r3, #2
 80004ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2102      	movs	r1, #2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 fe27 	bl	8002114 <HAL_RCC_ClockConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	bf14      	ite	ne
 80004cc:	2301      	movne	r3, #1
 80004ce:	2300      	moveq	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 80004d6:	f000 f8ad 	bl	8000634 <Error_Handler>
	}
}
 80004da:	bf00      	nop
 80004dc:	3740      	adds	r7, #64	; 0x40
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <_ZL11MX_CAN_Initv>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 80004ec:	4a28      	ldr	r2, [pc, #160]	; (8000590 <_ZL11MX_CAN_Initv+0xac>)
 80004ee:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 80004f2:	2209      	movs	r2, #9
 80004f4:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004fc:	4b23      	ldr	r3, [pc, #140]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 8000504:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000508:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 800050c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000510:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 800051a:	2200      	movs	r2, #0
 800051c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 8000520:	2200      	movs	r2, #0
 8000522:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 8000526:	2200      	movs	r2, #0
 8000528:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 800052c:	2200      	movs	r2, #0
 800052e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 8000532:	2200      	movs	r2, #0
 8000534:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000536:	4815      	ldr	r0, [pc, #84]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 8000538:	f000 faa0 	bl	8000a7c <HAL_CAN_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	bf14      	ite	ne
 8000542:	2301      	movne	r3, #1
 8000544:	2300      	moveq	r3, #0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <_ZL11MX_CAN_Initv+0x6c>
		Error_Handler();
 800054c:	f000 f872 	bl	8000634 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000 << 5;
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x00 << 5;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;
 8000574:	230d      	movs	r3, #13
 8000576:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000578:	463b      	mov	r3, r7
 800057a:	4619      	mov	r1, r3
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <_ZL11MX_CAN_Initv+0xa8>)
 800057e:	f000 fb78 	bl	8000c72 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000008c 	.word	0x2000008c
 8000590:	40006400 	.word	0x40006400

08000594 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_ZL19MX_USART1_UART_Initv+0x58>)
 800059c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80005cc:	f001 ff30 	bl	8002430 <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80005e0:	f000 f828 	bl	8000634 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000b4 	.word	0x200000b4
 80005ec:	40013800 	.word	0x40013800

080005f0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <_ZL12MX_GPIO_Initv+0x40>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <_ZL12MX_GPIO_Initv+0x40>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <_ZL12MX_GPIO_Initv+0x40>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <_ZL12MX_GPIO_Initv+0x40>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <_ZL12MX_GPIO_Initv+0x40>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <_ZL12MX_GPIO_Initv+0x40>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d108      	bne.n	8000662 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000656:	4293      	cmp	r3, r2
 8000658:	d103      	bne.n	8000662 <_Z41__static_initialization_and_destruction_0ii+0x22>
CANServoMotor controller(1);
 800065a:	2101      	movs	r1, #1
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800065e:	f7ff fd7d 	bl	800015c <_ZN13CANServoMotorC1Eh>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d107      	bne.n	8000678 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800066e:	4293      	cmp	r3, r2
 8000670:	d102      	bne.n	8000678 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000674:	f7ff fd81 	bl	800017a <_ZN13CANServoMotorD1Ev>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000fc 	.word	0x200000fc

08000684 <_GLOBAL__sub_I_hcan>:
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
 8000688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff ffd7 	bl	8000640 <_Z41__static_initialization_and_destruction_0ii>
 8000692:	bd80      	pop	{r7, pc}

08000694 <_GLOBAL__sub_D_hcan>:
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ffcf 	bl	8000640 <_Z41__static_initialization_and_destruction_0ii>
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <HAL_MspInit+0x5c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x5c>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_MspInit+0x60>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_MspInit+0x60>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000

08000708 <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
	if (hcan->Instance == CAN1) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <HAL_CAN_MspInit+0x9c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d139      	bne.n	800079c <HAL_CAN_MspInit+0x94>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_CAN_MspInit+0xa0>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <HAL_CAN_MspInit+0xa0>)
 800072e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000732:	61d3      	str	r3, [r2, #28]
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_CAN_MspInit+0xa0>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_CAN_MspInit+0xa0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_CAN_MspInit+0xa0>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_CAN_MspInit+0xa0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
		/**CAN GPIO Configuration
		 PA11     ------> CAN_RX
		 PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800075c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480f      	ldr	r0, [pc, #60]	; (80007ac <HAL_CAN_MspInit+0xa4>)
 800076e:	f001 f8d3 	bl	8001918 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_CAN_MspInit+0xa4>)
 8000788:	f001 f8c6 	bl	8001918 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2014      	movs	r0, #20
 8000792:	f001 f88a 	bl	80018aa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000796:	2014      	movs	r0, #20
 8000798:	f001 f8a3 	bl	80018e2 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40006400 	.word	0x40006400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010800 	.word	0x40010800

080007b0 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d131      	bne.n	8000834 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000804:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_UART_MspInit+0x94>)
 8000816:	f001 f87f 	bl	8001918 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_UART_MspInit+0x94>)
 8000830:	f001 f872 	bl	8001918 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013800 	.word	0x40013800
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800

08000848 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800088e:	f000 f8b5 	bl	80009fc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800089e:	f000 fd0a 	bl	80012b6 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000008c 	.word	0x2000008c

080008ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80008b4:	4a14      	ldr	r2, [pc, #80]	; (8000908 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <_sbrk+0x64>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <_sbrk+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d207      	bcs.n	80008ec <_sbrk+0x40>
		errno = ENOMEM;
 80008dc:	f001 ff78 	bl	80027d0 <__errno>
 80008e0:	4603      	mov	r3, r0
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e009      	b.n	8000900 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <_sbrk+0x64>)
 80008fc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20002800 	.word	0x20002800
 800090c:	00000400 	.word	0x00000400
 8000910:	200001d4 	.word	0x200001d4
 8000914:	200001f0 	.word	0x200001f0

08000918 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff fff8 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800092a:	490c      	ldr	r1, [pc, #48]	; (800095c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000940:	4c09      	ldr	r4, [pc, #36]	; (8000968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f001 ff45 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fd1d 	bl	8000390 <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000960:	080031c8 	.word	0x080031c8
  ldr r2, =_sbss
 8000964:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000968:	200001ec 	.word	0x200001ec

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 ff87 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fe8a 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 ff9f 	bl	80018fe <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 ff67 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200001d8 	.word	0x200001d8

08000a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	200001d8 	.word	0x200001d8

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0ed      	b.n	8000c6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fe34 	bl	8000708 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ab0:	f7ff ffb6 	bl	8000a20 <HAL_GetTick>
 8000ab4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ab6:	e012      	b.n	8000ade <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab8:	f7ff ffb2 	bl	8000a20 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b0a      	cmp	r3, #10
 8000ac4:	d90b      	bls.n	8000ade <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e0c5      	b.n	8000c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0e5      	beq.n	8000ab8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0202 	bic.w	r2, r2, #2
 8000afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000afc:	f7ff ff90 	bl	8000a20 <HAL_GetTick>
 8000b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b02:	e012      	b.n	8000b2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b04:	f7ff ff8c 	bl	8000a20 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d90b      	bls.n	8000b2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2205      	movs	r2, #5
 8000b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e09f      	b.n	8000c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e5      	bne.n	8000b04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7e1b      	ldrb	r3, [r3, #24]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d108      	bne.n	8000b52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e007      	b.n	8000b62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7e5b      	ldrb	r3, [r3, #25]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d108      	bne.n	8000b7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7e9b      	ldrb	r3, [r3, #26]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d108      	bne.n	8000ba6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f042 0220 	orr.w	r2, r2, #32
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e007      	b.n	8000bb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0220 	bic.w	r2, r2, #32
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7edb      	ldrb	r3, [r3, #27]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d108      	bne.n	8000bd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0210 	bic.w	r2, r2, #16
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0210 	orr.w	r2, r2, #16
 8000bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7f1b      	ldrb	r3, [r3, #28]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d108      	bne.n	8000bfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0208 	orr.w	r2, r2, #8
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e007      	b.n	8000c0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0208 	bic.w	r2, r2, #8
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7f5b      	ldrb	r3, [r3, #29]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d108      	bne.n	8000c24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0204 	orr.w	r2, r2, #4
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e007      	b.n	8000c34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 0204 	bic.w	r2, r2, #4
 8000c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	ea42 0103 	orr.w	r1, r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c88:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c8a:	7cfb      	ldrb	r3, [r7, #19]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d003      	beq.n	8000c98 <HAL_CAN_ConfigFilter+0x26>
 8000c90:	7cfb      	ldrb	r3, [r7, #19]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	f040 80aa 	bne.w	8000dec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f003 031f 	and.w	r3, r3, #31
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d123      	bne.n	8000d1a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cf4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3248      	adds	r2, #72	; 0x48
 8000cfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d10:	6979      	ldr	r1, [r7, #20]
 8000d12:	3348      	adds	r3, #72	; 0x48
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d122      	bne.n	8000d68 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3248      	adds	r2, #72	; 0x48
 8000d48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d5e:	6979      	ldr	r1, [r7, #20]
 8000d60:	3348      	adds	r3, #72	; 0x48
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d109      	bne.n	8000d84 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d82:	e007      	b.n	8000d94 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d109      	bne.n	8000db0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dae:	e007      	b.n	8000dc0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d107      	bne.n	8000dd8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dde:	f023 0201 	bic.w	r2, r3, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e006      	b.n	8000dfa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
  }
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d12e      	bne.n	8000e76 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e30:	f7ff fdf6 	bl	8000a20 <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e36:	e012      	b.n	8000e5e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e38:	f7ff fdf2 	bl	8000a20 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b0a      	cmp	r3, #10
 8000e44:	d90b      	bls.n	8000e5e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2205      	movs	r2, #5
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e012      	b.n	8000e84 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1e5      	bne.n	8000e38 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e006      	b.n	8000e84 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
  }
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eaa:	7ffb      	ldrb	r3, [r7, #31]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d003      	beq.n	8000eb8 <HAL_CAN_AddTxMessage+0x2c>
 8000eb0:	7ffb      	ldrb	r3, [r7, #31]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	f040 80ad 	bne.w	8001012 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8095 	beq.w	8001002 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	0e1b      	lsrs	r3, r3, #24
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10d      	bne.n	8000f10 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	6809      	ldr	r1, [r1, #0]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3318      	adds	r3, #24
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	440b      	add	r3, r1
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e00f      	b.n	8000f30 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f20:	68f9      	ldr	r1, [r7, #12]
 8000f22:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f24:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3318      	adds	r3, #24
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	440b      	add	r3, r1
 8000f2e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	7d1b      	ldrb	r3, [r3, #20]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d111      	bne.n	8000f70 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3318      	adds	r3, #24
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	3304      	adds	r3, #4
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	6811      	ldr	r1, [r2, #0]
 8000f60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3318      	adds	r3, #24
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3307      	adds	r3, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	061a      	lsls	r2, r3, #24
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3306      	adds	r3, #6
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3305      	adds	r3, #5
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	3204      	adds	r2, #4
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4610      	mov	r0, r2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	6811      	ldr	r1, [r2, #0]
 8000f98:	ea43 0200 	orr.w	r2, r3, r0
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	440b      	add	r3, r1
 8000fa2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fa6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3303      	adds	r3, #3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	061a      	lsls	r2, r3, #24
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4610      	mov	r0, r2
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	6811      	ldr	r1, [r2, #0]
 8000fce:	ea43 0200 	orr.w	r2, r3, r0
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000fdc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	6811      	ldr	r1, [r2, #0]
 8000ff0:	f043 0201 	orr.w	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	440b      	add	r3, r1
 8000ffc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e00e      	b.n	8001020 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e006      	b.n	8001020 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
  }
}
 8001020:	4618      	mov	r0, r3
 8001022:	3724      	adds	r7, #36	; 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800102a:	b480      	push	{r7}
 800102c:	b087      	sub	sp, #28
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d003      	beq.n	800104e <HAL_CAN_GetRxMessage+0x24>
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b02      	cmp	r3, #2
 800104a:	f040 8103 	bne.w	8001254 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10e      	bne.n	8001072 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0f7      	b.n	8001262 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0e8      	b.n	8001262 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	331b      	adds	r3, #27
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0204 	and.w	r2, r3, #4
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	331b      	adds	r3, #27
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4413      	add	r3, r2
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0d5b      	lsrs	r3, r3, #21
 80010be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	331b      	adds	r3, #27
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4413      	add	r3, r2
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	331b      	adds	r3, #27
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0202 	and.w	r2, r3, #2
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	331b      	adds	r3, #27
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2208      	movs	r2, #8
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	e00b      	b.n	800112e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	331b      	adds	r3, #27
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	3304      	adds	r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 020f 	and.w	r2, r3, #15
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	331b      	adds	r3, #27
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	331b      	adds	r3, #27
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0a1a      	lsrs	r2, r3, #8
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0c1a      	lsrs	r2, r3, #16
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3302      	adds	r3, #2
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0e1a      	lsrs	r2, r3, #24
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3303      	adds	r3, #3
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3304      	adds	r3, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	0a1a      	lsrs	r2, r3, #8
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3305      	adds	r3, #5
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	0c1a      	lsrs	r2, r3, #16
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3306      	adds	r3, #6
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0e1a      	lsrs	r2, r3, #24
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3307      	adds	r3, #7
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0220 	orr.w	r2, r2, #32
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	e007      	b.n	8001250 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0220 	orr.w	r2, r2, #32
 800124e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	e006      	b.n	8001262 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
  }
}
 8001262:	4618      	mov	r0, r3
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d002      	beq.n	800128a <HAL_CAN_ActivateNotification+0x1e>
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d109      	bne.n	800129e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6959      	ldr	r1, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e006      	b.n	80012ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
  }
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b08a      	sub	sp, #40	; 0x28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d07c      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d023      	beq.n	800134e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f983 	bl	8001624 <HAL_CAN_TxMailbox0CompleteCallback>
 800131e:	e016      	b.n	800134e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	e00c      	b.n	800134e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
 8001346:	e002      	b.n	800134e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f986 	bl	800165a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d024      	beq.n	80013a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001360:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f962 	bl	8001636 <HAL_CAN_TxMailbox1CompleteCallback>
 8001372:	e016      	b.n	80013a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	e00c      	b.n	80013a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e002      	b.n	80013a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f965 	bl	800166c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d024      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f941 	bl	8001648 <HAL_CAN_TxMailbox2CompleteCallback>
 80013c6:	e016      	b.n	80013f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e00c      	b.n	80013f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	e002      	b.n	80013f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f944 	bl	800167e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00c      	beq.n	800141a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2210      	movs	r2, #16
 8001418:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2208      	movs	r2, #8
 8001434:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f92a 	bl	8001690 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7fe ff41 	bl	80002dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2210      	movs	r2, #16
 800147c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2208      	movs	r2, #8
 8001498:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f90a 	bl	80016b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f8f2 	bl	80016a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f8f3 	bl	80016c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2208      	movs	r2, #8
 80014fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f8eb 	bl	80016d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d07b      	beq.n	8001604 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d072      	beq.n	80015fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001570:	2b00      	cmp	r3, #0
 8001572:	d043      	beq.n	80015fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d03e      	beq.n	80015fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001584:	2b60      	cmp	r3, #96	; 0x60
 8001586:	d02b      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x32a>
 8001588:	2b60      	cmp	r3, #96	; 0x60
 800158a:	d82e      	bhi.n	80015ea <HAL_CAN_IRQHandler+0x334>
 800158c:	2b50      	cmp	r3, #80	; 0x50
 800158e:	d022      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x320>
 8001590:	2b50      	cmp	r3, #80	; 0x50
 8001592:	d82a      	bhi.n	80015ea <HAL_CAN_IRQHandler+0x334>
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d019      	beq.n	80015cc <HAL_CAN_IRQHandler+0x316>
 8001598:	2b40      	cmp	r3, #64	; 0x40
 800159a:	d826      	bhi.n	80015ea <HAL_CAN_IRQHandler+0x334>
 800159c:	2b30      	cmp	r3, #48	; 0x30
 800159e:	d010      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x30c>
 80015a0:	2b30      	cmp	r3, #48	; 0x30
 80015a2:	d822      	bhi.n	80015ea <HAL_CAN_IRQHandler+0x334>
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d002      	beq.n	80015ae <HAL_CAN_IRQHandler+0x2f8>
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d005      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015ac:	e01d      	b.n	80015ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b6:	e019      	b.n	80015ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c0:	e014      	b.n	80015ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ca:	e00f      	b.n	80015ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d4:	e00a      	b.n	80015ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015de:	e005      	b.n	80015ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015e8:	e000      	b.n	80015ec <HAL_CAN_IRQHandler+0x336>
            break;
 80015ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2204      	movs	r2, #4
 8001602:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f867 	bl	80016ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4906      	ldr	r1, [pc, #24]	; (8001794 <__NVIC_EnableIRQ+0x34>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff90 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff2d 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff42 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff90 	bl	80017ec <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5f 	bl	8001798 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff35 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b08b      	sub	sp, #44	; 0x2c
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e161      	b.n	8001bf0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800192c:	2201      	movs	r2, #1
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8150 	bne.w	8001bea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4a97      	ldr	r2, [pc, #604]	; (8001bac <HAL_GPIO_Init+0x294>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d05e      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001954:	4a95      	ldr	r2, [pc, #596]	; (8001bac <HAL_GPIO_Init+0x294>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d875      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 800195a:	4a95      	ldr	r2, [pc, #596]	; (8001bb0 <HAL_GPIO_Init+0x298>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d058      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001960:	4a93      	ldr	r2, [pc, #588]	; (8001bb0 <HAL_GPIO_Init+0x298>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d86f      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 8001966:	4a93      	ldr	r2, [pc, #588]	; (8001bb4 <HAL_GPIO_Init+0x29c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d052      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 800196c:	4a91      	ldr	r2, [pc, #580]	; (8001bb4 <HAL_GPIO_Init+0x29c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d869      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 8001972:	4a91      	ldr	r2, [pc, #580]	; (8001bb8 <HAL_GPIO_Init+0x2a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d04c      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001978:	4a8f      	ldr	r2, [pc, #572]	; (8001bb8 <HAL_GPIO_Init+0x2a0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d863      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 800197e:	4a8f      	ldr	r2, [pc, #572]	; (8001bbc <HAL_GPIO_Init+0x2a4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d046      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001984:	4a8d      	ldr	r2, [pc, #564]	; (8001bbc <HAL_GPIO_Init+0x2a4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d85d      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 800198a:	2b12      	cmp	r3, #18
 800198c:	d82a      	bhi.n	80019e4 <HAL_GPIO_Init+0xcc>
 800198e:	2b12      	cmp	r3, #18
 8001990:	d859      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_GPIO_Init+0x80>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	08001a13 	.word	0x08001a13
 800199c:	080019ed 	.word	0x080019ed
 80019a0:	080019ff 	.word	0x080019ff
 80019a4:	08001a41 	.word	0x08001a41
 80019a8:	08001a47 	.word	0x08001a47
 80019ac:	08001a47 	.word	0x08001a47
 80019b0:	08001a47 	.word	0x08001a47
 80019b4:	08001a47 	.word	0x08001a47
 80019b8:	08001a47 	.word	0x08001a47
 80019bc:	08001a47 	.word	0x08001a47
 80019c0:	08001a47 	.word	0x08001a47
 80019c4:	08001a47 	.word	0x08001a47
 80019c8:	08001a47 	.word	0x08001a47
 80019cc:	08001a47 	.word	0x08001a47
 80019d0:	08001a47 	.word	0x08001a47
 80019d4:	08001a47 	.word	0x08001a47
 80019d8:	08001a47 	.word	0x08001a47
 80019dc:	080019f5 	.word	0x080019f5
 80019e0:	08001a09 	.word	0x08001a09
 80019e4:	4a76      	ldr	r2, [pc, #472]	; (8001bc0 <HAL_GPIO_Init+0x2a8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ea:	e02c      	b.n	8001a46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e029      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e024      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	3308      	adds	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e01f      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e01a      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e013      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	611a      	str	r2, [r3, #16]
          break;
 8001a32:	e009      	b.n	8001a48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a34:	2308      	movs	r3, #8
 8001a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	615a      	str	r2, [r3, #20]
          break;
 8001a3e:	e003      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          break;
 8001a46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	; 0xff
 8001a4c:	d801      	bhi.n	8001a52 <HAL_GPIO_Init+0x13a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	e001      	b.n	8001a56 <HAL_GPIO_Init+0x13e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2bff      	cmp	r3, #255	; 0xff
 8001a5c:	d802      	bhi.n	8001a64 <HAL_GPIO_Init+0x14c>
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x152>
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3b08      	subs	r3, #8
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	210f      	movs	r1, #15
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	6a39      	ldr	r1, [r7, #32]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80a9 	beq.w	8001bea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a98:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x2ac>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	; (8001bc4 <HAL_GPIO_Init+0x2ac>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_GPIO_Init+0x2ac>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_GPIO_Init+0x2b4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1e0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3c      	ldr	r2, [pc, #240]	; (8001bd0 <HAL_GPIO_Init+0x2b8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1dc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3b      	ldr	r2, [pc, #236]	; (8001bd4 <HAL_GPIO_Init+0x2bc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1d8>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e004      	b.n	8001afa <HAL_GPIO_Init+0x1e2>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x1e2>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_GPIO_Init+0x1e2>
 8001af8:	2300      	movs	r3, #0
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0a:	492f      	ldr	r1, [pc, #188]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	492b      	ldr	r1, [pc, #172]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4927      	ldr	r1, [pc, #156]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4921      	ldr	r1, [pc, #132]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491d      	ldr	r1, [pc, #116]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4913      	ldr	r1, [pc, #76]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01f      	beq.n	8001bdc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	490d      	ldr	r1, [pc, #52]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e01f      	b.n	8001bea <HAL_GPIO_Init+0x2d2>
 8001baa:	bf00      	nop
 8001bac:	10320000 	.word	0x10320000
 8001bb0:	10310000 	.word	0x10310000
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10120000 	.word	0x10120000
 8001bc0:	10110000 	.word	0x10110000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_GPIO_Init+0x2f4>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4909      	ldr	r1, [pc, #36]	; (8001c0c <HAL_GPIO_Init+0x2f4>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f ae96 	bne.w	800192c <HAL_GPIO_Init+0x14>
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	372c      	adds	r7, #44	; 0x2c
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e272      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x12c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e24c      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x76>
 8001c78:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e02e      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xbc>
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fe98 	bl	8000a20 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fe94 	bl	8000a20 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e200      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xe4>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fe84 	bl	8000a20 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7fe fe80 	bl	8000a20 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1ec      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x10c>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d063      	beq.n	8001e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1c0      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4939      	ldr	r1, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e03a      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe fe39 	bl	8000a20 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db2:	f7fe fe35 	bl	8000a20 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1a1      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fe18 	bl	8000a20 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df4:	f7fe fe14 	bl	8000a20 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e180      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03a      	beq.n	8001e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7fe fdf8 	bl	8000a20 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7fe fdf4 	bl	8000a20 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e160      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f000 face 	bl	80023f4 <RCC_Delay>
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7fe fdde 	bl	8000a20 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7fe fdda 	bl	8000a20 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e146      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42420000 	.word	0x42420000
 8001e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e9      	bne.n	8001e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a6 	beq.w	8001fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a87      	ldr	r2, [pc, #540]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b85      	ldr	r3, [pc, #532]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d118      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fd9b 	bl	8000a20 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7fe fd97 	bl	8000a20 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	; 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e103      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b75      	ldr	r3, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x312>
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x334>
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a69      	ldr	r2, [pc, #420]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x356>
 8001f4c:	4b61      	ldr	r3, [pc, #388]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f66:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a57      	ldr	r2, [pc, #348]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fd4b 	bl	8000a20 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fd47 	bl	8000a20 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0b1      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x37e>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fd35 	bl	8000a20 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7fe fd31 	bl	8000a20 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e09b      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8087 	beq.w	8002106 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d061      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d146      	bne.n	800209a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe fd05 	bl	8000a20 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7fe fd01 	bl	8000a20 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e06d      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d108      	bne.n	8002054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4921      	ldr	r1, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a19      	ldr	r1, [r3, #32]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	430b      	orrs	r3, r1
 8002066:	491b      	ldr	r1, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fcd5 	bl	8000a20 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7fe fcd1 	bl	8000a20 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e03d      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x46a>
 8002098:	e035      	b.n	8002106 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fcbe 	bl	8000a20 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe fcba 	bl	8000a20 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e026      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x498>
 80020c6:	e01e      	b.n	8002106 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e019      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x500>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d0      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4965      	ldr	r1, [pc, #404]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002170:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	494d      	ldr	r1, [pc, #308]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d040      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e07f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e073      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4936      	ldr	r1, [pc, #216]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7fe fc0c 	bl	8000a20 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe fc08 	bl	8000a20 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e053      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d210      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e032      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490e      	ldr	r1, [pc, #56]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a2:	f000 f821 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490a      	ldr	r1, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1cc>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fb6a 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08003158 	.word	0x08003158
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCC_GetSysClockFreq+0x94>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x30>
 8002312:	2b08      	cmp	r3, #8
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x36>
 8002316:	e027      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	e027      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_GetSysClockFreq+0x94>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0c5b      	lsrs	r3, r3, #17
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	4a11      	ldr	r2, [pc, #68]	; (8002388 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800234a:	fb03 f202 	mul.w	r2, r3, r2
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e004      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_GetSysClockFreq+0xa4>)
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	613b      	str	r3, [r7, #16]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800236a:	613b      	str	r3, [r7, #16]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	693b      	ldr	r3, [r7, #16]
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	08003170 	.word	0x08003170
 8002388:	08003180 	.word	0x08003180
 800238c:	003d0900 	.word	0x003d0900

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a8:	f7ff fff2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08003168 	.word	0x08003168

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d0:	f7ff ffde 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0adb      	lsrs	r3, r3, #11
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003168 	.word	0x08003168

080023f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <RCC_Delay+0x34>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <RCC_Delay+0x38>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002410:	bf00      	nop
  }
  while (Delay --);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	60fa      	str	r2, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <RCC_Delay+0x1c>
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000000 	.word	0x20000000
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e042      	b.n	80024c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f9aa 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f91d 	bl	80026b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d16d      	bne.n	80025cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_UART_Transmit+0x2c>
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e066      	b.n	80025ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2221      	movs	r2, #33	; 0x21
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800250e:	f7fe fa87 	bl	8000a20 <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002528:	d108      	bne.n	800253c <HAL_UART_Transmit+0x6c>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e003      	b.n	8002544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002544:	e02a      	b.n	800259c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f840 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e036      	b.n	80025ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e007      	b.n	800258e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cf      	bne.n	8002546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f810 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e006      	b.n	80025ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b090      	sub	sp, #64	; 0x40
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e6:	e050      	b.n	800268a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d04c      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <UART_WaitOnFlagUntilTimeout+0x30>
 80025f6:	f7fe fa13 	bl	8000a20 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002602:	429a      	cmp	r2, r3
 8002604:	d241      	bcs.n	800268a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002626:	637a      	str	r2, [r7, #52]	; 0x34
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800262c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e5      	bne.n	8002606 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	613b      	str	r3, [r7, #16]
   return(result);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265a:	623a      	str	r2, [r7, #32]
 800265c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	69f9      	ldr	r1, [r7, #28]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	61bb      	str	r3, [r7, #24]
   return(result);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e00f      	b.n	80026aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d09f      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3740      	adds	r7, #64	; 0x40
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026ee:	f023 030c 	bic.w	r3, r3, #12
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <UART_SetConfig+0x114>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800271c:	f7ff fe56 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	e002      	b.n	800272a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002724:	f7ff fe3e 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009a      	lsls	r2, r3, #2
 8002734:	441a      	add	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <UART_SetConfig+0x118>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	0119      	lsls	r1, r3, #4
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009a      	lsls	r2, r3, #2
 8002754:	441a      	add	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <UART_SetConfig+0x118>)
 8002762:	fba3 0302 	umull	r0, r3, r3, r2
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2064      	movs	r0, #100	; 0x64
 800276a:	fb00 f303 	mul.w	r3, r0, r3
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	3332      	adds	r3, #50	; 0x32
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <UART_SetConfig+0x118>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002780:	4419      	add	r1, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fbb2 f2f3 	udiv	r2, r2, r3
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <UART_SetConfig+0x118>)
 800279a:	fba3 0302 	umull	r0, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	fb00 f303 	mul.w	r3, r0, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	3332      	adds	r3, #50	; 0x32
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <UART_SetConfig+0x118>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	f003 020f 	and.w	r2, r3, #15
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	440a      	add	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40013800 	.word	0x40013800
 80027cc:	51eb851f 	.word	0x51eb851f

080027d0 <__errno>:
 80027d0:	4b01      	ldr	r3, [pc, #4]	; (80027d8 <__errno+0x8>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	2000000c 	.word	0x2000000c

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	2600      	movs	r6, #0
 80027e0:	4d0c      	ldr	r5, [pc, #48]	; (8002814 <__libc_init_array+0x38>)
 80027e2:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	f000 fc9c 	bl	8003128 <_init>
 80027f0:	2600      	movs	r6, #0
 80027f2:	4d0a      	ldr	r5, [pc, #40]	; (800281c <__libc_init_array+0x40>)
 80027f4:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <__libc_init_array+0x44>)
 80027f6:	1b64      	subs	r4, r4, r5
 80027f8:	10a4      	asrs	r4, r4, #2
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	f855 3b04 	ldr.w	r3, [r5], #4
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	f855 3b04 	ldr.w	r3, [r5], #4
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	080031b8 	.word	0x080031b8
 8002818:	080031b8 	.word	0x080031b8
 800281c:	080031b8 	.word	0x080031b8
 8002820:	080031c0 	.word	0x080031c0

08002824 <memset>:
 8002824:	4603      	mov	r3, r0
 8002826:	4402      	add	r2, r0
 8002828:	4293      	cmp	r3, r2
 800282a:	d100      	bne.n	800282e <memset+0xa>
 800282c:	4770      	bx	lr
 800282e:	f803 1b01 	strb.w	r1, [r3], #1
 8002832:	e7f9      	b.n	8002828 <memset+0x4>

08002834 <siprintf>:
 8002834:	b40e      	push	{r1, r2, r3}
 8002836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800283a:	b500      	push	{lr}
 800283c:	b09c      	sub	sp, #112	; 0x70
 800283e:	ab1d      	add	r3, sp, #116	; 0x74
 8002840:	9002      	str	r0, [sp, #8]
 8002842:	9006      	str	r0, [sp, #24]
 8002844:	9107      	str	r1, [sp, #28]
 8002846:	9104      	str	r1, [sp, #16]
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <siprintf+0x38>)
 800284a:	4909      	ldr	r1, [pc, #36]	; (8002870 <siprintf+0x3c>)
 800284c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002850:	9105      	str	r1, [sp, #20]
 8002852:	6800      	ldr	r0, [r0, #0]
 8002854:	a902      	add	r1, sp, #8
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	f000 f868 	bl	800292c <_svfiprintf_r>
 800285c:	2200      	movs	r2, #0
 800285e:	9b02      	ldr	r3, [sp, #8]
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	b01c      	add	sp, #112	; 0x70
 8002864:	f85d eb04 	ldr.w	lr, [sp], #4
 8002868:	b003      	add	sp, #12
 800286a:	4770      	bx	lr
 800286c:	2000000c 	.word	0x2000000c
 8002870:	ffff0208 	.word	0xffff0208

08002874 <__ssputs_r>:
 8002874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002878:	688e      	ldr	r6, [r1, #8]
 800287a:	4682      	mov	sl, r0
 800287c:	429e      	cmp	r6, r3
 800287e:	460c      	mov	r4, r1
 8002880:	4690      	mov	r8, r2
 8002882:	461f      	mov	r7, r3
 8002884:	d838      	bhi.n	80028f8 <__ssputs_r+0x84>
 8002886:	898a      	ldrh	r2, [r1, #12]
 8002888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800288c:	d032      	beq.n	80028f4 <__ssputs_r+0x80>
 800288e:	6825      	ldr	r5, [r4, #0]
 8002890:	6909      	ldr	r1, [r1, #16]
 8002892:	3301      	adds	r3, #1
 8002894:	eba5 0901 	sub.w	r9, r5, r1
 8002898:	6965      	ldr	r5, [r4, #20]
 800289a:	444b      	add	r3, r9
 800289c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028a4:	106d      	asrs	r5, r5, #1
 80028a6:	429d      	cmp	r5, r3
 80028a8:	bf38      	it	cc
 80028aa:	461d      	movcc	r5, r3
 80028ac:	0553      	lsls	r3, r2, #21
 80028ae:	d531      	bpl.n	8002914 <__ssputs_r+0xa0>
 80028b0:	4629      	mov	r1, r5
 80028b2:	f000 fb6f 	bl	8002f94 <_malloc_r>
 80028b6:	4606      	mov	r6, r0
 80028b8:	b950      	cbnz	r0, 80028d0 <__ssputs_r+0x5c>
 80028ba:	230c      	movs	r3, #12
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f8ca 3000 	str.w	r3, [sl]
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ca:	81a3      	strh	r3, [r4, #12]
 80028cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028d0:	464a      	mov	r2, r9
 80028d2:	6921      	ldr	r1, [r4, #16]
 80028d4:	f000 face 	bl	8002e74 <memcpy>
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	6126      	str	r6, [r4, #16]
 80028e6:	444e      	add	r6, r9
 80028e8:	6026      	str	r6, [r4, #0]
 80028ea:	463e      	mov	r6, r7
 80028ec:	6165      	str	r5, [r4, #20]
 80028ee:	eba5 0509 	sub.w	r5, r5, r9
 80028f2:	60a5      	str	r5, [r4, #8]
 80028f4:	42be      	cmp	r6, r7
 80028f6:	d900      	bls.n	80028fa <__ssputs_r+0x86>
 80028f8:	463e      	mov	r6, r7
 80028fa:	4632      	mov	r2, r6
 80028fc:	4641      	mov	r1, r8
 80028fe:	6820      	ldr	r0, [r4, #0]
 8002900:	f000 fac6 	bl	8002e90 <memmove>
 8002904:	68a3      	ldr	r3, [r4, #8]
 8002906:	2000      	movs	r0, #0
 8002908:	1b9b      	subs	r3, r3, r6
 800290a:	60a3      	str	r3, [r4, #8]
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	4433      	add	r3, r6
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	e7db      	b.n	80028cc <__ssputs_r+0x58>
 8002914:	462a      	mov	r2, r5
 8002916:	f000 fbb1 	bl	800307c <_realloc_r>
 800291a:	4606      	mov	r6, r0
 800291c:	2800      	cmp	r0, #0
 800291e:	d1e1      	bne.n	80028e4 <__ssputs_r+0x70>
 8002920:	4650      	mov	r0, sl
 8002922:	6921      	ldr	r1, [r4, #16]
 8002924:	f000 face 	bl	8002ec4 <_free_r>
 8002928:	e7c7      	b.n	80028ba <__ssputs_r+0x46>
	...

0800292c <_svfiprintf_r>:
 800292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4698      	mov	r8, r3
 8002932:	898b      	ldrh	r3, [r1, #12]
 8002934:	4607      	mov	r7, r0
 8002936:	061b      	lsls	r3, r3, #24
 8002938:	460d      	mov	r5, r1
 800293a:	4614      	mov	r4, r2
 800293c:	b09d      	sub	sp, #116	; 0x74
 800293e:	d50e      	bpl.n	800295e <_svfiprintf_r+0x32>
 8002940:	690b      	ldr	r3, [r1, #16]
 8002942:	b963      	cbnz	r3, 800295e <_svfiprintf_r+0x32>
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	f000 fb25 	bl	8002f94 <_malloc_r>
 800294a:	6028      	str	r0, [r5, #0]
 800294c:	6128      	str	r0, [r5, #16]
 800294e:	b920      	cbnz	r0, 800295a <_svfiprintf_r+0x2e>
 8002950:	230c      	movs	r3, #12
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e0d1      	b.n	8002afe <_svfiprintf_r+0x1d2>
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	616b      	str	r3, [r5, #20]
 800295e:	2300      	movs	r3, #0
 8002960:	9309      	str	r3, [sp, #36]	; 0x24
 8002962:	2320      	movs	r3, #32
 8002964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002968:	2330      	movs	r3, #48	; 0x30
 800296a:	f04f 0901 	mov.w	r9, #1
 800296e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002972:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b18 <_svfiprintf_r+0x1ec>
 8002976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800297a:	4623      	mov	r3, r4
 800297c:	469a      	mov	sl, r3
 800297e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002982:	b10a      	cbz	r2, 8002988 <_svfiprintf_r+0x5c>
 8002984:	2a25      	cmp	r2, #37	; 0x25
 8002986:	d1f9      	bne.n	800297c <_svfiprintf_r+0x50>
 8002988:	ebba 0b04 	subs.w	fp, sl, r4
 800298c:	d00b      	beq.n	80029a6 <_svfiprintf_r+0x7a>
 800298e:	465b      	mov	r3, fp
 8002990:	4622      	mov	r2, r4
 8002992:	4629      	mov	r1, r5
 8002994:	4638      	mov	r0, r7
 8002996:	f7ff ff6d 	bl	8002874 <__ssputs_r>
 800299a:	3001      	adds	r0, #1
 800299c:	f000 80aa 	beq.w	8002af4 <_svfiprintf_r+0x1c8>
 80029a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a2:	445a      	add	r2, fp
 80029a4:	9209      	str	r2, [sp, #36]	; 0x24
 80029a6:	f89a 3000 	ldrb.w	r3, [sl]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80a2 	beq.w	8002af4 <_svfiprintf_r+0x1c8>
 80029b0:	2300      	movs	r3, #0
 80029b2:	f04f 32ff 	mov.w	r2, #4294967295
 80029b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029ba:	f10a 0a01 	add.w	sl, sl, #1
 80029be:	9304      	str	r3, [sp, #16]
 80029c0:	9307      	str	r3, [sp, #28]
 80029c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029c6:	931a      	str	r3, [sp, #104]	; 0x68
 80029c8:	4654      	mov	r4, sl
 80029ca:	2205      	movs	r2, #5
 80029cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d0:	4851      	ldr	r0, [pc, #324]	; (8002b18 <_svfiprintf_r+0x1ec>)
 80029d2:	f000 fa41 	bl	8002e58 <memchr>
 80029d6:	9a04      	ldr	r2, [sp, #16]
 80029d8:	b9d8      	cbnz	r0, 8002a12 <_svfiprintf_r+0xe6>
 80029da:	06d0      	lsls	r0, r2, #27
 80029dc:	bf44      	itt	mi
 80029de:	2320      	movmi	r3, #32
 80029e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029e4:	0711      	lsls	r1, r2, #28
 80029e6:	bf44      	itt	mi
 80029e8:	232b      	movmi	r3, #43	; 0x2b
 80029ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ee:	f89a 3000 	ldrb.w	r3, [sl]
 80029f2:	2b2a      	cmp	r3, #42	; 0x2a
 80029f4:	d015      	beq.n	8002a22 <_svfiprintf_r+0xf6>
 80029f6:	4654      	mov	r4, sl
 80029f8:	2000      	movs	r0, #0
 80029fa:	f04f 0c0a 	mov.w	ip, #10
 80029fe:	9a07      	ldr	r2, [sp, #28]
 8002a00:	4621      	mov	r1, r4
 8002a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a06:	3b30      	subs	r3, #48	; 0x30
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	d94e      	bls.n	8002aaa <_svfiprintf_r+0x17e>
 8002a0c:	b1b0      	cbz	r0, 8002a3c <_svfiprintf_r+0x110>
 8002a0e:	9207      	str	r2, [sp, #28]
 8002a10:	e014      	b.n	8002a3c <_svfiprintf_r+0x110>
 8002a12:	eba0 0308 	sub.w	r3, r0, r8
 8002a16:	fa09 f303 	lsl.w	r3, r9, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	46a2      	mov	sl, r4
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	e7d2      	b.n	80029c8 <_svfiprintf_r+0x9c>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	1d19      	adds	r1, r3, #4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	9103      	str	r1, [sp, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bfbb      	ittet	lt
 8002a2e:	425b      	neglt	r3, r3
 8002a30:	f042 0202 	orrlt.w	r2, r2, #2
 8002a34:	9307      	strge	r3, [sp, #28]
 8002a36:	9307      	strlt	r3, [sp, #28]
 8002a38:	bfb8      	it	lt
 8002a3a:	9204      	strlt	r2, [sp, #16]
 8002a3c:	7823      	ldrb	r3, [r4, #0]
 8002a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a40:	d10c      	bne.n	8002a5c <_svfiprintf_r+0x130>
 8002a42:	7863      	ldrb	r3, [r4, #1]
 8002a44:	2b2a      	cmp	r3, #42	; 0x2a
 8002a46:	d135      	bne.n	8002ab4 <_svfiprintf_r+0x188>
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	3402      	adds	r4, #2
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	9203      	str	r2, [sp, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bfb8      	it	lt
 8002a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a5a:	9305      	str	r3, [sp, #20]
 8002a5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002b1c <_svfiprintf_r+0x1f0>
 8002a60:	2203      	movs	r2, #3
 8002a62:	4650      	mov	r0, sl
 8002a64:	7821      	ldrb	r1, [r4, #0]
 8002a66:	f000 f9f7 	bl	8002e58 <memchr>
 8002a6a:	b140      	cbz	r0, 8002a7e <_svfiprintf_r+0x152>
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	eba0 000a 	sub.w	r0, r0, sl
 8002a72:	fa03 f000 	lsl.w	r0, r3, r0
 8002a76:	9b04      	ldr	r3, [sp, #16]
 8002a78:	3401      	adds	r4, #1
 8002a7a:	4303      	orrs	r3, r0
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a82:	2206      	movs	r2, #6
 8002a84:	4826      	ldr	r0, [pc, #152]	; (8002b20 <_svfiprintf_r+0x1f4>)
 8002a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a8a:	f000 f9e5 	bl	8002e58 <memchr>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d038      	beq.n	8002b04 <_svfiprintf_r+0x1d8>
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <_svfiprintf_r+0x1f8>)
 8002a94:	bb1b      	cbnz	r3, 8002ade <_svfiprintf_r+0x1b2>
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	3307      	adds	r3, #7
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	9303      	str	r3, [sp, #12]
 8002aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa4:	4433      	add	r3, r6
 8002aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa8:	e767      	b.n	800297a <_svfiprintf_r+0x4e>
 8002aaa:	460c      	mov	r4, r1
 8002aac:	2001      	movs	r0, #1
 8002aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ab2:	e7a5      	b.n	8002a00 <_svfiprintf_r+0xd4>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f04f 0c0a 	mov.w	ip, #10
 8002aba:	4619      	mov	r1, r3
 8002abc:	3401      	adds	r4, #1
 8002abe:	9305      	str	r3, [sp, #20]
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ac6:	3a30      	subs	r2, #48	; 0x30
 8002ac8:	2a09      	cmp	r2, #9
 8002aca:	d903      	bls.n	8002ad4 <_svfiprintf_r+0x1a8>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0c5      	beq.n	8002a5c <_svfiprintf_r+0x130>
 8002ad0:	9105      	str	r1, [sp, #20]
 8002ad2:	e7c3      	b.n	8002a5c <_svfiprintf_r+0x130>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002adc:	e7f0      	b.n	8002ac0 <_svfiprintf_r+0x194>
 8002ade:	ab03      	add	r3, sp, #12
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	462a      	mov	r2, r5
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_svfiprintf_r+0x1fc>)
 8002ae8:	a904      	add	r1, sp, #16
 8002aea:	f3af 8000 	nop.w
 8002aee:	1c42      	adds	r2, r0, #1
 8002af0:	4606      	mov	r6, r0
 8002af2:	d1d6      	bne.n	8002aa2 <_svfiprintf_r+0x176>
 8002af4:	89ab      	ldrh	r3, [r5, #12]
 8002af6:	065b      	lsls	r3, r3, #25
 8002af8:	f53f af2c 	bmi.w	8002954 <_svfiprintf_r+0x28>
 8002afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002afe:	b01d      	add	sp, #116	; 0x74
 8002b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b04:	ab03      	add	r3, sp, #12
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	462a      	mov	r2, r5
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <_svfiprintf_r+0x1fc>)
 8002b0e:	a904      	add	r1, sp, #16
 8002b10:	f000 f87c 	bl	8002c0c <_printf_i>
 8002b14:	e7eb      	b.n	8002aee <_svfiprintf_r+0x1c2>
 8002b16:	bf00      	nop
 8002b18:	08003182 	.word	0x08003182
 8002b1c:	08003188 	.word	0x08003188
 8002b20:	0800318c 	.word	0x0800318c
 8002b24:	00000000 	.word	0x00000000
 8002b28:	08002875 	.word	0x08002875

08002b2c <_printf_common>:
 8002b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b30:	4616      	mov	r6, r2
 8002b32:	4699      	mov	r9, r3
 8002b34:	688a      	ldr	r2, [r1, #8]
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	4607      	mov	r7, r0
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	bfb8      	it	lt
 8002b3e:	4613      	movlt	r3, r2
 8002b40:	6033      	str	r3, [r6, #0]
 8002b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b46:	460c      	mov	r4, r1
 8002b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b4c:	b10a      	cbz	r2, 8002b52 <_printf_common+0x26>
 8002b4e:	3301      	adds	r3, #1
 8002b50:	6033      	str	r3, [r6, #0]
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	0699      	lsls	r1, r3, #26
 8002b56:	bf42      	ittt	mi
 8002b58:	6833      	ldrmi	r3, [r6, #0]
 8002b5a:	3302      	addmi	r3, #2
 8002b5c:	6033      	strmi	r3, [r6, #0]
 8002b5e:	6825      	ldr	r5, [r4, #0]
 8002b60:	f015 0506 	ands.w	r5, r5, #6
 8002b64:	d106      	bne.n	8002b74 <_printf_common+0x48>
 8002b66:	f104 0a19 	add.w	sl, r4, #25
 8002b6a:	68e3      	ldr	r3, [r4, #12]
 8002b6c:	6832      	ldr	r2, [r6, #0]
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	42ab      	cmp	r3, r5
 8002b72:	dc28      	bgt.n	8002bc6 <_printf_common+0x9a>
 8002b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b78:	1e13      	subs	r3, r2, #0
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	bf18      	it	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	0692      	lsls	r2, r2, #26
 8002b82:	d42d      	bmi.n	8002be0 <_printf_common+0xb4>
 8002b84:	4649      	mov	r1, r9
 8002b86:	4638      	mov	r0, r7
 8002b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b8c:	47c0      	blx	r8
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d020      	beq.n	8002bd4 <_printf_common+0xa8>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	68e5      	ldr	r5, [r4, #12]
 8002b96:	f003 0306 	and.w	r3, r3, #6
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf18      	it	ne
 8002b9e:	2500      	movne	r5, #0
 8002ba0:	6832      	ldr	r2, [r6, #0]
 8002ba2:	f04f 0600 	mov.w	r6, #0
 8002ba6:	68a3      	ldr	r3, [r4, #8]
 8002ba8:	bf08      	it	eq
 8002baa:	1aad      	subeq	r5, r5, r2
 8002bac:	6922      	ldr	r2, [r4, #16]
 8002bae:	bf08      	it	eq
 8002bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bfc4      	itt	gt
 8002bb8:	1a9b      	subgt	r3, r3, r2
 8002bba:	18ed      	addgt	r5, r5, r3
 8002bbc:	341a      	adds	r4, #26
 8002bbe:	42b5      	cmp	r5, r6
 8002bc0:	d11a      	bne.n	8002bf8 <_printf_common+0xcc>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e008      	b.n	8002bd8 <_printf_common+0xac>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4652      	mov	r2, sl
 8002bca:	4649      	mov	r1, r9
 8002bcc:	4638      	mov	r0, r7
 8002bce:	47c0      	blx	r8
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	d103      	bne.n	8002bdc <_printf_common+0xb0>
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bdc:	3501      	adds	r5, #1
 8002bde:	e7c4      	b.n	8002b6a <_printf_common+0x3e>
 8002be0:	2030      	movs	r0, #48	; 0x30
 8002be2:	18e1      	adds	r1, r4, r3
 8002be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bee:	4422      	add	r2, r4
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bf6:	e7c5      	b.n	8002b84 <_printf_common+0x58>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	4638      	mov	r0, r7
 8002c00:	47c0      	blx	r8
 8002c02:	3001      	adds	r0, #1
 8002c04:	d0e6      	beq.n	8002bd4 <_printf_common+0xa8>
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7d9      	b.n	8002bbe <_printf_common+0x92>
	...

08002c0c <_printf_i>:
 8002c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	7e0f      	ldrb	r7, [r1, #24]
 8002c12:	4691      	mov	r9, r2
 8002c14:	2f78      	cmp	r7, #120	; 0x78
 8002c16:	4680      	mov	r8, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	469a      	mov	sl, r3
 8002c1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c22:	d807      	bhi.n	8002c34 <_printf_i+0x28>
 8002c24:	2f62      	cmp	r7, #98	; 0x62
 8002c26:	d80a      	bhi.n	8002c3e <_printf_i+0x32>
 8002c28:	2f00      	cmp	r7, #0
 8002c2a:	f000 80d9 	beq.w	8002de0 <_printf_i+0x1d4>
 8002c2e:	2f58      	cmp	r7, #88	; 0x58
 8002c30:	f000 80a4 	beq.w	8002d7c <_printf_i+0x170>
 8002c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c3c:	e03a      	b.n	8002cb4 <_printf_i+0xa8>
 8002c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c42:	2b15      	cmp	r3, #21
 8002c44:	d8f6      	bhi.n	8002c34 <_printf_i+0x28>
 8002c46:	a101      	add	r1, pc, #4	; (adr r1, 8002c4c <_printf_i+0x40>)
 8002c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c4c:	08002ca5 	.word	0x08002ca5
 8002c50:	08002cb9 	.word	0x08002cb9
 8002c54:	08002c35 	.word	0x08002c35
 8002c58:	08002c35 	.word	0x08002c35
 8002c5c:	08002c35 	.word	0x08002c35
 8002c60:	08002c35 	.word	0x08002c35
 8002c64:	08002cb9 	.word	0x08002cb9
 8002c68:	08002c35 	.word	0x08002c35
 8002c6c:	08002c35 	.word	0x08002c35
 8002c70:	08002c35 	.word	0x08002c35
 8002c74:	08002c35 	.word	0x08002c35
 8002c78:	08002dc7 	.word	0x08002dc7
 8002c7c:	08002ce9 	.word	0x08002ce9
 8002c80:	08002da9 	.word	0x08002da9
 8002c84:	08002c35 	.word	0x08002c35
 8002c88:	08002c35 	.word	0x08002c35
 8002c8c:	08002de9 	.word	0x08002de9
 8002c90:	08002c35 	.word	0x08002c35
 8002c94:	08002ce9 	.word	0x08002ce9
 8002c98:	08002c35 	.word	0x08002c35
 8002c9c:	08002c35 	.word	0x08002c35
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	602a      	str	r2, [r5, #0]
 8002cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0a4      	b.n	8002e02 <_printf_i+0x1f6>
 8002cb8:	6820      	ldr	r0, [r4, #0]
 8002cba:	6829      	ldr	r1, [r5, #0]
 8002cbc:	0606      	lsls	r6, r0, #24
 8002cbe:	f101 0304 	add.w	r3, r1, #4
 8002cc2:	d50a      	bpl.n	8002cda <_printf_i+0xce>
 8002cc4:	680e      	ldr	r6, [r1, #0]
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	2e00      	cmp	r6, #0
 8002cca:	da03      	bge.n	8002cd4 <_printf_i+0xc8>
 8002ccc:	232d      	movs	r3, #45	; 0x2d
 8002cce:	4276      	negs	r6, r6
 8002cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	485e      	ldr	r0, [pc, #376]	; (8002e50 <_printf_i+0x244>)
 8002cd8:	e019      	b.n	8002d0e <_printf_i+0x102>
 8002cda:	680e      	ldr	r6, [r1, #0]
 8002cdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ce0:	602b      	str	r3, [r5, #0]
 8002ce2:	bf18      	it	ne
 8002ce4:	b236      	sxthne	r6, r6
 8002ce6:	e7ef      	b.n	8002cc8 <_printf_i+0xbc>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	1d19      	adds	r1, r3, #4
 8002cee:	6029      	str	r1, [r5, #0]
 8002cf0:	0601      	lsls	r1, r0, #24
 8002cf2:	d501      	bpl.n	8002cf8 <_printf_i+0xec>
 8002cf4:	681e      	ldr	r6, [r3, #0]
 8002cf6:	e002      	b.n	8002cfe <_printf_i+0xf2>
 8002cf8:	0646      	lsls	r6, r0, #25
 8002cfa:	d5fb      	bpl.n	8002cf4 <_printf_i+0xe8>
 8002cfc:	881e      	ldrh	r6, [r3, #0]
 8002cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8002d00:	bf0c      	ite	eq
 8002d02:	2308      	moveq	r3, #8
 8002d04:	230a      	movne	r3, #10
 8002d06:	4852      	ldr	r0, [pc, #328]	; (8002e50 <_printf_i+0x244>)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d0e:	6865      	ldr	r5, [r4, #4]
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	bfa8      	it	ge
 8002d14:	6821      	ldrge	r1, [r4, #0]
 8002d16:	60a5      	str	r5, [r4, #8]
 8002d18:	bfa4      	itt	ge
 8002d1a:	f021 0104 	bicge.w	r1, r1, #4
 8002d1e:	6021      	strge	r1, [r4, #0]
 8002d20:	b90e      	cbnz	r6, 8002d26 <_printf_i+0x11a>
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d04d      	beq.n	8002dc2 <_printf_i+0x1b6>
 8002d26:	4615      	mov	r5, r2
 8002d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8002d30:	5dc7      	ldrb	r7, [r0, r7]
 8002d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d36:	4637      	mov	r7, r6
 8002d38:	42bb      	cmp	r3, r7
 8002d3a:	460e      	mov	r6, r1
 8002d3c:	d9f4      	bls.n	8002d28 <_printf_i+0x11c>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d10b      	bne.n	8002d5a <_printf_i+0x14e>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	07de      	lsls	r6, r3, #31
 8002d46:	d508      	bpl.n	8002d5a <_printf_i+0x14e>
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	6861      	ldr	r1, [r4, #4]
 8002d4c:	4299      	cmp	r1, r3
 8002d4e:	bfde      	ittt	le
 8002d50:	2330      	movle	r3, #48	; 0x30
 8002d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d5a:	1b52      	subs	r2, r2, r5
 8002d5c:	6122      	str	r2, [r4, #16]
 8002d5e:	464b      	mov	r3, r9
 8002d60:	4621      	mov	r1, r4
 8002d62:	4640      	mov	r0, r8
 8002d64:	f8cd a000 	str.w	sl, [sp]
 8002d68:	aa03      	add	r2, sp, #12
 8002d6a:	f7ff fedf 	bl	8002b2c <_printf_common>
 8002d6e:	3001      	adds	r0, #1
 8002d70:	d14c      	bne.n	8002e0c <_printf_i+0x200>
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295
 8002d76:	b004      	add	sp, #16
 8002d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7c:	4834      	ldr	r0, [pc, #208]	; (8002e50 <_printf_i+0x244>)
 8002d7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d82:	6829      	ldr	r1, [r5, #0]
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d8a:	6029      	str	r1, [r5, #0]
 8002d8c:	061d      	lsls	r5, r3, #24
 8002d8e:	d514      	bpl.n	8002dba <_printf_i+0x1ae>
 8002d90:	07df      	lsls	r7, r3, #31
 8002d92:	bf44      	itt	mi
 8002d94:	f043 0320 	orrmi.w	r3, r3, #32
 8002d98:	6023      	strmi	r3, [r4, #0]
 8002d9a:	b91e      	cbnz	r6, 8002da4 <_printf_i+0x198>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	f023 0320 	bic.w	r3, r3, #32
 8002da2:	6023      	str	r3, [r4, #0]
 8002da4:	2310      	movs	r3, #16
 8002da6:	e7af      	b.n	8002d08 <_printf_i+0xfc>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	6023      	str	r3, [r4, #0]
 8002db0:	2378      	movs	r3, #120	; 0x78
 8002db2:	4828      	ldr	r0, [pc, #160]	; (8002e54 <_printf_i+0x248>)
 8002db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002db8:	e7e3      	b.n	8002d82 <_printf_i+0x176>
 8002dba:	0659      	lsls	r1, r3, #25
 8002dbc:	bf48      	it	mi
 8002dbe:	b2b6      	uxthmi	r6, r6
 8002dc0:	e7e6      	b.n	8002d90 <_printf_i+0x184>
 8002dc2:	4615      	mov	r5, r2
 8002dc4:	e7bb      	b.n	8002d3e <_printf_i+0x132>
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	6826      	ldr	r6, [r4, #0]
 8002dca:	1d18      	adds	r0, r3, #4
 8002dcc:	6961      	ldr	r1, [r4, #20]
 8002dce:	6028      	str	r0, [r5, #0]
 8002dd0:	0635      	lsls	r5, r6, #24
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	d501      	bpl.n	8002dda <_printf_i+0x1ce>
 8002dd6:	6019      	str	r1, [r3, #0]
 8002dd8:	e002      	b.n	8002de0 <_printf_i+0x1d4>
 8002dda:	0670      	lsls	r0, r6, #25
 8002ddc:	d5fb      	bpl.n	8002dd6 <_printf_i+0x1ca>
 8002dde:	8019      	strh	r1, [r3, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	4615      	mov	r5, r2
 8002de4:	6123      	str	r3, [r4, #16]
 8002de6:	e7ba      	b.n	8002d5e <_printf_i+0x152>
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	2100      	movs	r1, #0
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	602a      	str	r2, [r5, #0]
 8002df0:	681d      	ldr	r5, [r3, #0]
 8002df2:	6862      	ldr	r2, [r4, #4]
 8002df4:	4628      	mov	r0, r5
 8002df6:	f000 f82f 	bl	8002e58 <memchr>
 8002dfa:	b108      	cbz	r0, 8002e00 <_printf_i+0x1f4>
 8002dfc:	1b40      	subs	r0, r0, r5
 8002dfe:	6060      	str	r0, [r4, #4]
 8002e00:	6863      	ldr	r3, [r4, #4]
 8002e02:	6123      	str	r3, [r4, #16]
 8002e04:	2300      	movs	r3, #0
 8002e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e0a:	e7a8      	b.n	8002d5e <_printf_i+0x152>
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	4649      	mov	r1, r9
 8002e10:	4640      	mov	r0, r8
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	47d0      	blx	sl
 8002e16:	3001      	adds	r0, #1
 8002e18:	d0ab      	beq.n	8002d72 <_printf_i+0x166>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	079b      	lsls	r3, r3, #30
 8002e1e:	d413      	bmi.n	8002e48 <_printf_i+0x23c>
 8002e20:	68e0      	ldr	r0, [r4, #12]
 8002e22:	9b03      	ldr	r3, [sp, #12]
 8002e24:	4298      	cmp	r0, r3
 8002e26:	bfb8      	it	lt
 8002e28:	4618      	movlt	r0, r3
 8002e2a:	e7a4      	b.n	8002d76 <_printf_i+0x16a>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	4632      	mov	r2, r6
 8002e30:	4649      	mov	r1, r9
 8002e32:	4640      	mov	r0, r8
 8002e34:	47d0      	blx	sl
 8002e36:	3001      	adds	r0, #1
 8002e38:	d09b      	beq.n	8002d72 <_printf_i+0x166>
 8002e3a:	3501      	adds	r5, #1
 8002e3c:	68e3      	ldr	r3, [r4, #12]
 8002e3e:	9903      	ldr	r1, [sp, #12]
 8002e40:	1a5b      	subs	r3, r3, r1
 8002e42:	42ab      	cmp	r3, r5
 8002e44:	dcf2      	bgt.n	8002e2c <_printf_i+0x220>
 8002e46:	e7eb      	b.n	8002e20 <_printf_i+0x214>
 8002e48:	2500      	movs	r5, #0
 8002e4a:	f104 0619 	add.w	r6, r4, #25
 8002e4e:	e7f5      	b.n	8002e3c <_printf_i+0x230>
 8002e50:	08003193 	.word	0x08003193
 8002e54:	080031a4 	.word	0x080031a4

08002e58 <memchr>:
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	b2c9      	uxtb	r1, r1
 8002e5e:	4402      	add	r2, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	d101      	bne.n	8002e6a <memchr+0x12>
 8002e66:	2000      	movs	r0, #0
 8002e68:	e003      	b.n	8002e72 <memchr+0x1a>
 8002e6a:	7804      	ldrb	r4, [r0, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	428c      	cmp	r4, r1
 8002e70:	d1f6      	bne.n	8002e60 <memchr+0x8>
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <memcpy>:
 8002e74:	440a      	add	r2, r1
 8002e76:	4291      	cmp	r1, r2
 8002e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e7c:	d100      	bne.n	8002e80 <memcpy+0xc>
 8002e7e:	4770      	bx	lr
 8002e80:	b510      	push	{r4, lr}
 8002e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e86:	4291      	cmp	r1, r2
 8002e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e8c:	d1f9      	bne.n	8002e82 <memcpy+0xe>
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <memmove>:
 8002e90:	4288      	cmp	r0, r1
 8002e92:	b510      	push	{r4, lr}
 8002e94:	eb01 0402 	add.w	r4, r1, r2
 8002e98:	d902      	bls.n	8002ea0 <memmove+0x10>
 8002e9a:	4284      	cmp	r4, r0
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	d807      	bhi.n	8002eb0 <memmove+0x20>
 8002ea0:	1e43      	subs	r3, r0, #1
 8002ea2:	42a1      	cmp	r1, r4
 8002ea4:	d008      	beq.n	8002eb8 <memmove+0x28>
 8002ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eae:	e7f8      	b.n	8002ea2 <memmove+0x12>
 8002eb0:	4601      	mov	r1, r0
 8002eb2:	4402      	add	r2, r0
 8002eb4:	428a      	cmp	r2, r1
 8002eb6:	d100      	bne.n	8002eba <memmove+0x2a>
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ec2:	e7f7      	b.n	8002eb4 <memmove+0x24>

08002ec4 <_free_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d040      	beq.n	8002f4e <_free_r+0x8a>
 8002ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed0:	1f0c      	subs	r4, r1, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	18e4      	addlt	r4, r4, r3
 8002ed8:	f000 f910 	bl	80030fc <__malloc_lock>
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <_free_r+0x8c>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	b933      	cbnz	r3, 8002ef0 <_free_r+0x2c>
 8002ee2:	6063      	str	r3, [r4, #4]
 8002ee4:	6014      	str	r4, [r2, #0]
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eec:	f000 b90c 	b.w	8003108 <__malloc_unlock>
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	d908      	bls.n	8002f06 <_free_r+0x42>
 8002ef4:	6820      	ldr	r0, [r4, #0]
 8002ef6:	1821      	adds	r1, r4, r0
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	bf01      	itttt	eq
 8002efc:	6819      	ldreq	r1, [r3, #0]
 8002efe:	685b      	ldreq	r3, [r3, #4]
 8002f00:	1809      	addeq	r1, r1, r0
 8002f02:	6021      	streq	r1, [r4, #0]
 8002f04:	e7ed      	b.n	8002ee2 <_free_r+0x1e>
 8002f06:	461a      	mov	r2, r3
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	b10b      	cbz	r3, 8002f10 <_free_r+0x4c>
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d9fa      	bls.n	8002f06 <_free_r+0x42>
 8002f10:	6811      	ldr	r1, [r2, #0]
 8002f12:	1850      	adds	r0, r2, r1
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d10b      	bne.n	8002f30 <_free_r+0x6c>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	1850      	adds	r0, r2, r1
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	d1e0      	bne.n	8002ee6 <_free_r+0x22>
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4401      	add	r1, r0
 8002f2a:	6011      	str	r1, [r2, #0]
 8002f2c:	6053      	str	r3, [r2, #4]
 8002f2e:	e7da      	b.n	8002ee6 <_free_r+0x22>
 8002f30:	d902      	bls.n	8002f38 <_free_r+0x74>
 8002f32:	230c      	movs	r3, #12
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	e7d6      	b.n	8002ee6 <_free_r+0x22>
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	1821      	adds	r1, r4, r0
 8002f3c:	428b      	cmp	r3, r1
 8002f3e:	bf01      	itttt	eq
 8002f40:	6819      	ldreq	r1, [r3, #0]
 8002f42:	685b      	ldreq	r3, [r3, #4]
 8002f44:	1809      	addeq	r1, r1, r0
 8002f46:	6021      	streq	r1, [r4, #0]
 8002f48:	6063      	str	r3, [r4, #4]
 8002f4a:	6054      	str	r4, [r2, #4]
 8002f4c:	e7cb      	b.n	8002ee6 <_free_r+0x22>
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	200001dc 	.word	0x200001dc

08002f54 <sbrk_aligned>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	4e0e      	ldr	r6, [pc, #56]	; (8002f90 <sbrk_aligned+0x3c>)
 8002f58:	460c      	mov	r4, r1
 8002f5a:	6831      	ldr	r1, [r6, #0]
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	b911      	cbnz	r1, 8002f66 <sbrk_aligned+0x12>
 8002f60:	f000 f8bc 	bl	80030dc <_sbrk_r>
 8002f64:	6030      	str	r0, [r6, #0]
 8002f66:	4621      	mov	r1, r4
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f000 f8b7 	bl	80030dc <_sbrk_r>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	d00a      	beq.n	8002f88 <sbrk_aligned+0x34>
 8002f72:	1cc4      	adds	r4, r0, #3
 8002f74:	f024 0403 	bic.w	r4, r4, #3
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d007      	beq.n	8002f8c <sbrk_aligned+0x38>
 8002f7c:	1a21      	subs	r1, r4, r0
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f8ac 	bl	80030dc <_sbrk_r>
 8002f84:	3001      	adds	r0, #1
 8002f86:	d101      	bne.n	8002f8c <sbrk_aligned+0x38>
 8002f88:	f04f 34ff 	mov.w	r4, #4294967295
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	200001e0 	.word	0x200001e0

08002f94 <_malloc_r>:
 8002f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f98:	1ccd      	adds	r5, r1, #3
 8002f9a:	f025 0503 	bic.w	r5, r5, #3
 8002f9e:	3508      	adds	r5, #8
 8002fa0:	2d0c      	cmp	r5, #12
 8002fa2:	bf38      	it	cc
 8002fa4:	250c      	movcc	r5, #12
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	4607      	mov	r7, r0
 8002faa:	db01      	blt.n	8002fb0 <_malloc_r+0x1c>
 8002fac:	42a9      	cmp	r1, r5
 8002fae:	d905      	bls.n	8002fbc <_malloc_r+0x28>
 8002fb0:	230c      	movs	r3, #12
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fbc:	4e2e      	ldr	r6, [pc, #184]	; (8003078 <_malloc_r+0xe4>)
 8002fbe:	f000 f89d 	bl	80030fc <__malloc_lock>
 8002fc2:	6833      	ldr	r3, [r6, #0]
 8002fc4:	461c      	mov	r4, r3
 8002fc6:	bb34      	cbnz	r4, 8003016 <_malloc_r+0x82>
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f7ff ffc2 	bl	8002f54 <sbrk_aligned>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	d14d      	bne.n	8003072 <_malloc_r+0xde>
 8002fd6:	6834      	ldr	r4, [r6, #0]
 8002fd8:	4626      	mov	r6, r4
 8002fda:	2e00      	cmp	r6, #0
 8002fdc:	d140      	bne.n	8003060 <_malloc_r+0xcc>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	eb04 0803 	add.w	r8, r4, r3
 8002fe8:	f000 f878 	bl	80030dc <_sbrk_r>
 8002fec:	4580      	cmp	r8, r0
 8002fee:	d13a      	bne.n	8003066 <_malloc_r+0xd2>
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	3503      	adds	r5, #3
 8002ff4:	1a6d      	subs	r5, r5, r1
 8002ff6:	f025 0503 	bic.w	r5, r5, #3
 8002ffa:	3508      	adds	r5, #8
 8002ffc:	2d0c      	cmp	r5, #12
 8002ffe:	bf38      	it	cc
 8003000:	250c      	movcc	r5, #12
 8003002:	4638      	mov	r0, r7
 8003004:	4629      	mov	r1, r5
 8003006:	f7ff ffa5 	bl	8002f54 <sbrk_aligned>
 800300a:	3001      	adds	r0, #1
 800300c:	d02b      	beq.n	8003066 <_malloc_r+0xd2>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	442b      	add	r3, r5
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	e00e      	b.n	8003034 <_malloc_r+0xa0>
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	1b52      	subs	r2, r2, r5
 800301a:	d41e      	bmi.n	800305a <_malloc_r+0xc6>
 800301c:	2a0b      	cmp	r2, #11
 800301e:	d916      	bls.n	800304e <_malloc_r+0xba>
 8003020:	1961      	adds	r1, r4, r5
 8003022:	42a3      	cmp	r3, r4
 8003024:	6025      	str	r5, [r4, #0]
 8003026:	bf18      	it	ne
 8003028:	6059      	strne	r1, [r3, #4]
 800302a:	6863      	ldr	r3, [r4, #4]
 800302c:	bf08      	it	eq
 800302e:	6031      	streq	r1, [r6, #0]
 8003030:	5162      	str	r2, [r4, r5]
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	4638      	mov	r0, r7
 8003036:	f104 060b 	add.w	r6, r4, #11
 800303a:	f000 f865 	bl	8003108 <__malloc_unlock>
 800303e:	f026 0607 	bic.w	r6, r6, #7
 8003042:	1d23      	adds	r3, r4, #4
 8003044:	1af2      	subs	r2, r6, r3
 8003046:	d0b6      	beq.n	8002fb6 <_malloc_r+0x22>
 8003048:	1b9b      	subs	r3, r3, r6
 800304a:	50a3      	str	r3, [r4, r2]
 800304c:	e7b3      	b.n	8002fb6 <_malloc_r+0x22>
 800304e:	6862      	ldr	r2, [r4, #4]
 8003050:	42a3      	cmp	r3, r4
 8003052:	bf0c      	ite	eq
 8003054:	6032      	streq	r2, [r6, #0]
 8003056:	605a      	strne	r2, [r3, #4]
 8003058:	e7ec      	b.n	8003034 <_malloc_r+0xa0>
 800305a:	4623      	mov	r3, r4
 800305c:	6864      	ldr	r4, [r4, #4]
 800305e:	e7b2      	b.n	8002fc6 <_malloc_r+0x32>
 8003060:	4634      	mov	r4, r6
 8003062:	6876      	ldr	r6, [r6, #4]
 8003064:	e7b9      	b.n	8002fda <_malloc_r+0x46>
 8003066:	230c      	movs	r3, #12
 8003068:	4638      	mov	r0, r7
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	f000 f84c 	bl	8003108 <__malloc_unlock>
 8003070:	e7a1      	b.n	8002fb6 <_malloc_r+0x22>
 8003072:	6025      	str	r5, [r4, #0]
 8003074:	e7de      	b.n	8003034 <_malloc_r+0xa0>
 8003076:	bf00      	nop
 8003078:	200001dc 	.word	0x200001dc

0800307c <_realloc_r>:
 800307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003080:	4680      	mov	r8, r0
 8003082:	4614      	mov	r4, r2
 8003084:	460e      	mov	r6, r1
 8003086:	b921      	cbnz	r1, 8003092 <_realloc_r+0x16>
 8003088:	4611      	mov	r1, r2
 800308a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800308e:	f7ff bf81 	b.w	8002f94 <_malloc_r>
 8003092:	b92a      	cbnz	r2, 80030a0 <_realloc_r+0x24>
 8003094:	f7ff ff16 	bl	8002ec4 <_free_r>
 8003098:	4625      	mov	r5, r4
 800309a:	4628      	mov	r0, r5
 800309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a0:	f000 f838 	bl	8003114 <_malloc_usable_size_r>
 80030a4:	4284      	cmp	r4, r0
 80030a6:	4607      	mov	r7, r0
 80030a8:	d802      	bhi.n	80030b0 <_realloc_r+0x34>
 80030aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80030ae:	d812      	bhi.n	80030d6 <_realloc_r+0x5a>
 80030b0:	4621      	mov	r1, r4
 80030b2:	4640      	mov	r0, r8
 80030b4:	f7ff ff6e 	bl	8002f94 <_malloc_r>
 80030b8:	4605      	mov	r5, r0
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d0ed      	beq.n	800309a <_realloc_r+0x1e>
 80030be:	42bc      	cmp	r4, r7
 80030c0:	4622      	mov	r2, r4
 80030c2:	4631      	mov	r1, r6
 80030c4:	bf28      	it	cs
 80030c6:	463a      	movcs	r2, r7
 80030c8:	f7ff fed4 	bl	8002e74 <memcpy>
 80030cc:	4631      	mov	r1, r6
 80030ce:	4640      	mov	r0, r8
 80030d0:	f7ff fef8 	bl	8002ec4 <_free_r>
 80030d4:	e7e1      	b.n	800309a <_realloc_r+0x1e>
 80030d6:	4635      	mov	r5, r6
 80030d8:	e7df      	b.n	800309a <_realloc_r+0x1e>
	...

080030dc <_sbrk_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	2300      	movs	r3, #0
 80030e0:	4d05      	ldr	r5, [pc, #20]	; (80030f8 <_sbrk_r+0x1c>)
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	f7fd fbe0 	bl	80008ac <_sbrk>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_sbrk_r+0x1a>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_sbrk_r+0x1a>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	200001e4 	.word	0x200001e4

080030fc <__malloc_lock>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__malloc_lock+0x8>)
 80030fe:	f000 b811 	b.w	8003124 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	200001e8 	.word	0x200001e8

08003108 <__malloc_unlock>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__malloc_unlock+0x8>)
 800310a:	f000 b80c 	b.w	8003126 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	200001e8 	.word	0x200001e8

08003114 <_malloc_usable_size_r>:
 8003114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003118:	1f18      	subs	r0, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	bfbc      	itt	lt
 800311e:	580b      	ldrlt	r3, [r1, r0]
 8003120:	18c0      	addlt	r0, r0, r3
 8003122:	4770      	bx	lr

08003124 <__retarget_lock_acquire_recursive>:
 8003124:	4770      	bx	lr

08003126 <__retarget_lock_release_recursive>:
 8003126:	4770      	bx	lr

08003128 <_init>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr

08003134 <_fini>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr
